package bindings

import (
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	go_fuzz_utils "github.com/trailofbits/go-fuzz-utils"
)

func GetTypeProvider(data []byte) (*go_fuzz_utils.TypeProvider, error) {
	tp, err := go_fuzz_utils.NewTypeProvider(data)
	if err != nil {
		return nil, err
	}
	err = tp.SetParamsStringBounds(0, 1024)
	if err != nil {
		return nil, err
	}
	err = tp.SetParamsSliceBounds(0, 4096)
	if err != nil {
		return nil, err
	}
	err = tp.SetParamsBiases(0, 0, 0, 0)
	if err != nil {
		return nil, err
	}
	return tp, nil
}

func Fuzz_Nosy_AddressManagerAddressSetIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *AddressManagerAddressSetIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_AddressManagerAddressSetIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *AddressManagerAddressSetIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_AddressManagerAddressSetIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *AddressManagerAddressSetIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_AddressManagerCaller_GetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerCaller
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil || opts == nil {
			return
		}

		_AddressManager.GetAddress(opts, _name)
	})
}

func Fuzz_Nosy_AddressManagerCaller_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerCaller
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil || opts == nil {
			return
		}

		_AddressManager.Owner(opts)
	})
}

// skipping Fuzz_Nosy_AddressManagerCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_AddressManagerCallerSession_GetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerCallerSession
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil {
			return
		}

		_AddressManager.GetAddress(_name)
	})
}

func Fuzz_Nosy_AddressManagerCallerSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerCallerSession
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil {
			return
		}

		_AddressManager.Owner()
	})
}

func Fuzz_Nosy_AddressManagerFilterer_FilterAddressSet__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerFilterer
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var name []string
		fill_err = tp.Fill(&name)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil || opts == nil {
			return
		}

		_AddressManager.FilterAddressSet(opts, name)
	})
}

func Fuzz_Nosy_AddressManagerFilterer_FilterOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerFilterer
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var previousOwner []common.Address
		fill_err = tp.Fill(&previousOwner)
		if fill_err != nil {
			return
		}
		var newOwner []common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil || opts == nil {
			return
		}

		_AddressManager.FilterOwnershipTransferred(opts, previousOwner, newOwner)
	})
}

func Fuzz_Nosy_AddressManagerFilterer_ParseAddressSet__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerFilterer
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil {
			return
		}

		_AddressManager.ParseAddressSet(log)
	})
}

func Fuzz_Nosy_AddressManagerFilterer_ParseOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerFilterer
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil {
			return
		}

		_AddressManager.ParseOwnershipTransferred(log)
	})
}

// skipping Fuzz_Nosy_AddressManagerFilterer_WatchAddressSet__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.AddressManagerAddressSet

// skipping Fuzz_Nosy_AddressManagerFilterer_WatchOwnershipTransferred__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.AddressManagerOwnershipTransferred

func Fuzz_Nosy_AddressManagerOwnershipTransferredIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *AddressManagerOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_AddressManagerOwnershipTransferredIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *AddressManagerOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_AddressManagerOwnershipTransferredIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *AddressManagerOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_AddressManagerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_AddressManagerRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_AddressManagerRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerRaw
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil || opts == nil {
			return
		}

		_AddressManager.Transfer(opts)
	})
}

func Fuzz_Nosy_AddressManagerSession_GetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerSession
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil {
			return
		}

		_AddressManager.GetAddress(_name)
	})
}

func Fuzz_Nosy_AddressManagerSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerSession
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil {
			return
		}

		_AddressManager.Owner()
	})
}

func Fuzz_Nosy_AddressManagerSession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerSession
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil {
			return
		}

		_AddressManager.RenounceOwnership()
	})
}

func Fuzz_Nosy_AddressManagerSession_SetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerSession
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil {
			return
		}

		_AddressManager.SetAddress(_name, _address)
	})
}

func Fuzz_Nosy_AddressManagerSession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerSession
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil {
			return
		}

		_AddressManager.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_AddressManagerTransactor_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerTransactor
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil || opts == nil {
			return
		}

		_AddressManager.RenounceOwnership(opts)
	})
}

func Fuzz_Nosy_AddressManagerTransactor_SetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerTransactor
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil || opts == nil {
			return
		}

		_AddressManager.SetAddress(opts, _name, _address)
	})
}

func Fuzz_Nosy_AddressManagerTransactor_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerTransactor
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil || opts == nil {
			return
		}

		_AddressManager.TransferOwnership(opts, newOwner)
	})
}

// skipping Fuzz_Nosy_AddressManagerTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_AddressManagerTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerTransactorRaw
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil || opts == nil {
			return
		}

		_AddressManager.Transfer(opts)
	})
}

func Fuzz_Nosy_AddressManagerTransactorSession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerTransactorSession
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil {
			return
		}

		_AddressManager.RenounceOwnership()
	})
}

func Fuzz_Nosy_AddressManagerTransactorSession_SetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerTransactorSession
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil {
			return
		}

		_AddressManager.SetAddress(_name, _address)
	})
}

func Fuzz_Nosy_AddressManagerTransactorSession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AddressManager *AddressManagerTransactorSession
		fill_err = tp.Fill(&_AddressManager)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _AddressManager == nil {
			return
		}

		_AddressManager.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_AlphabetVM2Caller_Oracle__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM2 *AlphabetVM2Caller
		fill_err = tp.Fill(&_AlphabetVM2)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _AlphabetVM2 == nil || opts == nil {
			return
		}

		_AlphabetVM2.Oracle(opts)
	})
}

func Fuzz_Nosy_AlphabetVM2Caller_Step__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM2 *AlphabetVM2Caller
		fill_err = tp.Fill(&_AlphabetVM2)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _stateData []byte
		fill_err = tp.Fill(&_stateData)
		if fill_err != nil {
			return
		}
		var arg1 []byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		var _localContext [32]byte
		fill_err = tp.Fill(&_localContext)
		if fill_err != nil {
			return
		}
		if _AlphabetVM2 == nil || opts == nil {
			return
		}

		_AlphabetVM2.Step(opts, _stateData, arg1, _localContext)
	})
}

// skipping Fuzz_Nosy_AlphabetVM2CallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_AlphabetVM2CallerSession_Oracle__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM2 *AlphabetVM2CallerSession
		fill_err = tp.Fill(&_AlphabetVM2)
		if fill_err != nil {
			return
		}
		if _AlphabetVM2 == nil {
			return
		}

		_AlphabetVM2.Oracle()
	})
}

func Fuzz_Nosy_AlphabetVM2CallerSession_Step__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM2 *AlphabetVM2CallerSession
		fill_err = tp.Fill(&_AlphabetVM2)
		if fill_err != nil {
			return
		}
		var _stateData []byte
		fill_err = tp.Fill(&_stateData)
		if fill_err != nil {
			return
		}
		var arg1 []byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		var _localContext [32]byte
		fill_err = tp.Fill(&_localContext)
		if fill_err != nil {
			return
		}
		if _AlphabetVM2 == nil {
			return
		}

		_AlphabetVM2.Step(_stateData, arg1, _localContext)
	})
}

// skipping Fuzz_Nosy_AlphabetVM2Raw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_AlphabetVM2Raw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_AlphabetVM2Raw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM2 *AlphabetVM2Raw
		fill_err = tp.Fill(&_AlphabetVM2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _AlphabetVM2 == nil || opts == nil {
			return
		}

		_AlphabetVM2.Transfer(opts)
	})
}

func Fuzz_Nosy_AlphabetVM2Session_Oracle__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM2 *AlphabetVM2Session
		fill_err = tp.Fill(&_AlphabetVM2)
		if fill_err != nil {
			return
		}
		if _AlphabetVM2 == nil {
			return
		}

		_AlphabetVM2.Oracle()
	})
}

func Fuzz_Nosy_AlphabetVM2Session_Step__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM2 *AlphabetVM2Session
		fill_err = tp.Fill(&_AlphabetVM2)
		if fill_err != nil {
			return
		}
		var _stateData []byte
		fill_err = tp.Fill(&_stateData)
		if fill_err != nil {
			return
		}
		var arg1 []byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		var _localContext [32]byte
		fill_err = tp.Fill(&_localContext)
		if fill_err != nil {
			return
		}
		if _AlphabetVM2 == nil {
			return
		}

		_AlphabetVM2.Step(_stateData, arg1, _localContext)
	})
}

// skipping Fuzz_Nosy_AlphabetVM2TransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_AlphabetVM2TransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM2 *AlphabetVM2TransactorRaw
		fill_err = tp.Fill(&_AlphabetVM2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _AlphabetVM2 == nil || opts == nil {
			return
		}

		_AlphabetVM2.Transfer(opts)
	})
}

func Fuzz_Nosy_AlphabetVMCaller_Oracle__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM *AlphabetVMCaller
		fill_err = tp.Fill(&_AlphabetVM)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _AlphabetVM == nil || opts == nil {
			return
		}

		_AlphabetVM.Oracle(opts)
	})
}

func Fuzz_Nosy_AlphabetVMCaller_Step__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM *AlphabetVMCaller
		fill_err = tp.Fill(&_AlphabetVM)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _stateData []byte
		fill_err = tp.Fill(&_stateData)
		if fill_err != nil {
			return
		}
		var arg1 []byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		var _localContext [32]byte
		fill_err = tp.Fill(&_localContext)
		if fill_err != nil {
			return
		}
		if _AlphabetVM == nil || opts == nil {
			return
		}

		_AlphabetVM.Step(opts, _stateData, arg1, _localContext)
	})
}

// skipping Fuzz_Nosy_AlphabetVMCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_AlphabetVMCallerSession_Oracle__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM *AlphabetVMCallerSession
		fill_err = tp.Fill(&_AlphabetVM)
		if fill_err != nil {
			return
		}
		if _AlphabetVM == nil {
			return
		}

		_AlphabetVM.Oracle()
	})
}

func Fuzz_Nosy_AlphabetVMCallerSession_Step__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM *AlphabetVMCallerSession
		fill_err = tp.Fill(&_AlphabetVM)
		if fill_err != nil {
			return
		}
		var _stateData []byte
		fill_err = tp.Fill(&_stateData)
		if fill_err != nil {
			return
		}
		var arg1 []byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		var _localContext [32]byte
		fill_err = tp.Fill(&_localContext)
		if fill_err != nil {
			return
		}
		if _AlphabetVM == nil {
			return
		}

		_AlphabetVM.Step(_stateData, arg1, _localContext)
	})
}

// skipping Fuzz_Nosy_AlphabetVMRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_AlphabetVMRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_AlphabetVMRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM *AlphabetVMRaw
		fill_err = tp.Fill(&_AlphabetVM)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _AlphabetVM == nil || opts == nil {
			return
		}

		_AlphabetVM.Transfer(opts)
	})
}

func Fuzz_Nosy_AlphabetVMSession_Oracle__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM *AlphabetVMSession
		fill_err = tp.Fill(&_AlphabetVM)
		if fill_err != nil {
			return
		}
		if _AlphabetVM == nil {
			return
		}

		_AlphabetVM.Oracle()
	})
}

func Fuzz_Nosy_AlphabetVMSession_Step__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM *AlphabetVMSession
		fill_err = tp.Fill(&_AlphabetVM)
		if fill_err != nil {
			return
		}
		var _stateData []byte
		fill_err = tp.Fill(&_stateData)
		if fill_err != nil {
			return
		}
		var arg1 []byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		var _localContext [32]byte
		fill_err = tp.Fill(&_localContext)
		if fill_err != nil {
			return
		}
		if _AlphabetVM == nil {
			return
		}

		_AlphabetVM.Step(_stateData, arg1, _localContext)
	})
}

// skipping Fuzz_Nosy_AlphabetVMTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_AlphabetVMTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _AlphabetVM *AlphabetVMTransactorRaw
		fill_err = tp.Fill(&_AlphabetVM)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _AlphabetVM == nil || opts == nil {
			return
		}

		_AlphabetVM.Transfer(opts)
	})
}

func Fuzz_Nosy_BaseFeeVaultCaller_MINWITHDRAWALAMOUNT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultCaller
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil || opts == nil {
			return
		}

		_BaseFeeVault.MINWITHDRAWALAMOUNT(opts)
	})
}

func Fuzz_Nosy_BaseFeeVaultCaller_RECIPIENT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultCaller
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil || opts == nil {
			return
		}

		_BaseFeeVault.RECIPIENT(opts)
	})
}

func Fuzz_Nosy_BaseFeeVaultCaller_TotalProcessed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultCaller
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil || opts == nil {
			return
		}

		_BaseFeeVault.TotalProcessed(opts)
	})
}

func Fuzz_Nosy_BaseFeeVaultCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultCaller
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil || opts == nil {
			return
		}

		_BaseFeeVault.Version(opts)
	})
}

func Fuzz_Nosy_BaseFeeVaultCaller_WITHDRAWALNETWORK__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultCaller
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil || opts == nil {
			return
		}

		_BaseFeeVault.WITHDRAWALNETWORK(opts)
	})
}

// skipping Fuzz_Nosy_BaseFeeVaultCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_BaseFeeVaultCallerSession_MINWITHDRAWALAMOUNT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultCallerSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.MINWITHDRAWALAMOUNT()
	})
}

func Fuzz_Nosy_BaseFeeVaultCallerSession_RECIPIENT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultCallerSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.RECIPIENT()
	})
}

func Fuzz_Nosy_BaseFeeVaultCallerSession_TotalProcessed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultCallerSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.TotalProcessed()
	})
}

func Fuzz_Nosy_BaseFeeVaultCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultCallerSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.Version()
	})
}

func Fuzz_Nosy_BaseFeeVaultCallerSession_WITHDRAWALNETWORK__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultCallerSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.WITHDRAWALNETWORK()
	})
}

func Fuzz_Nosy_BaseFeeVaultFilterer_FilterWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultFilterer
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil || opts == nil {
			return
		}

		_BaseFeeVault.FilterWithdrawal(opts)
	})
}

func Fuzz_Nosy_BaseFeeVaultFilterer_FilterWithdrawal0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultFilterer
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil || opts == nil {
			return
		}

		_BaseFeeVault.FilterWithdrawal0(opts)
	})
}

func Fuzz_Nosy_BaseFeeVaultFilterer_ParseWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultFilterer
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.ParseWithdrawal(log)
	})
}

func Fuzz_Nosy_BaseFeeVaultFilterer_ParseWithdrawal0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultFilterer
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.ParseWithdrawal0(log)
	})
}

// skipping Fuzz_Nosy_BaseFeeVaultFilterer_WatchWithdrawal__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.BaseFeeVaultWithdrawal

// skipping Fuzz_Nosy_BaseFeeVaultFilterer_WatchWithdrawal0__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.BaseFeeVaultWithdrawal0

// skipping Fuzz_Nosy_BaseFeeVaultRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_BaseFeeVaultRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_BaseFeeVaultRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultRaw
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil || opts == nil {
			return
		}

		_BaseFeeVault.Transfer(opts)
	})
}

func Fuzz_Nosy_BaseFeeVaultSession_MINWITHDRAWALAMOUNT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.MINWITHDRAWALAMOUNT()
	})
}

func Fuzz_Nosy_BaseFeeVaultSession_RECIPIENT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.RECIPIENT()
	})
}

func Fuzz_Nosy_BaseFeeVaultSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.Receive()
	})
}

func Fuzz_Nosy_BaseFeeVaultSession_TotalProcessed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.TotalProcessed()
	})
}

func Fuzz_Nosy_BaseFeeVaultSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.Version()
	})
}

func Fuzz_Nosy_BaseFeeVaultSession_WITHDRAWALNETWORK__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.WITHDRAWALNETWORK()
	})
}

func Fuzz_Nosy_BaseFeeVaultSession_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.Withdraw()
	})
}

func Fuzz_Nosy_BaseFeeVaultTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultTransactor
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil || opts == nil {
			return
		}

		_BaseFeeVault.Receive(opts)
	})
}

func Fuzz_Nosy_BaseFeeVaultTransactor_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultTransactor
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil || opts == nil {
			return
		}

		_BaseFeeVault.Withdraw(opts)
	})
}

// skipping Fuzz_Nosy_BaseFeeVaultTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_BaseFeeVaultTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultTransactorRaw
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil || opts == nil {
			return
		}

		_BaseFeeVault.Transfer(opts)
	})
}

func Fuzz_Nosy_BaseFeeVaultTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultTransactorSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.Receive()
	})
}

func Fuzz_Nosy_BaseFeeVaultTransactorSession_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _BaseFeeVault *BaseFeeVaultTransactorSession
		fill_err = tp.Fill(&_BaseFeeVault)
		if fill_err != nil {
			return
		}
		if _BaseFeeVault == nil {
			return
		}

		_BaseFeeVault.Withdraw()
	})
}

func Fuzz_Nosy_BaseFeeVaultWithdrawal0Iterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *BaseFeeVaultWithdrawal0Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_BaseFeeVaultWithdrawal0Iterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *BaseFeeVaultWithdrawal0Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_BaseFeeVaultWithdrawal0Iterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *BaseFeeVaultWithdrawal0Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_BaseFeeVaultWithdrawalIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *BaseFeeVaultWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_BaseFeeVaultWithdrawalIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *BaseFeeVaultWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_BaseFeeVaultWithdrawalIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *BaseFeeVaultWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_Create2DeployerCaller_ComputeAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerCaller
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var salt [32]byte
		fill_err = tp.Fill(&salt)
		if fill_err != nil {
			return
		}
		var codeHash [32]byte
		fill_err = tp.Fill(&codeHash)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil || opts == nil {
			return
		}

		_Create2Deployer.ComputeAddress(opts, salt, codeHash)
	})
}

func Fuzz_Nosy_Create2DeployerCaller_ComputeAddressWithDeployer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerCaller
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var salt [32]byte
		fill_err = tp.Fill(&salt)
		if fill_err != nil {
			return
		}
		var codeHash [32]byte
		fill_err = tp.Fill(&codeHash)
		if fill_err != nil {
			return
		}
		var deployer common.Address
		fill_err = tp.Fill(&deployer)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil || opts == nil {
			return
		}

		_Create2Deployer.ComputeAddressWithDeployer(opts, salt, codeHash, deployer)
	})
}

// skipping Fuzz_Nosy_Create2DeployerCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_Create2DeployerCallerSession_ComputeAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerCallerSession
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var salt [32]byte
		fill_err = tp.Fill(&salt)
		if fill_err != nil {
			return
		}
		var codeHash [32]byte
		fill_err = tp.Fill(&codeHash)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil {
			return
		}

		_Create2Deployer.ComputeAddress(salt, codeHash)
	})
}

func Fuzz_Nosy_Create2DeployerCallerSession_ComputeAddressWithDeployer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerCallerSession
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var salt [32]byte
		fill_err = tp.Fill(&salt)
		if fill_err != nil {
			return
		}
		var codeHash [32]byte
		fill_err = tp.Fill(&codeHash)
		if fill_err != nil {
			return
		}
		var deployer common.Address
		fill_err = tp.Fill(&deployer)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil {
			return
		}

		_Create2Deployer.ComputeAddressWithDeployer(salt, codeHash, deployer)
	})
}

// skipping Fuzz_Nosy_Create2DeployerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_Create2DeployerRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_Create2DeployerRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerRaw
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil || opts == nil {
			return
		}

		_Create2Deployer.Transfer(opts)
	})
}

func Fuzz_Nosy_Create2DeployerSession_ComputeAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerSession
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var salt [32]byte
		fill_err = tp.Fill(&salt)
		if fill_err != nil {
			return
		}
		var codeHash [32]byte
		fill_err = tp.Fill(&codeHash)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil {
			return
		}

		_Create2Deployer.ComputeAddress(salt, codeHash)
	})
}

func Fuzz_Nosy_Create2DeployerSession_ComputeAddressWithDeployer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerSession
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var salt [32]byte
		fill_err = tp.Fill(&salt)
		if fill_err != nil {
			return
		}
		var codeHash [32]byte
		fill_err = tp.Fill(&codeHash)
		if fill_err != nil {
			return
		}
		var deployer common.Address
		fill_err = tp.Fill(&deployer)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil {
			return
		}

		_Create2Deployer.ComputeAddressWithDeployer(salt, codeHash, deployer)
	})
}

func Fuzz_Nosy_Create2DeployerSession_Deploy__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerSession
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var salt [32]byte
		fill_err = tp.Fill(&salt)
		if fill_err != nil {
			return
		}
		var code []byte
		fill_err = tp.Fill(&code)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil || value == nil {
			return
		}

		_Create2Deployer.Deploy(value, salt, code)
	})
}

func Fuzz_Nosy_Create2DeployerSession_DeployERC1820Implementer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerSession
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var salt [32]byte
		fill_err = tp.Fill(&salt)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil || value == nil {
			return
		}

		_Create2Deployer.DeployERC1820Implementer(value, salt)
	})
}

func Fuzz_Nosy_Create2DeployerSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerSession
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil {
			return
		}

		_Create2Deployer.Receive()
	})
}

func Fuzz_Nosy_Create2DeployerTransactor_Deploy__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerTransactor
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var salt [32]byte
		fill_err = tp.Fill(&salt)
		if fill_err != nil {
			return
		}
		var code []byte
		fill_err = tp.Fill(&code)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil || opts == nil || value == nil {
			return
		}

		_Create2Deployer.Deploy(opts, value, salt, code)
	})
}

func Fuzz_Nosy_Create2DeployerTransactor_DeployERC1820Implementer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerTransactor
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var salt [32]byte
		fill_err = tp.Fill(&salt)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil || opts == nil || value == nil {
			return
		}

		_Create2Deployer.DeployERC1820Implementer(opts, value, salt)
	})
}

func Fuzz_Nosy_Create2DeployerTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerTransactor
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil || opts == nil {
			return
		}

		_Create2Deployer.Receive(opts)
	})
}

// skipping Fuzz_Nosy_Create2DeployerTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_Create2DeployerTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerTransactorRaw
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil || opts == nil {
			return
		}

		_Create2Deployer.Transfer(opts)
	})
}

func Fuzz_Nosy_Create2DeployerTransactorSession_Deploy__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerTransactorSession
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var salt [32]byte
		fill_err = tp.Fill(&salt)
		if fill_err != nil {
			return
		}
		var code []byte
		fill_err = tp.Fill(&code)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil || value == nil {
			return
		}

		_Create2Deployer.Deploy(value, salt, code)
	})
}

func Fuzz_Nosy_Create2DeployerTransactorSession_DeployERC1820Implementer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerTransactorSession
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var salt [32]byte
		fill_err = tp.Fill(&salt)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil || value == nil {
			return
		}

		_Create2Deployer.DeployERC1820Implementer(value, salt)
	})
}

func Fuzz_Nosy_Create2DeployerTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Create2Deployer *Create2DeployerTransactorSession
		fill_err = tp.Fill(&_Create2Deployer)
		if fill_err != nil {
			return
		}
		if _Create2Deployer == nil {
			return
		}

		_Create2Deployer.Receive()
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_BaseGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.BaseGas(opts, _message, _minGasLimit)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_FailedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.FailedMessages(opts, arg0)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_MESSAGEVERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.MESSAGEVERSION(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_MINGASCALLDATAOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.MINGASCALLDATAOVERHEAD(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_MINGASDYNAMICOVERHEADDENOMINATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.MINGASDYNAMICOVERHEADDENOMINATOR(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_MINGASDYNAMICOVERHEADNUMERATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.MINGASDYNAMICOVERHEADNUMERATOR(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_MessageNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.MessageNonce(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_OTHERMESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.OTHERMESSENGER(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_OtherMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.OtherMessenger(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.Paused(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_RELAYCALLOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.RELAYCALLOVERHEAD(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_RELAYCONSTANTOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.RELAYCONSTANTOVERHEAD(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_RELAYGASCHECKBUFFER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.RELAYGASCHECKBUFFER(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_RELAYRESERVEDGAS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.RELAYRESERVEDGAS(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_SuccessfulMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.SuccessfulMessages(opts, arg0)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCaller_XDomainMessageSender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCaller
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.XDomainMessageSender(opts)
	})
}

// skipping Fuzz_Nosy_CrossDomainMessengerCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_BaseGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.BaseGas(_message, _minGasLimit)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_FailedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.FailedMessages(arg0)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_MESSAGEVERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.MESSAGEVERSION()
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_MINGASCALLDATAOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.MINGASCALLDATAOVERHEAD()
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_MINGASDYNAMICOVERHEADDENOMINATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.MINGASDYNAMICOVERHEADDENOMINATOR()
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_MINGASDYNAMICOVERHEADNUMERATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.MINGASDYNAMICOVERHEADNUMERATOR()
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_MessageNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.MessageNonce()
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_OTHERMESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.OTHERMESSENGER()
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_OtherMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.OtherMessenger()
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.Paused()
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_RELAYCALLOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.RELAYCALLOVERHEAD()
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_RELAYCONSTANTOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.RELAYCONSTANTOVERHEAD()
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_RELAYGASCHECKBUFFER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.RELAYGASCHECKBUFFER()
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_RELAYRESERVEDGAS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.RELAYRESERVEDGAS()
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_SuccessfulMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.SuccessfulMessages(arg0)
	})
}

func Fuzz_Nosy_CrossDomainMessengerCallerSession_XDomainMessageSender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.XDomainMessageSender()
	})
}

func Fuzz_Nosy_CrossDomainMessengerFailedRelayedMessageIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerFailedRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_CrossDomainMessengerFailedRelayedMessageIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerFailedRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_CrossDomainMessengerFailedRelayedMessageIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerFailedRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_CrossDomainMessengerFilterer_FilterFailedRelayedMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var msgHash [][32]byte
		fill_err = tp.Fill(&msgHash)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.FilterFailedRelayedMessage(opts, msgHash)
	})
}

func Fuzz_Nosy_CrossDomainMessengerFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerFilterer_FilterRelayedMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var msgHash [][32]byte
		fill_err = tp.Fill(&msgHash)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.FilterRelayedMessage(opts, msgHash)
	})
}

func Fuzz_Nosy_CrossDomainMessengerFilterer_FilterSentMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var t3 []common.Address
		fill_err = tp.Fill(&t3)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.FilterSentMessage(opts, t3)
	})
}

func Fuzz_Nosy_CrossDomainMessengerFilterer_FilterSentMessageExtension1__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var sender []common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.FilterSentMessageExtension1(opts, sender)
	})
}

func Fuzz_Nosy_CrossDomainMessengerFilterer_ParseFailedRelayedMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.ParseFailedRelayedMessage(log)
	})
}

func Fuzz_Nosy_CrossDomainMessengerFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.ParseInitialized(log)
	})
}

func Fuzz_Nosy_CrossDomainMessengerFilterer_ParseRelayedMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.ParseRelayedMessage(log)
	})
}

func Fuzz_Nosy_CrossDomainMessengerFilterer_ParseSentMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.ParseSentMessage(log)
	})
}

func Fuzz_Nosy_CrossDomainMessengerFilterer_ParseSentMessageExtension1__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.ParseSentMessageExtension1(log)
	})
}

// skipping Fuzz_Nosy_CrossDomainMessengerFilterer_WatchFailedRelayedMessage__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.CrossDomainMessengerFailedRelayedMessage

// skipping Fuzz_Nosy_CrossDomainMessengerFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.CrossDomainMessengerInitialized

// skipping Fuzz_Nosy_CrossDomainMessengerFilterer_WatchRelayedMessage__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.CrossDomainMessengerRelayedMessage

// skipping Fuzz_Nosy_CrossDomainMessengerFilterer_WatchSentMessage__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.CrossDomainMessengerSentMessage

// skipping Fuzz_Nosy_CrossDomainMessengerFilterer_WatchSentMessageExtension1__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.CrossDomainMessengerSentMessageExtension1

func Fuzz_Nosy_CrossDomainMessengerInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_CrossDomainMessengerInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_CrossDomainMessengerInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_CrossDomainMessengerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_CrossDomainMessengerRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_CrossDomainMessengerRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerRaw
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.Transfer(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerRelayedMessageIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_CrossDomainMessengerRelayedMessageIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_CrossDomainMessengerRelayedMessageIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSentMessageExtension1Iterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerSentMessageExtension1Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSentMessageExtension1Iterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerSentMessageExtension1Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSentMessageExtension1Iterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerSentMessageExtension1Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSentMessageIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerSentMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSentMessageIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerSentMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSentMessageIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *CrossDomainMessengerSentMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_BaseGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.BaseGas(_message, _minGasLimit)
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_FailedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.FailedMessages(arg0)
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_MESSAGEVERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.MESSAGEVERSION()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_MINGASCALLDATAOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.MINGASCALLDATAOVERHEAD()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_MINGASDYNAMICOVERHEADDENOMINATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.MINGASDYNAMICOVERHEADDENOMINATOR()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_MINGASDYNAMICOVERHEADNUMERATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.MINGASDYNAMICOVERHEADNUMERATOR()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_MessageNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.MessageNonce()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_OTHERMESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.OTHERMESSENGER()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_OtherMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.OtherMessenger()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.Paused()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_RELAYCALLOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.RELAYCALLOVERHEAD()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_RELAYCONSTANTOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.RELAYCONSTANTOVERHEAD()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_RELAYGASCHECKBUFFER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.RELAYGASCHECKBUFFER()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_RELAYRESERVEDGAS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.RELAYRESERVEDGAS()
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_RelayMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		var _sender common.Address
		fill_err = tp.Fill(&_sender)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _minGasLimit *big.Int
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || _nonce == nil || _value == nil || _minGasLimit == nil {
			return
		}

		_CrossDomainMessenger.RelayMessage(_nonce, _sender, _target, _value, _minGasLimit, _message)
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_SendMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.SendMessage(_target, _message, _minGasLimit)
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_SuccessfulMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.SuccessfulMessages(arg0)
	})
}

func Fuzz_Nosy_CrossDomainMessengerSession_XDomainMessageSender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.XDomainMessageSender()
	})
}

func Fuzz_Nosy_CrossDomainMessengerTransactor_RelayMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerTransactor
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		var _sender common.Address
		fill_err = tp.Fill(&_sender)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _minGasLimit *big.Int
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil || _nonce == nil || _value == nil || _minGasLimit == nil {
			return
		}

		_CrossDomainMessenger.RelayMessage(opts, _nonce, _sender, _target, _value, _minGasLimit, _message)
	})
}

func Fuzz_Nosy_CrossDomainMessengerTransactor_SendMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerTransactor
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.SendMessage(opts, _target, _message, _minGasLimit)
	})
}

// skipping Fuzz_Nosy_CrossDomainMessengerTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_CrossDomainMessengerTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerTransactorRaw
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || opts == nil {
			return
		}

		_CrossDomainMessenger.Transfer(opts)
	})
}

func Fuzz_Nosy_CrossDomainMessengerTransactorSession_RelayMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerTransactorSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		var _sender common.Address
		fill_err = tp.Fill(&_sender)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _minGasLimit *big.Int
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil || _nonce == nil || _value == nil || _minGasLimit == nil {
			return
		}

		_CrossDomainMessenger.RelayMessage(_nonce, _sender, _target, _value, _minGasLimit, _message)
	})
}

func Fuzz_Nosy_CrossDomainMessengerTransactorSession_SendMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _CrossDomainMessenger *CrossDomainMessengerTransactorSession
		fill_err = tp.Fill(&_CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _CrossDomainMessenger == nil {
			return
		}

		_CrossDomainMessenger.SendMessage(_target, _message, _minGasLimit)
	})
}

func Fuzz_Nosy_DelayedWETHApprovalIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DelayedWETHApprovalIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DelayedWETHApprovalIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_DelayedWETHCaller_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCaller
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Allowance(opts, arg0, arg1)
	})
}

func Fuzz_Nosy_DelayedWETHCaller_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCaller
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.BalanceOf(opts, arg0)
	})
}

func Fuzz_Nosy_DelayedWETHCaller_Config__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCaller
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Config(opts)
	})
}

func Fuzz_Nosy_DelayedWETHCaller_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCaller
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Decimals(opts)
	})
}

func Fuzz_Nosy_DelayedWETHCaller_Delay__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCaller
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Delay(opts)
	})
}

func Fuzz_Nosy_DelayedWETHCaller_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCaller
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Name(opts)
	})
}

func Fuzz_Nosy_DelayedWETHCaller_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCaller
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Owner(opts)
	})
}

func Fuzz_Nosy_DelayedWETHCaller_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCaller
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Symbol(opts)
	})
}

func Fuzz_Nosy_DelayedWETHCaller_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCaller
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.TotalSupply(opts)
	})
}

func Fuzz_Nosy_DelayedWETHCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCaller
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Version(opts)
	})
}

func Fuzz_Nosy_DelayedWETHCaller_Withdrawals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCaller
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Withdrawals(opts, arg0, arg1)
	})
}

// skipping Fuzz_Nosy_DelayedWETHCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_DelayedWETHCallerSession_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCallerSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Allowance(arg0, arg1)
	})
}

func Fuzz_Nosy_DelayedWETHCallerSession_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCallerSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.BalanceOf(arg0)
	})
}

func Fuzz_Nosy_DelayedWETHCallerSession_Config__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCallerSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Config()
	})
}

func Fuzz_Nosy_DelayedWETHCallerSession_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCallerSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Decimals()
	})
}

func Fuzz_Nosy_DelayedWETHCallerSession_Delay__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCallerSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Delay()
	})
}

func Fuzz_Nosy_DelayedWETHCallerSession_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCallerSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Name()
	})
}

func Fuzz_Nosy_DelayedWETHCallerSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCallerSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Owner()
	})
}

func Fuzz_Nosy_DelayedWETHCallerSession_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCallerSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Symbol()
	})
}

func Fuzz_Nosy_DelayedWETHCallerSession_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCallerSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.TotalSupply()
	})
}

func Fuzz_Nosy_DelayedWETHCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCallerSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Version()
	})
}

func Fuzz_Nosy_DelayedWETHCallerSession_Withdrawals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHCallerSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Withdrawals(arg0, arg1)
	})
}

func Fuzz_Nosy_DelayedWETHDepositIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHDepositIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DelayedWETHDepositIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHDepositIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DelayedWETHDepositIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHDepositIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_FilterApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var src []common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var guy []common.Address
		fill_err = tp.Fill(&guy)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.FilterApproval(opts, src, guy)
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_FilterDeposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var dst []common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.FilterDeposit(opts, dst)
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_FilterOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var previousOwner []common.Address
		fill_err = tp.Fill(&previousOwner)
		if fill_err != nil {
			return
		}
		var newOwner []common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.FilterOwnershipTransferred(opts, previousOwner, newOwner)
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_FilterTransfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var src []common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var dst []common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.FilterTransfer(opts, src, dst)
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_FilterUnwrap__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var src []common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.FilterUnwrap(opts, src)
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_FilterWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var src []common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.FilterWithdrawal(opts, src)
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_ParseApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.ParseApproval(log)
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_ParseDeposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.ParseDeposit(log)
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.ParseInitialized(log)
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_ParseOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.ParseOwnershipTransferred(log)
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_ParseTransfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.ParseTransfer(log)
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_ParseUnwrap__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.ParseUnwrap(log)
	})
}

func Fuzz_Nosy_DelayedWETHFilterer_ParseWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHFilterer
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.ParseWithdrawal(log)
	})
}

// skipping Fuzz_Nosy_DelayedWETHFilterer_WatchApproval__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DelayedWETHApproval

// skipping Fuzz_Nosy_DelayedWETHFilterer_WatchDeposit__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DelayedWETHDeposit

// skipping Fuzz_Nosy_DelayedWETHFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DelayedWETHInitialized

// skipping Fuzz_Nosy_DelayedWETHFilterer_WatchOwnershipTransferred__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DelayedWETHOwnershipTransferred

// skipping Fuzz_Nosy_DelayedWETHFilterer_WatchTransfer__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DelayedWETHTransfer

// skipping Fuzz_Nosy_DelayedWETHFilterer_WatchUnwrap__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DelayedWETHUnwrap

// skipping Fuzz_Nosy_DelayedWETHFilterer_WatchWithdrawal__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DelayedWETHWithdrawal

func Fuzz_Nosy_DelayedWETHInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DelayedWETHInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DelayedWETHInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_DelayedWETHOwnershipTransferredIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DelayedWETHOwnershipTransferredIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DelayedWETHOwnershipTransferredIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_DelayedWETHRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_DelayedWETHRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_DelayedWETHRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHRaw
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Transfer(opts)
	})
}

func Fuzz_Nosy_DelayedWETHSession_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Allowance(arg0, arg1)
	})
}

func Fuzz_Nosy_DelayedWETHSession_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var guy common.Address
		fill_err = tp.Fill(&guy)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || wad == nil {
			return
		}

		_DelayedWETH.Approve(guy, wad)
	})
}

func Fuzz_Nosy_DelayedWETHSession_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.BalanceOf(arg0)
	})
}

func Fuzz_Nosy_DelayedWETHSession_Config__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Config()
	})
}

func Fuzz_Nosy_DelayedWETHSession_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Decimals()
	})
}

func Fuzz_Nosy_DelayedWETHSession_Delay__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Delay()
	})
}

func Fuzz_Nosy_DelayedWETHSession_Deposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Deposit()
	})
}

func Fuzz_Nosy_DelayedWETHSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Fallback(calldata)
	})
}

func Fuzz_Nosy_DelayedWETHSession_Hold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var _guy common.Address
		fill_err = tp.Fill(&_guy)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || _wad == nil {
			return
		}

		_DelayedWETH.Hold(_guy, _wad)
	})
}

func Fuzz_Nosy_DelayedWETHSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		var _config common.Address
		fill_err = tp.Fill(&_config)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Initialize(_owner, _config)
	})
}

func Fuzz_Nosy_DelayedWETHSession_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Name()
	})
}

func Fuzz_Nosy_DelayedWETHSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Owner()
	})
}

func Fuzz_Nosy_DelayedWETHSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Receive()
	})
}

func Fuzz_Nosy_DelayedWETHSession_Recover__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || _wad == nil {
			return
		}

		_DelayedWETH.Recover(_wad)
	})
}

func Fuzz_Nosy_DelayedWETHSession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.RenounceOwnership()
	})
}

func Fuzz_Nosy_DelayedWETHSession_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Symbol()
	})
}

func Fuzz_Nosy_DelayedWETHSession_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.TotalSupply()
	})
}

func Fuzz_Nosy_DelayedWETHSession_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || wad == nil {
			return
		}

		_DelayedWETH.Transfer(dst, wad)
	})
}

func Fuzz_Nosy_DelayedWETHSession_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var src common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || wad == nil {
			return
		}

		_DelayedWETH.TransferFrom(src, dst, wad)
	})
}

func Fuzz_Nosy_DelayedWETHSession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_DelayedWETHSession_Unlock__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var _guy common.Address
		fill_err = tp.Fill(&_guy)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || _wad == nil {
			return
		}

		_DelayedWETH.Unlock(_guy, _wad)
	})
}

func Fuzz_Nosy_DelayedWETHSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Version()
	})
}

func Fuzz_Nosy_DelayedWETHSession_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || _wad == nil {
			return
		}

		_DelayedWETH.Withdraw(_wad)
	})
}

func Fuzz_Nosy_DelayedWETHSession_Withdraw0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var _guy common.Address
		fill_err = tp.Fill(&_guy)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || _wad == nil {
			return
		}

		_DelayedWETH.Withdraw0(_guy, _wad)
	})
}

func Fuzz_Nosy_DelayedWETHSession_Withdrawals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Withdrawals(arg0, arg1)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var guy common.Address
		fill_err = tp.Fill(&guy)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil || wad == nil {
			return
		}

		_DelayedWETH.Approve(opts, guy, wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_Deposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Deposit(opts)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Fallback(opts, calldata)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_Hold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _guy common.Address
		fill_err = tp.Fill(&_guy)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil || _wad == nil {
			return
		}

		_DelayedWETH.Hold(opts, _guy, _wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		var _config common.Address
		fill_err = tp.Fill(&_config)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Initialize(opts, _owner, _config)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Receive(opts)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_Recover__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil || _wad == nil {
			return
		}

		_DelayedWETH.Recover(opts, _wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.RenounceOwnership(opts)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil || wad == nil {
			return
		}

		_DelayedWETH.Transfer(opts, dst, wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var src common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil || wad == nil {
			return
		}

		_DelayedWETH.TransferFrom(opts, src, dst, wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.TransferOwnership(opts, newOwner)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_Unlock__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _guy common.Address
		fill_err = tp.Fill(&_guy)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil || _wad == nil {
			return
		}

		_DelayedWETH.Unlock(opts, _guy, _wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil || _wad == nil {
			return
		}

		_DelayedWETH.Withdraw(opts, _wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactor_Withdraw0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactor
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _guy common.Address
		fill_err = tp.Fill(&_guy)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil || _wad == nil {
			return
		}

		_DelayedWETH.Withdraw0(opts, _guy, _wad)
	})
}

// skipping Fuzz_Nosy_DelayedWETHTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_DelayedWETHTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorRaw
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || opts == nil {
			return
		}

		_DelayedWETH.Transfer(opts)
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var guy common.Address
		fill_err = tp.Fill(&guy)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || wad == nil {
			return
		}

		_DelayedWETH.Approve(guy, wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_Deposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Deposit()
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Fallback(calldata)
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_Hold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var _guy common.Address
		fill_err = tp.Fill(&_guy)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || _wad == nil {
			return
		}

		_DelayedWETH.Hold(_guy, _wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		var _config common.Address
		fill_err = tp.Fill(&_config)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Initialize(_owner, _config)
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.Receive()
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_Recover__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || _wad == nil {
			return
		}

		_DelayedWETH.Recover(_wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.RenounceOwnership()
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || wad == nil {
			return
		}

		_DelayedWETH.Transfer(dst, wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var src common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || wad == nil {
			return
		}

		_DelayedWETH.TransferFrom(src, dst, wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil {
			return
		}

		_DelayedWETH.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_Unlock__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var _guy common.Address
		fill_err = tp.Fill(&_guy)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || _wad == nil {
			return
		}

		_DelayedWETH.Unlock(_guy, _wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || _wad == nil {
			return
		}

		_DelayedWETH.Withdraw(_wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransactorSession_Withdraw0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DelayedWETH *DelayedWETHTransactorSession
		fill_err = tp.Fill(&_DelayedWETH)
		if fill_err != nil {
			return
		}
		var _guy common.Address
		fill_err = tp.Fill(&_guy)
		if fill_err != nil {
			return
		}
		var _wad *big.Int
		fill_err = tp.Fill(&_wad)
		if fill_err != nil {
			return
		}
		if _DelayedWETH == nil || _wad == nil {
			return
		}

		_DelayedWETH.Withdraw0(_guy, _wad)
	})
}

func Fuzz_Nosy_DelayedWETHTransferIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHTransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DelayedWETHTransferIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHTransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DelayedWETHTransferIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHTransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_DelayedWETHUnwrapIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHUnwrapIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DelayedWETHUnwrapIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHUnwrapIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DelayedWETHUnwrapIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHUnwrapIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_DelayedWETHWithdrawalIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DelayedWETHWithdrawalIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DelayedWETHWithdrawalIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DelayedWETHWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_DeployerWhitelistCaller_IsDeployerAllowed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistCaller
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _deployer common.Address
		fill_err = tp.Fill(&_deployer)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil || opts == nil {
			return
		}

		_DeployerWhitelist.IsDeployerAllowed(opts, _deployer)
	})
}

func Fuzz_Nosy_DeployerWhitelistCaller_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistCaller
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil || opts == nil {
			return
		}

		_DeployerWhitelist.Owner(opts)
	})
}

func Fuzz_Nosy_DeployerWhitelistCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistCaller
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil || opts == nil {
			return
		}

		_DeployerWhitelist.Version(opts)
	})
}

func Fuzz_Nosy_DeployerWhitelistCaller_Whitelist__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistCaller
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil || opts == nil {
			return
		}

		_DeployerWhitelist.Whitelist(opts, arg0)
	})
}

// skipping Fuzz_Nosy_DeployerWhitelistCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_DeployerWhitelistCallerSession_IsDeployerAllowed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistCallerSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var _deployer common.Address
		fill_err = tp.Fill(&_deployer)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.IsDeployerAllowed(_deployer)
	})
}

func Fuzz_Nosy_DeployerWhitelistCallerSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistCallerSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.Owner()
	})
}

func Fuzz_Nosy_DeployerWhitelistCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistCallerSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.Version()
	})
}

func Fuzz_Nosy_DeployerWhitelistCallerSession_Whitelist__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistCallerSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.Whitelist(arg0)
	})
}

func Fuzz_Nosy_DeployerWhitelistFilterer_FilterOwnerChanged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistFilterer
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil || opts == nil {
			return
		}

		_DeployerWhitelist.FilterOwnerChanged(opts)
	})
}

func Fuzz_Nosy_DeployerWhitelistFilterer_FilterWhitelistDisabled__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistFilterer
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil || opts == nil {
			return
		}

		_DeployerWhitelist.FilterWhitelistDisabled(opts)
	})
}

func Fuzz_Nosy_DeployerWhitelistFilterer_FilterWhitelistStatusChanged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistFilterer
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil || opts == nil {
			return
		}

		_DeployerWhitelist.FilterWhitelistStatusChanged(opts)
	})
}

func Fuzz_Nosy_DeployerWhitelistFilterer_ParseOwnerChanged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistFilterer
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.ParseOwnerChanged(log)
	})
}

func Fuzz_Nosy_DeployerWhitelistFilterer_ParseWhitelistDisabled__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistFilterer
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.ParseWhitelistDisabled(log)
	})
}

func Fuzz_Nosy_DeployerWhitelistFilterer_ParseWhitelistStatusChanged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistFilterer
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.ParseWhitelistStatusChanged(log)
	})
}

// skipping Fuzz_Nosy_DeployerWhitelistFilterer_WatchOwnerChanged__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DeployerWhitelistOwnerChanged

// skipping Fuzz_Nosy_DeployerWhitelistFilterer_WatchWhitelistDisabled__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DeployerWhitelistWhitelistDisabled

// skipping Fuzz_Nosy_DeployerWhitelistFilterer_WatchWhitelistStatusChanged__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DeployerWhitelistWhitelistStatusChanged

func Fuzz_Nosy_DeployerWhitelistOwnerChangedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DeployerWhitelistOwnerChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DeployerWhitelistOwnerChangedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DeployerWhitelistOwnerChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DeployerWhitelistOwnerChangedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DeployerWhitelistOwnerChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_DeployerWhitelistRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_DeployerWhitelistRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_DeployerWhitelistRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistRaw
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil || opts == nil {
			return
		}

		_DeployerWhitelist.Transfer(opts)
	})
}

func Fuzz_Nosy_DeployerWhitelistSession_EnableArbitraryContractDeployment__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.EnableArbitraryContractDeployment()
	})
}

func Fuzz_Nosy_DeployerWhitelistSession_IsDeployerAllowed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var _deployer common.Address
		fill_err = tp.Fill(&_deployer)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.IsDeployerAllowed(_deployer)
	})
}

func Fuzz_Nosy_DeployerWhitelistSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.Owner()
	})
}

func Fuzz_Nosy_DeployerWhitelistSession_SetOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.SetOwner(_owner)
	})
}

func Fuzz_Nosy_DeployerWhitelistSession_SetWhitelistedDeployer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var _deployer common.Address
		fill_err = tp.Fill(&_deployer)
		if fill_err != nil {
			return
		}
		var _isWhitelisted bool
		fill_err = tp.Fill(&_isWhitelisted)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.SetWhitelistedDeployer(_deployer, _isWhitelisted)
	})
}

func Fuzz_Nosy_DeployerWhitelistSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.Version()
	})
}

func Fuzz_Nosy_DeployerWhitelistSession_Whitelist__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.Whitelist(arg0)
	})
}

func Fuzz_Nosy_DeployerWhitelistTransactor_EnableArbitraryContractDeployment__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistTransactor
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil || opts == nil {
			return
		}

		_DeployerWhitelist.EnableArbitraryContractDeployment(opts)
	})
}

func Fuzz_Nosy_DeployerWhitelistTransactor_SetOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistTransactor
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil || opts == nil {
			return
		}

		_DeployerWhitelist.SetOwner(opts, _owner)
	})
}

func Fuzz_Nosy_DeployerWhitelistTransactor_SetWhitelistedDeployer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistTransactor
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _deployer common.Address
		fill_err = tp.Fill(&_deployer)
		if fill_err != nil {
			return
		}
		var _isWhitelisted bool
		fill_err = tp.Fill(&_isWhitelisted)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil || opts == nil {
			return
		}

		_DeployerWhitelist.SetWhitelistedDeployer(opts, _deployer, _isWhitelisted)
	})
}

// skipping Fuzz_Nosy_DeployerWhitelistTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_DeployerWhitelistTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistTransactorRaw
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil || opts == nil {
			return
		}

		_DeployerWhitelist.Transfer(opts)
	})
}

func Fuzz_Nosy_DeployerWhitelistTransactorSession_EnableArbitraryContractDeployment__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistTransactorSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.EnableArbitraryContractDeployment()
	})
}

func Fuzz_Nosy_DeployerWhitelistTransactorSession_SetOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistTransactorSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.SetOwner(_owner)
	})
}

func Fuzz_Nosy_DeployerWhitelistTransactorSession_SetWhitelistedDeployer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeployerWhitelist *DeployerWhitelistTransactorSession
		fill_err = tp.Fill(&_DeployerWhitelist)
		if fill_err != nil {
			return
		}
		var _deployer common.Address
		fill_err = tp.Fill(&_deployer)
		if fill_err != nil {
			return
		}
		var _isWhitelisted bool
		fill_err = tp.Fill(&_isWhitelisted)
		if fill_err != nil {
			return
		}
		if _DeployerWhitelist == nil {
			return
		}

		_DeployerWhitelist.SetWhitelistedDeployer(_deployer, _isWhitelisted)
	})
}

func Fuzz_Nosy_DeployerWhitelistWhitelistDisabledIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DeployerWhitelistWhitelistDisabledIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DeployerWhitelistWhitelistDisabledIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DeployerWhitelistWhitelistDisabledIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DeployerWhitelistWhitelistDisabledIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DeployerWhitelistWhitelistDisabledIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_DeployerWhitelistWhitelistStatusChangedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DeployerWhitelistWhitelistStatusChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DeployerWhitelistWhitelistStatusChangedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DeployerWhitelistWhitelistStatusChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DeployerWhitelistWhitelistStatusChangedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DeployerWhitelistWhitelistStatusChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_DeterministicDeploymentProxyCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_DeterministicDeploymentProxyRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_DeterministicDeploymentProxyRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_DeterministicDeploymentProxyRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeterministicDeploymentProxy *DeterministicDeploymentProxyRaw
		fill_err = tp.Fill(&_DeterministicDeploymentProxy)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DeterministicDeploymentProxy == nil || opts == nil {
			return
		}

		_DeterministicDeploymentProxy.Transfer(opts)
	})
}

func Fuzz_Nosy_DeterministicDeploymentProxySession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeterministicDeploymentProxy *DeterministicDeploymentProxySession
		fill_err = tp.Fill(&_DeterministicDeploymentProxy)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _DeterministicDeploymentProxy == nil {
			return
		}

		_DeterministicDeploymentProxy.Fallback(calldata)
	})
}

func Fuzz_Nosy_DeterministicDeploymentProxyTransactor_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeterministicDeploymentProxy *DeterministicDeploymentProxyTransactor
		fill_err = tp.Fill(&_DeterministicDeploymentProxy)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _DeterministicDeploymentProxy == nil || opts == nil {
			return
		}

		_DeterministicDeploymentProxy.Fallback(opts, calldata)
	})
}

// skipping Fuzz_Nosy_DeterministicDeploymentProxyTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_DeterministicDeploymentProxyTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeterministicDeploymentProxy *DeterministicDeploymentProxyTransactorRaw
		fill_err = tp.Fill(&_DeterministicDeploymentProxy)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DeterministicDeploymentProxy == nil || opts == nil {
			return
		}

		_DeterministicDeploymentProxy.Transfer(opts)
	})
}

func Fuzz_Nosy_DeterministicDeploymentProxyTransactorSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DeterministicDeploymentProxy *DeterministicDeploymentProxyTransactorSession
		fill_err = tp.Fill(&_DeterministicDeploymentProxy)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _DeterministicDeploymentProxy == nil {
			return
		}

		_DeterministicDeploymentProxy.Fallback(calldata)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCaller_FindLatestGames__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCaller
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _start *big.Int
		fill_err = tp.Fill(&_start)
		if fill_err != nil {
			return
		}
		var _n *big.Int
		fill_err = tp.Fill(&_n)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil || _start == nil || _n == nil {
			return
		}

		_DisputeGameFactory.FindLatestGames(opts, _gameType, _start, _n)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCaller_GameAtIndex__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCaller
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _index *big.Int
		fill_err = tp.Fill(&_index)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil || _index == nil {
			return
		}

		_DisputeGameFactory.GameAtIndex(opts, _index)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCaller_GameCount__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCaller
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.GameCount(opts)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCaller_GameImpls__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCaller
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 uint32
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.GameImpls(opts, arg0)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCaller_Games__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCaller
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _rootClaim [32]byte
		fill_err = tp.Fill(&_rootClaim)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.Games(opts, _gameType, _rootClaim, _extraData)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCaller_GetGameUUID__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCaller
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _rootClaim [32]byte
		fill_err = tp.Fill(&_rootClaim)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.GetGameUUID(opts, _gameType, _rootClaim, _extraData)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCaller_InitBonds__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCaller
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 uint32
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.InitBonds(opts, arg0)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCaller_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCaller
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.Owner(opts)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCaller
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.Version(opts)
	})
}

// skipping Fuzz_Nosy_DisputeGameFactoryCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_DisputeGameFactoryCallerSession_FindLatestGames__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCallerSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _start *big.Int
		fill_err = tp.Fill(&_start)
		if fill_err != nil {
			return
		}
		var _n *big.Int
		fill_err = tp.Fill(&_n)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || _start == nil || _n == nil {
			return
		}

		_DisputeGameFactory.FindLatestGames(_gameType, _start, _n)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCallerSession_GameAtIndex__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCallerSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _index *big.Int
		fill_err = tp.Fill(&_index)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || _index == nil {
			return
		}

		_DisputeGameFactory.GameAtIndex(_index)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCallerSession_GameCount__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCallerSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.GameCount()
	})
}

func Fuzz_Nosy_DisputeGameFactoryCallerSession_GameImpls__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCallerSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var arg0 uint32
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.GameImpls(arg0)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCallerSession_Games__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCallerSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _rootClaim [32]byte
		fill_err = tp.Fill(&_rootClaim)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.Games(_gameType, _rootClaim, _extraData)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCallerSession_GetGameUUID__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCallerSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _rootClaim [32]byte
		fill_err = tp.Fill(&_rootClaim)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.GetGameUUID(_gameType, _rootClaim, _extraData)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCallerSession_InitBonds__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCallerSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var arg0 uint32
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.InitBonds(arg0)
	})
}

func Fuzz_Nosy_DisputeGameFactoryCallerSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCallerSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.Owner()
	})
}

func Fuzz_Nosy_DisputeGameFactoryCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryCallerSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.Version()
	})
}

func Fuzz_Nosy_DisputeGameFactoryDisputeGameCreatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryDisputeGameCreatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DisputeGameFactoryDisputeGameCreatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryDisputeGameCreatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DisputeGameFactoryDisputeGameCreatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryDisputeGameCreatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_DisputeGameFactoryFilterer_FilterDisputeGameCreated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryFilterer
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var disputeProxy []common.Address
		fill_err = tp.Fill(&disputeProxy)
		if fill_err != nil {
			return
		}
		var gameType []uint32
		fill_err = tp.Fill(&gameType)
		if fill_err != nil {
			return
		}
		var rootClaim [][32]byte
		fill_err = tp.Fill(&rootClaim)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.FilterDisputeGameCreated(opts, disputeProxy, gameType, rootClaim)
	})
}

func Fuzz_Nosy_DisputeGameFactoryFilterer_FilterImplementationSet__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryFilterer
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var impl []common.Address
		fill_err = tp.Fill(&impl)
		if fill_err != nil {
			return
		}
		var gameType []uint32
		fill_err = tp.Fill(&gameType)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.FilterImplementationSet(opts, impl, gameType)
	})
}

func Fuzz_Nosy_DisputeGameFactoryFilterer_FilterInitBondUpdated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryFilterer
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var gameType []uint32
		fill_err = tp.Fill(&gameType)
		if fill_err != nil {
			return
		}
		var newBond []*big.Int
		fill_err = tp.Fill(&newBond)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.FilterInitBondUpdated(opts, gameType, newBond)
	})
}

func Fuzz_Nosy_DisputeGameFactoryFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryFilterer
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_DisputeGameFactoryFilterer_FilterOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryFilterer
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var previousOwner []common.Address
		fill_err = tp.Fill(&previousOwner)
		if fill_err != nil {
			return
		}
		var newOwner []common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.FilterOwnershipTransferred(opts, previousOwner, newOwner)
	})
}

func Fuzz_Nosy_DisputeGameFactoryFilterer_ParseDisputeGameCreated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryFilterer
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.ParseDisputeGameCreated(log)
	})
}

func Fuzz_Nosy_DisputeGameFactoryFilterer_ParseImplementationSet__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryFilterer
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.ParseImplementationSet(log)
	})
}

func Fuzz_Nosy_DisputeGameFactoryFilterer_ParseInitBondUpdated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryFilterer
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.ParseInitBondUpdated(log)
	})
}

func Fuzz_Nosy_DisputeGameFactoryFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryFilterer
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.ParseInitialized(log)
	})
}

func Fuzz_Nosy_DisputeGameFactoryFilterer_ParseOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryFilterer
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.ParseOwnershipTransferred(log)
	})
}

// skipping Fuzz_Nosy_DisputeGameFactoryFilterer_WatchDisputeGameCreated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DisputeGameFactoryDisputeGameCreated

// skipping Fuzz_Nosy_DisputeGameFactoryFilterer_WatchImplementationSet__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DisputeGameFactoryImplementationSet

// skipping Fuzz_Nosy_DisputeGameFactoryFilterer_WatchInitBondUpdated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DisputeGameFactoryInitBondUpdated

// skipping Fuzz_Nosy_DisputeGameFactoryFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DisputeGameFactoryInitialized

// skipping Fuzz_Nosy_DisputeGameFactoryFilterer_WatchOwnershipTransferred__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.DisputeGameFactoryOwnershipTransferred

func Fuzz_Nosy_DisputeGameFactoryImplementationSetIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryImplementationSetIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DisputeGameFactoryImplementationSetIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryImplementationSetIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DisputeGameFactoryImplementationSetIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryImplementationSetIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_DisputeGameFactoryInitBondUpdatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryInitBondUpdatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DisputeGameFactoryInitBondUpdatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryInitBondUpdatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DisputeGameFactoryInitBondUpdatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryInitBondUpdatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_DisputeGameFactoryInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DisputeGameFactoryInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DisputeGameFactoryInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_DisputeGameFactoryOwnershipTransferredIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_DisputeGameFactoryOwnershipTransferredIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_DisputeGameFactoryOwnershipTransferredIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *DisputeGameFactoryOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_DisputeGameFactoryRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_DisputeGameFactoryRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_DisputeGameFactoryRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryRaw
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.Transfer(opts)
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_Create__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _rootClaim [32]byte
		fill_err = tp.Fill(&_rootClaim)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.Create(_gameType, _rootClaim, _extraData)
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_FindLatestGames__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _start *big.Int
		fill_err = tp.Fill(&_start)
		if fill_err != nil {
			return
		}
		var _n *big.Int
		fill_err = tp.Fill(&_n)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || _start == nil || _n == nil {
			return
		}

		_DisputeGameFactory.FindLatestGames(_gameType, _start, _n)
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_GameAtIndex__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _index *big.Int
		fill_err = tp.Fill(&_index)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || _index == nil {
			return
		}

		_DisputeGameFactory.GameAtIndex(_index)
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_GameCount__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.GameCount()
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_GameImpls__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var arg0 uint32
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.GameImpls(arg0)
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_Games__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _rootClaim [32]byte
		fill_err = tp.Fill(&_rootClaim)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.Games(_gameType, _rootClaim, _extraData)
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_GetGameUUID__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _rootClaim [32]byte
		fill_err = tp.Fill(&_rootClaim)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.GetGameUUID(_gameType, _rootClaim, _extraData)
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_InitBonds__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var arg0 uint32
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.InitBonds(arg0)
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.Initialize(_owner)
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.Owner()
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.RenounceOwnership()
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_SetImplementation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _impl common.Address
		fill_err = tp.Fill(&_impl)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.SetImplementation(_gameType, _impl)
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_SetInitBond__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _initBond *big.Int
		fill_err = tp.Fill(&_initBond)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || _initBond == nil {
			return
		}

		_DisputeGameFactory.SetInitBond(_gameType, _initBond)
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_DisputeGameFactorySession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactorySession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.Version()
	})
}

func Fuzz_Nosy_DisputeGameFactoryTransactor_Create__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryTransactor
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _rootClaim [32]byte
		fill_err = tp.Fill(&_rootClaim)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.Create(opts, _gameType, _rootClaim, _extraData)
	})
}

func Fuzz_Nosy_DisputeGameFactoryTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryTransactor
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.Initialize(opts, _owner)
	})
}

func Fuzz_Nosy_DisputeGameFactoryTransactor_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryTransactor
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.RenounceOwnership(opts)
	})
}

func Fuzz_Nosy_DisputeGameFactoryTransactor_SetImplementation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryTransactor
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _impl common.Address
		fill_err = tp.Fill(&_impl)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.SetImplementation(opts, _gameType, _impl)
	})
}

func Fuzz_Nosy_DisputeGameFactoryTransactor_SetInitBond__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryTransactor
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _initBond *big.Int
		fill_err = tp.Fill(&_initBond)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil || _initBond == nil {
			return
		}

		_DisputeGameFactory.SetInitBond(opts, _gameType, _initBond)
	})
}

func Fuzz_Nosy_DisputeGameFactoryTransactor_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryTransactor
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.TransferOwnership(opts, newOwner)
	})
}

// skipping Fuzz_Nosy_DisputeGameFactoryTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_DisputeGameFactoryTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryTransactorRaw
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || opts == nil {
			return
		}

		_DisputeGameFactory.Transfer(opts)
	})
}

func Fuzz_Nosy_DisputeGameFactoryTransactorSession_Create__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryTransactorSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _rootClaim [32]byte
		fill_err = tp.Fill(&_rootClaim)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.Create(_gameType, _rootClaim, _extraData)
	})
}

func Fuzz_Nosy_DisputeGameFactoryTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryTransactorSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.Initialize(_owner)
	})
}

func Fuzz_Nosy_DisputeGameFactoryTransactorSession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryTransactorSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.RenounceOwnership()
	})
}

func Fuzz_Nosy_DisputeGameFactoryTransactorSession_SetImplementation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryTransactorSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _impl common.Address
		fill_err = tp.Fill(&_impl)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.SetImplementation(_gameType, _impl)
	})
}

func Fuzz_Nosy_DisputeGameFactoryTransactorSession_SetInitBond__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryTransactorSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var _gameType uint32
		fill_err = tp.Fill(&_gameType)
		if fill_err != nil {
			return
		}
		var _initBond *big.Int
		fill_err = tp.Fill(&_initBond)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil || _initBond == nil {
			return
		}

		_DisputeGameFactory.SetInitBond(_gameType, _initBond)
	})
}

func Fuzz_Nosy_DisputeGameFactoryTransactorSession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _DisputeGameFactory *DisputeGameFactoryTransactorSession
		fill_err = tp.Fill(&_DisputeGameFactory)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _DisputeGameFactory == nil {
			return
		}

		_DisputeGameFactory.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_EASAttestedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASAttestedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EASAttestedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASAttestedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EASAttestedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASAttestedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EASCaller_GetAttestTypeHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCaller
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.GetAttestTypeHash(opts)
	})
}

func Fuzz_Nosy_EASCaller_GetAttestation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCaller
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var uid [32]byte
		fill_err = tp.Fill(&uid)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.GetAttestation(opts, uid)
	})
}

func Fuzz_Nosy_EASCaller_GetDomainSeparator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCaller
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.GetDomainSeparator(opts)
	})
}

func Fuzz_Nosy_EASCaller_GetName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCaller
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.GetName(opts)
	})
}

func Fuzz_Nosy_EASCaller_GetNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCaller
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.GetNonce(opts, account)
	})
}

func Fuzz_Nosy_EASCaller_GetRevokeOffchain__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCaller
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var revoker common.Address
		fill_err = tp.Fill(&revoker)
		if fill_err != nil {
			return
		}
		var d4 [32]byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.GetRevokeOffchain(opts, revoker, d4)
	})
}

func Fuzz_Nosy_EASCaller_GetRevokeTypeHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCaller
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.GetRevokeTypeHash(opts)
	})
}

func Fuzz_Nosy_EASCaller_GetSchemaRegistry__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCaller
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.GetSchemaRegistry(opts)
	})
}

func Fuzz_Nosy_EASCaller_GetTimestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCaller
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var d3 [32]byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.GetTimestamp(opts, d3)
	})
}

func Fuzz_Nosy_EASCaller_IsAttestationValid__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCaller
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var uid [32]byte
		fill_err = tp.Fill(&uid)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.IsAttestationValid(opts, uid)
	})
}

func Fuzz_Nosy_EASCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCaller
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.Version(opts)
	})
}

// skipping Fuzz_Nosy_EASCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_EASCallerSession_GetAttestTypeHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCallerSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetAttestTypeHash()
	})
}

func Fuzz_Nosy_EASCallerSession_GetAttestation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCallerSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var uid [32]byte
		fill_err = tp.Fill(&uid)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetAttestation(uid)
	})
}

func Fuzz_Nosy_EASCallerSession_GetDomainSeparator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCallerSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetDomainSeparator()
	})
}

func Fuzz_Nosy_EASCallerSession_GetName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCallerSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetName()
	})
}

func Fuzz_Nosy_EASCallerSession_GetNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCallerSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetNonce(account)
	})
}

func Fuzz_Nosy_EASCallerSession_GetRevokeOffchain__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCallerSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var revoker common.Address
		fill_err = tp.Fill(&revoker)
		if fill_err != nil {
			return
		}
		var d3 [32]byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetRevokeOffchain(revoker, d3)
	})
}

func Fuzz_Nosy_EASCallerSession_GetRevokeTypeHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCallerSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetRevokeTypeHash()
	})
}

func Fuzz_Nosy_EASCallerSession_GetSchemaRegistry__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCallerSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetSchemaRegistry()
	})
}

func Fuzz_Nosy_EASCallerSession_GetTimestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCallerSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var d2 [32]byte
		fill_err = tp.Fill(&d2)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetTimestamp(d2)
	})
}

func Fuzz_Nosy_EASCallerSession_IsAttestationValid__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCallerSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var uid [32]byte
		fill_err = tp.Fill(&uid)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.IsAttestationValid(uid)
	})
}

func Fuzz_Nosy_EASCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASCallerSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.Version()
	})
}

func Fuzz_Nosy_EASFilterer_FilterAttested__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASFilterer
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var recipient []common.Address
		fill_err = tp.Fill(&recipient)
		if fill_err != nil {
			return
		}
		var attester []common.Address
		fill_err = tp.Fill(&attester)
		if fill_err != nil {
			return
		}
		var schemaUID [][32]byte
		fill_err = tp.Fill(&schemaUID)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.FilterAttested(opts, recipient, attester, schemaUID)
	})
}

func Fuzz_Nosy_EASFilterer_FilterNonceIncreased__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASFilterer
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.FilterNonceIncreased(opts)
	})
}

func Fuzz_Nosy_EASFilterer_FilterRevoked__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASFilterer
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var recipient []common.Address
		fill_err = tp.Fill(&recipient)
		if fill_err != nil {
			return
		}
		var attester []common.Address
		fill_err = tp.Fill(&attester)
		if fill_err != nil {
			return
		}
		var schemaUID [][32]byte
		fill_err = tp.Fill(&schemaUID)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.FilterRevoked(opts, recipient, attester, schemaUID)
	})
}

func Fuzz_Nosy_EASFilterer_FilterRevokedOffchain__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASFilterer
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var revoker []common.Address
		fill_err = tp.Fill(&revoker)
		if fill_err != nil {
			return
		}
		var d4 [][32]byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var timestamp []uint64
		fill_err = tp.Fill(&timestamp)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.FilterRevokedOffchain(opts, revoker, d4, timestamp)
	})
}

func Fuzz_Nosy_EASFilterer_FilterTimestamped__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASFilterer
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var d3 [][32]byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		var timestamp []uint64
		fill_err = tp.Fill(&timestamp)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.FilterTimestamped(opts, d3, timestamp)
	})
}

func Fuzz_Nosy_EASFilterer_ParseAttested__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASFilterer
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.ParseAttested(log)
	})
}

func Fuzz_Nosy_EASFilterer_ParseNonceIncreased__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASFilterer
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.ParseNonceIncreased(log)
	})
}

func Fuzz_Nosy_EASFilterer_ParseRevoked__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASFilterer
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.ParseRevoked(log)
	})
}

func Fuzz_Nosy_EASFilterer_ParseRevokedOffchain__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASFilterer
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.ParseRevokedOffchain(log)
	})
}

func Fuzz_Nosy_EASFilterer_ParseTimestamped__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASFilterer
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.ParseTimestamped(log)
	})
}

// skipping Fuzz_Nosy_EASFilterer_WatchAttested__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EASAttested

// skipping Fuzz_Nosy_EASFilterer_WatchNonceIncreased__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EASNonceIncreased

// skipping Fuzz_Nosy_EASFilterer_WatchRevoked__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EASRevoked

// skipping Fuzz_Nosy_EASFilterer_WatchRevokedOffchain__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EASRevokedOffchain

// skipping Fuzz_Nosy_EASFilterer_WatchTimestamped__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EASTimestamped

func Fuzz_Nosy_EASNonceIncreasedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASNonceIncreasedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EASNonceIncreasedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASNonceIncreasedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EASNonceIncreasedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASNonceIncreasedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_EASRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_EASRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_EASRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASRaw
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.Transfer(opts)
	})
}

func Fuzz_Nosy_EASRevokedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASRevokedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EASRevokedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASRevokedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EASRevokedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASRevokedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EASRevokedOffchainIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASRevokedOffchainIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EASRevokedOffchainIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASRevokedOffchainIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EASRevokedOffchainIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASRevokedOffchainIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EASSession_Attest__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var request AttestationRequest
		fill_err = tp.Fill(&request)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.Attest(request)
	})
}

func Fuzz_Nosy_EASSession_AttestByDelegation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var delegatedRequest DelegatedAttestationRequest
		fill_err = tp.Fill(&delegatedRequest)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.AttestByDelegation(delegatedRequest)
	})
}

func Fuzz_Nosy_EASSession_GetAttestTypeHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetAttestTypeHash()
	})
}

func Fuzz_Nosy_EASSession_GetAttestation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var uid [32]byte
		fill_err = tp.Fill(&uid)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetAttestation(uid)
	})
}

func Fuzz_Nosy_EASSession_GetDomainSeparator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetDomainSeparator()
	})
}

func Fuzz_Nosy_EASSession_GetName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetName()
	})
}

func Fuzz_Nosy_EASSession_GetNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetNonce(account)
	})
}

func Fuzz_Nosy_EASSession_GetRevokeOffchain__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var revoker common.Address
		fill_err = tp.Fill(&revoker)
		if fill_err != nil {
			return
		}
		var d3 [32]byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetRevokeOffchain(revoker, d3)
	})
}

func Fuzz_Nosy_EASSession_GetRevokeTypeHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetRevokeTypeHash()
	})
}

func Fuzz_Nosy_EASSession_GetSchemaRegistry__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetSchemaRegistry()
	})
}

func Fuzz_Nosy_EASSession_GetTimestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var d2 [32]byte
		fill_err = tp.Fill(&d2)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.GetTimestamp(d2)
	})
}

func Fuzz_Nosy_EASSession_IncreaseNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var newNonce *big.Int
		fill_err = tp.Fill(&newNonce)
		if fill_err != nil {
			return
		}
		if _EAS == nil || newNonce == nil {
			return
		}

		_EAS.IncreaseNonce(newNonce)
	})
}

func Fuzz_Nosy_EASSession_IsAttestationValid__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var uid [32]byte
		fill_err = tp.Fill(&uid)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.IsAttestationValid(uid)
	})
}

func Fuzz_Nosy_EASSession_MultiAttest__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var multiRequests []MultiAttestationRequest
		fill_err = tp.Fill(&multiRequests)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.MultiAttest(multiRequests)
	})
}

func Fuzz_Nosy_EASSession_MultiAttestByDelegation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var multiDelegatedRequests []MultiDelegatedAttestationRequest
		fill_err = tp.Fill(&multiDelegatedRequests)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.MultiAttestByDelegation(multiDelegatedRequests)
	})
}

func Fuzz_Nosy_EASSession_MultiRevoke__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var multiRequests []MultiRevocationRequest
		fill_err = tp.Fill(&multiRequests)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.MultiRevoke(multiRequests)
	})
}

func Fuzz_Nosy_EASSession_MultiRevokeByDelegation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var multiDelegatedRequests []MultiDelegatedRevocationRequest
		fill_err = tp.Fill(&multiDelegatedRequests)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.MultiRevokeByDelegation(multiDelegatedRequests)
	})
}

func Fuzz_Nosy_EASSession_MultiRevokeOffchain__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var d2 [][32]byte
		fill_err = tp.Fill(&d2)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.MultiRevokeOffchain(d2)
	})
}

func Fuzz_Nosy_EASSession_MultiTimestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var d2 [][32]byte
		fill_err = tp.Fill(&d2)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.MultiTimestamp(d2)
	})
}

func Fuzz_Nosy_EASSession_Revoke__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var request RevocationRequest
		fill_err = tp.Fill(&request)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.Revoke(request)
	})
}

func Fuzz_Nosy_EASSession_RevokeByDelegation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var delegatedRequest DelegatedRevocationRequest
		fill_err = tp.Fill(&delegatedRequest)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.RevokeByDelegation(delegatedRequest)
	})
}

func Fuzz_Nosy_EASSession_RevokeOffchain__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var d2 [32]byte
		fill_err = tp.Fill(&d2)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.RevokeOffchain(d2)
	})
}

func Fuzz_Nosy_EASSession_Timestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var d2 [32]byte
		fill_err = tp.Fill(&d2)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.Timestamp(d2)
	})
}

func Fuzz_Nosy_EASSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.Version()
	})
}

func Fuzz_Nosy_EASTimestampedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASTimestampedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EASTimestampedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASTimestampedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EASTimestampedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EASTimestampedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EASTransactor_Attest__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactor
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var request AttestationRequest
		fill_err = tp.Fill(&request)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.Attest(opts, request)
	})
}

func Fuzz_Nosy_EASTransactor_AttestByDelegation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactor
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var delegatedRequest DelegatedAttestationRequest
		fill_err = tp.Fill(&delegatedRequest)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.AttestByDelegation(opts, delegatedRequest)
	})
}

func Fuzz_Nosy_EASTransactor_IncreaseNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactor
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var newNonce *big.Int
		fill_err = tp.Fill(&newNonce)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil || newNonce == nil {
			return
		}

		_EAS.IncreaseNonce(opts, newNonce)
	})
}

func Fuzz_Nosy_EASTransactor_MultiAttest__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactor
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var multiRequests []MultiAttestationRequest
		fill_err = tp.Fill(&multiRequests)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.MultiAttest(opts, multiRequests)
	})
}

func Fuzz_Nosy_EASTransactor_MultiAttestByDelegation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactor
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var multiDelegatedRequests []MultiDelegatedAttestationRequest
		fill_err = tp.Fill(&multiDelegatedRequests)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.MultiAttestByDelegation(opts, multiDelegatedRequests)
	})
}

func Fuzz_Nosy_EASTransactor_MultiRevoke__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactor
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var multiRequests []MultiRevocationRequest
		fill_err = tp.Fill(&multiRequests)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.MultiRevoke(opts, multiRequests)
	})
}

func Fuzz_Nosy_EASTransactor_MultiRevokeByDelegation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactor
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var multiDelegatedRequests []MultiDelegatedRevocationRequest
		fill_err = tp.Fill(&multiDelegatedRequests)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.MultiRevokeByDelegation(opts, multiDelegatedRequests)
	})
}

func Fuzz_Nosy_EASTransactor_MultiRevokeOffchain__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactor
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var d3 [][32]byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.MultiRevokeOffchain(opts, d3)
	})
}

func Fuzz_Nosy_EASTransactor_MultiTimestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactor
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var d3 [][32]byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.MultiTimestamp(opts, d3)
	})
}

func Fuzz_Nosy_EASTransactor_Revoke__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactor
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var request RevocationRequest
		fill_err = tp.Fill(&request)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.Revoke(opts, request)
	})
}

func Fuzz_Nosy_EASTransactor_RevokeByDelegation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactor
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var delegatedRequest DelegatedRevocationRequest
		fill_err = tp.Fill(&delegatedRequest)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.RevokeByDelegation(opts, delegatedRequest)
	})
}

func Fuzz_Nosy_EASTransactor_RevokeOffchain__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactor
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var d3 [32]byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.RevokeOffchain(opts, d3)
	})
}

func Fuzz_Nosy_EASTransactor_Timestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactor
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var d3 [32]byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.Timestamp(opts, d3)
	})
}

// skipping Fuzz_Nosy_EASTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_EASTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorRaw
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EAS == nil || opts == nil {
			return
		}

		_EAS.Transfer(opts)
	})
}

func Fuzz_Nosy_EASTransactorSession_Attest__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var request AttestationRequest
		fill_err = tp.Fill(&request)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.Attest(request)
	})
}

func Fuzz_Nosy_EASTransactorSession_AttestByDelegation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var delegatedRequest DelegatedAttestationRequest
		fill_err = tp.Fill(&delegatedRequest)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.AttestByDelegation(delegatedRequest)
	})
}

func Fuzz_Nosy_EASTransactorSession_IncreaseNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var newNonce *big.Int
		fill_err = tp.Fill(&newNonce)
		if fill_err != nil {
			return
		}
		if _EAS == nil || newNonce == nil {
			return
		}

		_EAS.IncreaseNonce(newNonce)
	})
}

func Fuzz_Nosy_EASTransactorSession_MultiAttest__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var multiRequests []MultiAttestationRequest
		fill_err = tp.Fill(&multiRequests)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.MultiAttest(multiRequests)
	})
}

func Fuzz_Nosy_EASTransactorSession_MultiAttestByDelegation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var multiDelegatedRequests []MultiDelegatedAttestationRequest
		fill_err = tp.Fill(&multiDelegatedRequests)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.MultiAttestByDelegation(multiDelegatedRequests)
	})
}

func Fuzz_Nosy_EASTransactorSession_MultiRevoke__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var multiRequests []MultiRevocationRequest
		fill_err = tp.Fill(&multiRequests)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.MultiRevoke(multiRequests)
	})
}

func Fuzz_Nosy_EASTransactorSession_MultiRevokeByDelegation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var multiDelegatedRequests []MultiDelegatedRevocationRequest
		fill_err = tp.Fill(&multiDelegatedRequests)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.MultiRevokeByDelegation(multiDelegatedRequests)
	})
}

func Fuzz_Nosy_EASTransactorSession_MultiRevokeOffchain__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var d2 [][32]byte
		fill_err = tp.Fill(&d2)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.MultiRevokeOffchain(d2)
	})
}

func Fuzz_Nosy_EASTransactorSession_MultiTimestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var d2 [][32]byte
		fill_err = tp.Fill(&d2)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.MultiTimestamp(d2)
	})
}

func Fuzz_Nosy_EASTransactorSession_Revoke__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var request RevocationRequest
		fill_err = tp.Fill(&request)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.Revoke(request)
	})
}

func Fuzz_Nosy_EASTransactorSession_RevokeByDelegation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var delegatedRequest DelegatedRevocationRequest
		fill_err = tp.Fill(&delegatedRequest)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.RevokeByDelegation(delegatedRequest)
	})
}

func Fuzz_Nosy_EASTransactorSession_RevokeOffchain__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var d2 [32]byte
		fill_err = tp.Fill(&d2)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.RevokeOffchain(d2)
	})
}

func Fuzz_Nosy_EASTransactorSession_Timestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EAS *EASTransactorSession
		fill_err = tp.Fill(&_EAS)
		if fill_err != nil {
			return
		}
		var d2 [32]byte
		fill_err = tp.Fill(&d2)
		if fill_err != nil {
			return
		}
		if _EAS == nil {
			return
		}

		_EAS.Timestamp(d2)
	})
}

func Fuzz_Nosy_ERC20ApprovalIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ERC20ApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_ERC20ApprovalIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ERC20ApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_ERC20ApprovalIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ERC20ApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_ERC20Caller_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Caller
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil {
			return
		}

		_ERC20.Allowance(opts, arg0, arg1)
	})
}

func Fuzz_Nosy_ERC20Caller_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Caller
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil {
			return
		}

		_ERC20.BalanceOf(opts, arg0)
	})
}

func Fuzz_Nosy_ERC20Caller_DOMAINSEPARATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Caller
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil {
			return
		}

		_ERC20.DOMAINSEPARATOR(opts)
	})
}

func Fuzz_Nosy_ERC20Caller_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Caller
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil {
			return
		}

		_ERC20.Decimals(opts)
	})
}

func Fuzz_Nosy_ERC20Caller_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Caller
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil {
			return
		}

		_ERC20.Name(opts)
	})
}

func Fuzz_Nosy_ERC20Caller_Nonces__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Caller
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil {
			return
		}

		_ERC20.Nonces(opts, arg0)
	})
}

func Fuzz_Nosy_ERC20Caller_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Caller
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil {
			return
		}

		_ERC20.Symbol(opts)
	})
}

func Fuzz_Nosy_ERC20Caller_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Caller
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil {
			return
		}

		_ERC20.TotalSupply(opts)
	})
}

// skipping Fuzz_Nosy_ERC20CallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_ERC20CallerSession_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20CallerSession
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.Allowance(arg0, arg1)
	})
}

func Fuzz_Nosy_ERC20CallerSession_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20CallerSession
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.BalanceOf(arg0)
	})
}

func Fuzz_Nosy_ERC20CallerSession_DOMAINSEPARATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20CallerSession
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.DOMAINSEPARATOR()
	})
}

func Fuzz_Nosy_ERC20CallerSession_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20CallerSession
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.Decimals()
	})
}

func Fuzz_Nosy_ERC20CallerSession_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20CallerSession
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.Name()
	})
}

func Fuzz_Nosy_ERC20CallerSession_Nonces__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20CallerSession
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.Nonces(arg0)
	})
}

func Fuzz_Nosy_ERC20CallerSession_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20CallerSession
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.Symbol()
	})
}

func Fuzz_Nosy_ERC20CallerSession_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20CallerSession
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.TotalSupply()
	})
}

func Fuzz_Nosy_ERC20Filterer_FilterApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Filterer
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner []common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender []common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil {
			return
		}

		_ERC20.FilterApproval(opts, owner, spender)
	})
}

func Fuzz_Nosy_ERC20Filterer_FilterTransfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Filterer
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to []common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil {
			return
		}

		_ERC20.FilterTransfer(opts, from, to)
	})
}

func Fuzz_Nosy_ERC20Filterer_ParseApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Filterer
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.ParseApproval(log)
	})
}

func Fuzz_Nosy_ERC20Filterer_ParseTransfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Filterer
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.ParseTransfer(log)
	})
}

// skipping Fuzz_Nosy_ERC20Filterer_WatchApproval__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.ERC20Approval

// skipping Fuzz_Nosy_ERC20Filterer_WatchTransfer__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.ERC20Transfer

// skipping Fuzz_Nosy_ERC20Raw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_ERC20Raw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_ERC20Raw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Raw
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil {
			return
		}

		_ERC20.Transfer(opts)
	})
}

func Fuzz_Nosy_ERC20Session_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Session
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.Allowance(arg0, arg1)
	})
}

func Fuzz_Nosy_ERC20Session_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Session
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || amount == nil {
			return
		}

		_ERC20.Approve(spender, amount)
	})
}

func Fuzz_Nosy_ERC20Session_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Session
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.BalanceOf(arg0)
	})
}

func Fuzz_Nosy_ERC20Session_DOMAINSEPARATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Session
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.DOMAINSEPARATOR()
	})
}

func Fuzz_Nosy_ERC20Session_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Session
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.Decimals()
	})
}

func Fuzz_Nosy_ERC20Session_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Session
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.Name()
	})
}

func Fuzz_Nosy_ERC20Session_Nonces__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Session
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.Nonces(arg0)
	})
}

func Fuzz_Nosy_ERC20Session_Permit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Session
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var deadline *big.Int
		fill_err = tp.Fill(&deadline)
		if fill_err != nil {
			return
		}
		var v uint8
		fill_err = tp.Fill(&v)
		if fill_err != nil {
			return
		}
		var r [32]byte
		fill_err = tp.Fill(&r)
		if fill_err != nil {
			return
		}
		var s [32]byte
		fill_err = tp.Fill(&s)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || value == nil || deadline == nil {
			return
		}

		_ERC20.Permit(owner, spender, value, deadline, v, r, s)
	})
}

func Fuzz_Nosy_ERC20Session_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Session
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.Symbol()
	})
}

func Fuzz_Nosy_ERC20Session_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Session
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil {
			return
		}

		_ERC20.TotalSupply()
	})
}

func Fuzz_Nosy_ERC20Session_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Session
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || amount == nil {
			return
		}

		_ERC20.Transfer(to, amount)
	})
}

func Fuzz_Nosy_ERC20Session_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Session
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var from common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || amount == nil {
			return
		}

		_ERC20.TransferFrom(from, to, amount)
	})
}

func Fuzz_Nosy_ERC20Transactor_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Transactor
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil || amount == nil {
			return
		}

		_ERC20.Approve(opts, spender, amount)
	})
}

func Fuzz_Nosy_ERC20Transactor_Permit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Transactor
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var deadline *big.Int
		fill_err = tp.Fill(&deadline)
		if fill_err != nil {
			return
		}
		var v uint8
		fill_err = tp.Fill(&v)
		if fill_err != nil {
			return
		}
		var r [32]byte
		fill_err = tp.Fill(&r)
		if fill_err != nil {
			return
		}
		var s [32]byte
		fill_err = tp.Fill(&s)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil || value == nil || deadline == nil {
			return
		}

		_ERC20.Permit(opts, owner, spender, value, deadline, v, r, s)
	})
}

func Fuzz_Nosy_ERC20Transactor_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Transactor
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil || amount == nil {
			return
		}

		_ERC20.Transfer(opts, to, amount)
	})
}

func Fuzz_Nosy_ERC20Transactor_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20Transactor
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil || amount == nil {
			return
		}

		_ERC20.TransferFrom(opts, from, to, amount)
	})
}

// skipping Fuzz_Nosy_ERC20TransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_ERC20TransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20TransactorRaw
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || opts == nil {
			return
		}

		_ERC20.Transfer(opts)
	})
}

func Fuzz_Nosy_ERC20TransactorSession_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20TransactorSession
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || amount == nil {
			return
		}

		_ERC20.Approve(spender, amount)
	})
}

func Fuzz_Nosy_ERC20TransactorSession_Permit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20TransactorSession
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var deadline *big.Int
		fill_err = tp.Fill(&deadline)
		if fill_err != nil {
			return
		}
		var v uint8
		fill_err = tp.Fill(&v)
		if fill_err != nil {
			return
		}
		var r [32]byte
		fill_err = tp.Fill(&r)
		if fill_err != nil {
			return
		}
		var s [32]byte
		fill_err = tp.Fill(&s)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || value == nil || deadline == nil {
			return
		}

		_ERC20.Permit(owner, spender, value, deadline, v, r, s)
	})
}

func Fuzz_Nosy_ERC20TransactorSession_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20TransactorSession
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || amount == nil {
			return
		}

		_ERC20.Transfer(to, amount)
	})
}

func Fuzz_Nosy_ERC20TransactorSession_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ERC20 *ERC20TransactorSession
		fill_err = tp.Fill(&_ERC20)
		if fill_err != nil {
			return
		}
		var from common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _ERC20 == nil || amount == nil {
			return
		}

		_ERC20.TransferFrom(from, to, amount)
	})
}

func Fuzz_Nosy_ERC20TransferIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ERC20TransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_ERC20TransferIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ERC20TransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_ERC20TransferIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ERC20TransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EntryPointAccountDeployedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointAccountDeployedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EntryPointAccountDeployedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointAccountDeployedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EntryPointAccountDeployedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointAccountDeployedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EntryPointBeforeExecutionIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointBeforeExecutionIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EntryPointBeforeExecutionIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointBeforeExecutionIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EntryPointBeforeExecutionIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointBeforeExecutionIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EntryPointCaller_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCaller
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.BalanceOf(opts, account)
	})
}

func Fuzz_Nosy_EntryPointCaller_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCaller
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.Deposits(opts, arg0)
	})
}

func Fuzz_Nosy_EntryPointCaller_GetDepositInfo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCaller
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.GetDepositInfo(opts, account)
	})
}

func Fuzz_Nosy_EntryPointCaller_GetNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCaller
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var sender common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		var key *big.Int
		fill_err = tp.Fill(&key)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil || key == nil {
			return
		}

		_EntryPoint.GetNonce(opts, sender, key)
	})
}

func Fuzz_Nosy_EntryPointCaller_GetUserOpHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCaller
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var userOp UserOperation
		fill_err = tp.Fill(&userOp)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.GetUserOpHash(opts, userOp)
	})
}

func Fuzz_Nosy_EntryPointCaller_NonceSequenceNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCaller
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 *big.Int
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil || arg1 == nil {
			return
		}

		_EntryPoint.NonceSequenceNumber(opts, arg0, arg1)
	})
}

func Fuzz_Nosy_EntryPointCaller_SIGVALIDATIONFAILED__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCaller
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.SIGVALIDATIONFAILED(opts)
	})
}

func Fuzz_Nosy_EntryPointCaller_ValidateSenderAndPaymaster__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCaller
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var initCode []byte
		fill_err = tp.Fill(&initCode)
		if fill_err != nil {
			return
		}
		var sender common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		var paymasterAndData []byte
		fill_err = tp.Fill(&paymasterAndData)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.ValidateSenderAndPaymaster(opts, initCode, sender, paymasterAndData)
	})
}

// skipping Fuzz_Nosy_EntryPointCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_EntryPointCallerSession_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCallerSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.BalanceOf(account)
	})
}

func Fuzz_Nosy_EntryPointCallerSession_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCallerSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.Deposits(arg0)
	})
}

func Fuzz_Nosy_EntryPointCallerSession_GetDepositInfo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCallerSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.GetDepositInfo(account)
	})
}

func Fuzz_Nosy_EntryPointCallerSession_GetNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCallerSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var sender common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		var key *big.Int
		fill_err = tp.Fill(&key)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || key == nil {
			return
		}

		_EntryPoint.GetNonce(sender, key)
	})
}

func Fuzz_Nosy_EntryPointCallerSession_GetUserOpHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCallerSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var userOp UserOperation
		fill_err = tp.Fill(&userOp)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.GetUserOpHash(userOp)
	})
}

func Fuzz_Nosy_EntryPointCallerSession_NonceSequenceNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCallerSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 *big.Int
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || arg1 == nil {
			return
		}

		_EntryPoint.NonceSequenceNumber(arg0, arg1)
	})
}

func Fuzz_Nosy_EntryPointCallerSession_SIGVALIDATIONFAILED__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCallerSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.SIGVALIDATIONFAILED()
	})
}

func Fuzz_Nosy_EntryPointCallerSession_ValidateSenderAndPaymaster__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointCallerSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var initCode []byte
		fill_err = tp.Fill(&initCode)
		if fill_err != nil {
			return
		}
		var sender common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		var paymasterAndData []byte
		fill_err = tp.Fill(&paymasterAndData)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.ValidateSenderAndPaymaster(initCode, sender, paymasterAndData)
	})
}

func Fuzz_Nosy_EntryPointDepositedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointDepositedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EntryPointDepositedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointDepositedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EntryPointDepositedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointDepositedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EntryPointFilterer_FilterAccountDeployed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var userOpHash [][32]byte
		fill_err = tp.Fill(&userOpHash)
		if fill_err != nil {
			return
		}
		var sender []common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.FilterAccountDeployed(opts, userOpHash, sender)
	})
}

func Fuzz_Nosy_EntryPointFilterer_FilterBeforeExecution__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.FilterBeforeExecution(opts)
	})
}

func Fuzz_Nosy_EntryPointFilterer_FilterDeposited__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account []common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.FilterDeposited(opts, account)
	})
}

func Fuzz_Nosy_EntryPointFilterer_FilterSignatureAggregatorChanged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var aggregator []common.Address
		fill_err = tp.Fill(&aggregator)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.FilterSignatureAggregatorChanged(opts, aggregator)
	})
}

func Fuzz_Nosy_EntryPointFilterer_FilterStakeLocked__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account []common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.FilterStakeLocked(opts, account)
	})
}

func Fuzz_Nosy_EntryPointFilterer_FilterStakeUnlocked__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account []common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.FilterStakeUnlocked(opts, account)
	})
}

func Fuzz_Nosy_EntryPointFilterer_FilterStakeWithdrawn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account []common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.FilterStakeWithdrawn(opts, account)
	})
}

func Fuzz_Nosy_EntryPointFilterer_FilterUserOperationEvent__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var userOpHash [][32]byte
		fill_err = tp.Fill(&userOpHash)
		if fill_err != nil {
			return
		}
		var sender []common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		var paymaster []common.Address
		fill_err = tp.Fill(&paymaster)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.FilterUserOperationEvent(opts, userOpHash, sender, paymaster)
	})
}

func Fuzz_Nosy_EntryPointFilterer_FilterUserOperationRevertReason__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var userOpHash [][32]byte
		fill_err = tp.Fill(&userOpHash)
		if fill_err != nil {
			return
		}
		var sender []common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.FilterUserOperationRevertReason(opts, userOpHash, sender)
	})
}

func Fuzz_Nosy_EntryPointFilterer_FilterWithdrawn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account []common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.FilterWithdrawn(opts, account)
	})
}

func Fuzz_Nosy_EntryPointFilterer_ParseAccountDeployed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.ParseAccountDeployed(log)
	})
}

func Fuzz_Nosy_EntryPointFilterer_ParseBeforeExecution__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.ParseBeforeExecution(log)
	})
}

func Fuzz_Nosy_EntryPointFilterer_ParseDeposited__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.ParseDeposited(log)
	})
}

func Fuzz_Nosy_EntryPointFilterer_ParseSignatureAggregatorChanged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.ParseSignatureAggregatorChanged(log)
	})
}

func Fuzz_Nosy_EntryPointFilterer_ParseStakeLocked__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.ParseStakeLocked(log)
	})
}

func Fuzz_Nosy_EntryPointFilterer_ParseStakeUnlocked__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.ParseStakeUnlocked(log)
	})
}

func Fuzz_Nosy_EntryPointFilterer_ParseStakeWithdrawn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.ParseStakeWithdrawn(log)
	})
}

func Fuzz_Nosy_EntryPointFilterer_ParseUserOperationEvent__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.ParseUserOperationEvent(log)
	})
}

func Fuzz_Nosy_EntryPointFilterer_ParseUserOperationRevertReason__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.ParseUserOperationRevertReason(log)
	})
}

func Fuzz_Nosy_EntryPointFilterer_ParseWithdrawn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointFilterer
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.ParseWithdrawn(log)
	})
}

// skipping Fuzz_Nosy_EntryPointFilterer_WatchAccountDeployed__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EntryPointAccountDeployed

// skipping Fuzz_Nosy_EntryPointFilterer_WatchBeforeExecution__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EntryPointBeforeExecution

// skipping Fuzz_Nosy_EntryPointFilterer_WatchDeposited__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EntryPointDeposited

// skipping Fuzz_Nosy_EntryPointFilterer_WatchSignatureAggregatorChanged__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EntryPointSignatureAggregatorChanged

// skipping Fuzz_Nosy_EntryPointFilterer_WatchStakeLocked__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EntryPointStakeLocked

// skipping Fuzz_Nosy_EntryPointFilterer_WatchStakeUnlocked__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EntryPointStakeUnlocked

// skipping Fuzz_Nosy_EntryPointFilterer_WatchStakeWithdrawn__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EntryPointStakeWithdrawn

// skipping Fuzz_Nosy_EntryPointFilterer_WatchUserOperationEvent__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EntryPointUserOperationEvent

// skipping Fuzz_Nosy_EntryPointFilterer_WatchUserOperationRevertReason__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EntryPointUserOperationRevertReason

// skipping Fuzz_Nosy_EntryPointFilterer_WatchWithdrawn__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.EntryPointWithdrawn

// skipping Fuzz_Nosy_EntryPointRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_EntryPointRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_EntryPointRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointRaw
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.Transfer(opts)
	})
}

func Fuzz_Nosy_EntryPointSession_AddStake__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var unstakeDelaySec uint32
		fill_err = tp.Fill(&unstakeDelaySec)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.AddStake(unstakeDelaySec)
	})
}

func Fuzz_Nosy_EntryPointSession_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.BalanceOf(account)
	})
}

func Fuzz_Nosy_EntryPointSession_DepositTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.DepositTo(account)
	})
}

func Fuzz_Nosy_EntryPointSession_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.Deposits(arg0)
	})
}

func Fuzz_Nosy_EntryPointSession_GetDepositInfo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.GetDepositInfo(account)
	})
}

func Fuzz_Nosy_EntryPointSession_GetNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var sender common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		var key *big.Int
		fill_err = tp.Fill(&key)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || key == nil {
			return
		}

		_EntryPoint.GetNonce(sender, key)
	})
}

func Fuzz_Nosy_EntryPointSession_GetSenderAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var initCode []byte
		fill_err = tp.Fill(&initCode)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.GetSenderAddress(initCode)
	})
}

func Fuzz_Nosy_EntryPointSession_GetUserOpHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var userOp UserOperation
		fill_err = tp.Fill(&userOp)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.GetUserOpHash(userOp)
	})
}

func Fuzz_Nosy_EntryPointSession_HandleAggregatedOps__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opsPerAggregator []IEntryPointUserOpsPerAggregator
		fill_err = tp.Fill(&opsPerAggregator)
		if fill_err != nil {
			return
		}
		var beneficiary common.Address
		fill_err = tp.Fill(&beneficiary)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.HandleAggregatedOps(opsPerAggregator, beneficiary)
	})
}

func Fuzz_Nosy_EntryPointSession_HandleOps__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var ops []UserOperation
		fill_err = tp.Fill(&ops)
		if fill_err != nil {
			return
		}
		var beneficiary common.Address
		fill_err = tp.Fill(&beneficiary)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.HandleOps(ops, beneficiary)
	})
}

func Fuzz_Nosy_EntryPointSession_IncrementNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var key *big.Int
		fill_err = tp.Fill(&key)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || key == nil {
			return
		}

		_EntryPoint.IncrementNonce(key)
	})
}

func Fuzz_Nosy_EntryPointSession_InnerHandleOp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var callData []byte
		fill_err = tp.Fill(&callData)
		if fill_err != nil {
			return
		}
		var opInfo EntryPointUserOpInfo
		fill_err = tp.Fill(&opInfo)
		if fill_err != nil {
			return
		}
		var context []byte
		fill_err = tp.Fill(&context)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.InnerHandleOp(callData, opInfo, context)
	})
}

func Fuzz_Nosy_EntryPointSession_NonceSequenceNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 *big.Int
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || arg1 == nil {
			return
		}

		_EntryPoint.NonceSequenceNumber(arg0, arg1)
	})
}

func Fuzz_Nosy_EntryPointSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.Receive()
	})
}

func Fuzz_Nosy_EntryPointSession_SIGVALIDATIONFAILED__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.SIGVALIDATIONFAILED()
	})
}

func Fuzz_Nosy_EntryPointSession_SimulateHandleOp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var op UserOperation
		fill_err = tp.Fill(&op)
		if fill_err != nil {
			return
		}
		var t3 common.Address
		fill_err = tp.Fill(&t3)
		if fill_err != nil {
			return
		}
		var targetCallData []byte
		fill_err = tp.Fill(&targetCallData)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.SimulateHandleOp(op, t3, targetCallData)
	})
}

func Fuzz_Nosy_EntryPointSession_SimulateValidation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var userOp UserOperation
		fill_err = tp.Fill(&userOp)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.SimulateValidation(userOp)
	})
}

func Fuzz_Nosy_EntryPointSession_UnlockStake__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.UnlockStake()
	})
}

func Fuzz_Nosy_EntryPointSession_ValidateSenderAndPaymaster__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var initCode []byte
		fill_err = tp.Fill(&initCode)
		if fill_err != nil {
			return
		}
		var sender common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		var paymasterAndData []byte
		fill_err = tp.Fill(&paymasterAndData)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.ValidateSenderAndPaymaster(initCode, sender, paymasterAndData)
	})
}

func Fuzz_Nosy_EntryPointSession_WithdrawStake__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var withdrawAddress common.Address
		fill_err = tp.Fill(&withdrawAddress)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.WithdrawStake(withdrawAddress)
	})
}

func Fuzz_Nosy_EntryPointSession_WithdrawTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var withdrawAddress common.Address
		fill_err = tp.Fill(&withdrawAddress)
		if fill_err != nil {
			return
		}
		var withdrawAmount *big.Int
		fill_err = tp.Fill(&withdrawAmount)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || withdrawAmount == nil {
			return
		}

		_EntryPoint.WithdrawTo(withdrawAddress, withdrawAmount)
	})
}

func Fuzz_Nosy_EntryPointSignatureAggregatorChangedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointSignatureAggregatorChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EntryPointSignatureAggregatorChangedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointSignatureAggregatorChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EntryPointSignatureAggregatorChangedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointSignatureAggregatorChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EntryPointStakeLockedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointStakeLockedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EntryPointStakeLockedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointStakeLockedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EntryPointStakeLockedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointStakeLockedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EntryPointStakeUnlockedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointStakeUnlockedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EntryPointStakeUnlockedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointStakeUnlockedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EntryPointStakeUnlockedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointStakeUnlockedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EntryPointStakeWithdrawnIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointStakeWithdrawnIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EntryPointStakeWithdrawnIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointStakeWithdrawnIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EntryPointStakeWithdrawnIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointStakeWithdrawnIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EntryPointTransactor_AddStake__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactor
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var unstakeDelaySec uint32
		fill_err = tp.Fill(&unstakeDelaySec)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.AddStake(opts, unstakeDelaySec)
	})
}

func Fuzz_Nosy_EntryPointTransactor_DepositTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactor
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.DepositTo(opts, account)
	})
}

func Fuzz_Nosy_EntryPointTransactor_GetSenderAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactor
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var initCode []byte
		fill_err = tp.Fill(&initCode)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.GetSenderAddress(opts, initCode)
	})
}

func Fuzz_Nosy_EntryPointTransactor_HandleAggregatedOps__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactor
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var opsPerAggregator []IEntryPointUserOpsPerAggregator
		fill_err = tp.Fill(&opsPerAggregator)
		if fill_err != nil {
			return
		}
		var beneficiary common.Address
		fill_err = tp.Fill(&beneficiary)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.HandleAggregatedOps(opts, opsPerAggregator, beneficiary)
	})
}

func Fuzz_Nosy_EntryPointTransactor_HandleOps__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactor
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var ops []UserOperation
		fill_err = tp.Fill(&ops)
		if fill_err != nil {
			return
		}
		var beneficiary common.Address
		fill_err = tp.Fill(&beneficiary)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.HandleOps(opts, ops, beneficiary)
	})
}

func Fuzz_Nosy_EntryPointTransactor_IncrementNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactor
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var key *big.Int
		fill_err = tp.Fill(&key)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil || key == nil {
			return
		}

		_EntryPoint.IncrementNonce(opts, key)
	})
}

func Fuzz_Nosy_EntryPointTransactor_InnerHandleOp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactor
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var callData []byte
		fill_err = tp.Fill(&callData)
		if fill_err != nil {
			return
		}
		var opInfo EntryPointUserOpInfo
		fill_err = tp.Fill(&opInfo)
		if fill_err != nil {
			return
		}
		var context []byte
		fill_err = tp.Fill(&context)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.InnerHandleOp(opts, callData, opInfo, context)
	})
}

func Fuzz_Nosy_EntryPointTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactor
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.Receive(opts)
	})
}

func Fuzz_Nosy_EntryPointTransactor_SimulateHandleOp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactor
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var op UserOperation
		fill_err = tp.Fill(&op)
		if fill_err != nil {
			return
		}
		var t4 common.Address
		fill_err = tp.Fill(&t4)
		if fill_err != nil {
			return
		}
		var targetCallData []byte
		fill_err = tp.Fill(&targetCallData)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.SimulateHandleOp(opts, op, t4, targetCallData)
	})
}

func Fuzz_Nosy_EntryPointTransactor_SimulateValidation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactor
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var userOp UserOperation
		fill_err = tp.Fill(&userOp)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.SimulateValidation(opts, userOp)
	})
}

func Fuzz_Nosy_EntryPointTransactor_UnlockStake__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactor
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.UnlockStake(opts)
	})
}

func Fuzz_Nosy_EntryPointTransactor_WithdrawStake__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactor
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var withdrawAddress common.Address
		fill_err = tp.Fill(&withdrawAddress)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.WithdrawStake(opts, withdrawAddress)
	})
}

func Fuzz_Nosy_EntryPointTransactor_WithdrawTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactor
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var withdrawAddress common.Address
		fill_err = tp.Fill(&withdrawAddress)
		if fill_err != nil {
			return
		}
		var withdrawAmount *big.Int
		fill_err = tp.Fill(&withdrawAmount)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil || withdrawAmount == nil {
			return
		}

		_EntryPoint.WithdrawTo(opts, withdrawAddress, withdrawAmount)
	})
}

// skipping Fuzz_Nosy_EntryPointTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_EntryPointTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorRaw
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || opts == nil {
			return
		}

		_EntryPoint.Transfer(opts)
	})
}

func Fuzz_Nosy_EntryPointTransactorSession_AddStake__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var unstakeDelaySec uint32
		fill_err = tp.Fill(&unstakeDelaySec)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.AddStake(unstakeDelaySec)
	})
}

func Fuzz_Nosy_EntryPointTransactorSession_DepositTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.DepositTo(account)
	})
}

func Fuzz_Nosy_EntryPointTransactorSession_GetSenderAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var initCode []byte
		fill_err = tp.Fill(&initCode)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.GetSenderAddress(initCode)
	})
}

func Fuzz_Nosy_EntryPointTransactorSession_HandleAggregatedOps__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var opsPerAggregator []IEntryPointUserOpsPerAggregator
		fill_err = tp.Fill(&opsPerAggregator)
		if fill_err != nil {
			return
		}
		var beneficiary common.Address
		fill_err = tp.Fill(&beneficiary)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.HandleAggregatedOps(opsPerAggregator, beneficiary)
	})
}

func Fuzz_Nosy_EntryPointTransactorSession_HandleOps__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var ops []UserOperation
		fill_err = tp.Fill(&ops)
		if fill_err != nil {
			return
		}
		var beneficiary common.Address
		fill_err = tp.Fill(&beneficiary)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.HandleOps(ops, beneficiary)
	})
}

func Fuzz_Nosy_EntryPointTransactorSession_IncrementNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var key *big.Int
		fill_err = tp.Fill(&key)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || key == nil {
			return
		}

		_EntryPoint.IncrementNonce(key)
	})
}

func Fuzz_Nosy_EntryPointTransactorSession_InnerHandleOp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var callData []byte
		fill_err = tp.Fill(&callData)
		if fill_err != nil {
			return
		}
		var opInfo EntryPointUserOpInfo
		fill_err = tp.Fill(&opInfo)
		if fill_err != nil {
			return
		}
		var context []byte
		fill_err = tp.Fill(&context)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.InnerHandleOp(callData, opInfo, context)
	})
}

func Fuzz_Nosy_EntryPointTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.Receive()
	})
}

func Fuzz_Nosy_EntryPointTransactorSession_SimulateHandleOp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var op UserOperation
		fill_err = tp.Fill(&op)
		if fill_err != nil {
			return
		}
		var t3 common.Address
		fill_err = tp.Fill(&t3)
		if fill_err != nil {
			return
		}
		var targetCallData []byte
		fill_err = tp.Fill(&targetCallData)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.SimulateHandleOp(op, t3, targetCallData)
	})
}

func Fuzz_Nosy_EntryPointTransactorSession_SimulateValidation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var userOp UserOperation
		fill_err = tp.Fill(&userOp)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.SimulateValidation(userOp)
	})
}

func Fuzz_Nosy_EntryPointTransactorSession_UnlockStake__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.UnlockStake()
	})
}

func Fuzz_Nosy_EntryPointTransactorSession_WithdrawStake__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var withdrawAddress common.Address
		fill_err = tp.Fill(&withdrawAddress)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil {
			return
		}

		_EntryPoint.WithdrawStake(withdrawAddress)
	})
}

func Fuzz_Nosy_EntryPointTransactorSession_WithdrawTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _EntryPoint *EntryPointTransactorSession
		fill_err = tp.Fill(&_EntryPoint)
		if fill_err != nil {
			return
		}
		var withdrawAddress common.Address
		fill_err = tp.Fill(&withdrawAddress)
		if fill_err != nil {
			return
		}
		var withdrawAmount *big.Int
		fill_err = tp.Fill(&withdrawAmount)
		if fill_err != nil {
			return
		}
		if _EntryPoint == nil || withdrawAmount == nil {
			return
		}

		_EntryPoint.WithdrawTo(withdrawAddress, withdrawAmount)
	})
}

func Fuzz_Nosy_EntryPointUserOperationEventIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointUserOperationEventIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EntryPointUserOperationEventIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointUserOperationEventIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EntryPointUserOperationEventIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointUserOperationEventIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EntryPointUserOperationRevertReasonIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointUserOperationRevertReasonIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EntryPointUserOperationRevertReasonIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointUserOperationRevertReasonIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EntryPointUserOperationRevertReasonIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointUserOperationRevertReasonIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_EntryPointWithdrawnIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointWithdrawnIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_EntryPointWithdrawnIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointWithdrawnIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_EntryPointWithdrawnIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *EntryPointWithdrawnIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_AbsolutePrestate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.AbsolutePrestate(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_AnchorStateRegistry__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.AnchorStateRegistry(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_ClaimData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 *big.Int
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil || arg0 == nil {
			return
		}

		_FaultDisputeGame.ClaimData(opts, arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_ClaimDataLen__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.ClaimDataLen(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_Claims__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.Claims(opts, arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_ClockExtension__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.ClockExtension(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_CreatedAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.CreatedAt(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_Credit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.Credit(opts, arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_ExtraData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.ExtraData(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_GameCreator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.GameCreator(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_GameData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.GameData(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_GameType__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.GameType(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_GetChallengerDuration__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _claimIndex *big.Int
		fill_err = tp.Fill(&_claimIndex)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil || _claimIndex == nil {
			return
		}

		_FaultDisputeGame.GetChallengerDuration(opts, _claimIndex)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_GetNumToResolve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _claimIndex *big.Int
		fill_err = tp.Fill(&_claimIndex)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil || _claimIndex == nil {
			return
		}

		_FaultDisputeGame.GetNumToResolve(opts, _claimIndex)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_GetRequiredBond__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _position *big.Int
		fill_err = tp.Fill(&_position)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil || _position == nil {
			return
		}

		_FaultDisputeGame.GetRequiredBond(opts, _position)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_L1Head__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.L1Head(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_L2BlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.L2BlockNumber(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_L2BlockNumberChallenged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.L2BlockNumberChallenged(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_L2BlockNumberChallenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.L2BlockNumberChallenger(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_L2ChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.L2ChainId(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_MaxClockDuration__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.MaxClockDuration(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_MaxGameDepth__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.MaxGameDepth(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_ResolutionCheckpoints__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 *big.Int
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil || arg0 == nil {
			return
		}

		_FaultDisputeGame.ResolutionCheckpoints(opts, arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_ResolvedAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.ResolvedAt(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_ResolvedSubgames__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 *big.Int
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil || arg0 == nil {
			return
		}

		_FaultDisputeGame.ResolvedSubgames(opts, arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_RootClaim__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.RootClaim(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_SplitDepth__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.SplitDepth(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_StartingBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.StartingBlockNumber(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_StartingOutputRoot__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.StartingOutputRoot(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_StartingRootHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.StartingRootHash(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_Status__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.Status(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_Subgames__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 *big.Int
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 *big.Int
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil || arg0 == nil || arg1 == nil {
			return
		}

		_FaultDisputeGame.Subgames(opts, arg0, arg1)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.Version(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_Vm__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.Vm(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameCaller_Weth__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCaller
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.Weth(opts)
	})
}

// skipping Fuzz_Nosy_FaultDisputeGameCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_FaultDisputeGameCallerSession_AbsolutePrestate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.AbsolutePrestate()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_AnchorStateRegistry__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.AnchorStateRegistry()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_ClaimData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var arg0 *big.Int
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || arg0 == nil {
			return
		}

		_FaultDisputeGame.ClaimData(arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_ClaimDataLen__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ClaimDataLen()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_Claims__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Claims(arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_ClockExtension__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ClockExtension()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_CreatedAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.CreatedAt()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_Credit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Credit(arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_ExtraData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ExtraData()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_GameCreator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.GameCreator()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_GameData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.GameData()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_GameType__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.GameType()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_GetChallengerDuration__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _claimIndex *big.Int
		fill_err = tp.Fill(&_claimIndex)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _claimIndex == nil {
			return
		}

		_FaultDisputeGame.GetChallengerDuration(_claimIndex)
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_GetNumToResolve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _claimIndex *big.Int
		fill_err = tp.Fill(&_claimIndex)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _claimIndex == nil {
			return
		}

		_FaultDisputeGame.GetNumToResolve(_claimIndex)
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_GetRequiredBond__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _position *big.Int
		fill_err = tp.Fill(&_position)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _position == nil {
			return
		}

		_FaultDisputeGame.GetRequiredBond(_position)
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_L1Head__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.L1Head()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_L2BlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.L2BlockNumber()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_L2BlockNumberChallenged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.L2BlockNumberChallenged()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_L2BlockNumberChallenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.L2BlockNumberChallenger()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_L2ChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.L2ChainId()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_MaxClockDuration__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.MaxClockDuration()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_MaxGameDepth__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.MaxGameDepth()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_ResolutionCheckpoints__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var arg0 *big.Int
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || arg0 == nil {
			return
		}

		_FaultDisputeGame.ResolutionCheckpoints(arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_ResolvedAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ResolvedAt()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_ResolvedSubgames__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var arg0 *big.Int
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || arg0 == nil {
			return
		}

		_FaultDisputeGame.ResolvedSubgames(arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_RootClaim__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.RootClaim()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_SplitDepth__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.SplitDepth()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_StartingBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.StartingBlockNumber()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_StartingOutputRoot__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.StartingOutputRoot()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_StartingRootHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.StartingRootHash()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_Status__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Status()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_Subgames__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var arg0 *big.Int
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 *big.Int
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || arg0 == nil || arg1 == nil {
			return
		}

		_FaultDisputeGame.Subgames(arg0, arg1)
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Version()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_Vm__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Vm()
	})
}

func Fuzz_Nosy_FaultDisputeGameCallerSession_Weth__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameCallerSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Weth()
	})
}

func Fuzz_Nosy_FaultDisputeGameFilterer_FilterMove__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameFilterer
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var parentIndex []*big.Int
		fill_err = tp.Fill(&parentIndex)
		if fill_err != nil {
			return
		}
		var claim [][32]byte
		fill_err = tp.Fill(&claim)
		if fill_err != nil {
			return
		}
		var claimant []common.Address
		fill_err = tp.Fill(&claimant)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.FilterMove(opts, parentIndex, claim, claimant)
	})
}

func Fuzz_Nosy_FaultDisputeGameFilterer_FilterResolved__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameFilterer
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var status []uint8
		fill_err = tp.Fill(&status)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.FilterResolved(opts, status)
	})
}

func Fuzz_Nosy_FaultDisputeGameFilterer_ParseMove__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameFilterer
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ParseMove(log)
	})
}

func Fuzz_Nosy_FaultDisputeGameFilterer_ParseResolved__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameFilterer
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ParseResolved(log)
	})
}

// skipping Fuzz_Nosy_FaultDisputeGameFilterer_WatchMove__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.FaultDisputeGameMove

// skipping Fuzz_Nosy_FaultDisputeGameFilterer_WatchResolved__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.FaultDisputeGameResolved

func Fuzz_Nosy_FaultDisputeGameMoveIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *FaultDisputeGameMoveIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_FaultDisputeGameMoveIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *FaultDisputeGameMoveIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_FaultDisputeGameMoveIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *FaultDisputeGameMoveIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_FaultDisputeGameRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_FaultDisputeGameRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_FaultDisputeGameRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameRaw
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.Transfer(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameResolvedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *FaultDisputeGameResolvedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_FaultDisputeGameResolvedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *FaultDisputeGameResolvedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_FaultDisputeGameResolvedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *FaultDisputeGameResolvedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_AbsolutePrestate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.AbsolutePrestate()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_AddLocalData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _ident *big.Int
		fill_err = tp.Fill(&_ident)
		if fill_err != nil {
			return
		}
		var _execLeafIdx *big.Int
		fill_err = tp.Fill(&_execLeafIdx)
		if fill_err != nil {
			return
		}
		var _partOffset *big.Int
		fill_err = tp.Fill(&_partOffset)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _ident == nil || _execLeafIdx == nil || _partOffset == nil {
			return
		}

		_FaultDisputeGame.AddLocalData(_ident, _execLeafIdx, _partOffset)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_AnchorStateRegistry__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.AnchorStateRegistry()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_Attack__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _disputed [32]byte
		fill_err = tp.Fill(&_disputed)
		if fill_err != nil {
			return
		}
		var _parentIndex *big.Int
		fill_err = tp.Fill(&_parentIndex)
		if fill_err != nil {
			return
		}
		var _claim [32]byte
		fill_err = tp.Fill(&_claim)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _parentIndex == nil {
			return
		}

		_FaultDisputeGame.Attack(_disputed, _parentIndex, _claim)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_ChallengeRootL2Block__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _outputRootProof TypesOutputRootProof
		fill_err = tp.Fill(&_outputRootProof)
		if fill_err != nil {
			return
		}
		var _headerRLP []byte
		fill_err = tp.Fill(&_headerRLP)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ChallengeRootL2Block(_outputRootProof, _headerRLP)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_ClaimCredit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _recipient common.Address
		fill_err = tp.Fill(&_recipient)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ClaimCredit(_recipient)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_ClaimData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var arg0 *big.Int
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || arg0 == nil {
			return
		}

		_FaultDisputeGame.ClaimData(arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_ClaimDataLen__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ClaimDataLen()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_Claims__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Claims(arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_ClockExtension__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ClockExtension()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_CreatedAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.CreatedAt()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_Credit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Credit(arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_Defend__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _disputed [32]byte
		fill_err = tp.Fill(&_disputed)
		if fill_err != nil {
			return
		}
		var _parentIndex *big.Int
		fill_err = tp.Fill(&_parentIndex)
		if fill_err != nil {
			return
		}
		var _claim [32]byte
		fill_err = tp.Fill(&_claim)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _parentIndex == nil {
			return
		}

		_FaultDisputeGame.Defend(_disputed, _parentIndex, _claim)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_ExtraData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ExtraData()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_GameCreator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.GameCreator()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_GameData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.GameData()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_GameType__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.GameType()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_GetChallengerDuration__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _claimIndex *big.Int
		fill_err = tp.Fill(&_claimIndex)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _claimIndex == nil {
			return
		}

		_FaultDisputeGame.GetChallengerDuration(_claimIndex)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_GetNumToResolve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _claimIndex *big.Int
		fill_err = tp.Fill(&_claimIndex)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _claimIndex == nil {
			return
		}

		_FaultDisputeGame.GetNumToResolve(_claimIndex)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_GetRequiredBond__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _position *big.Int
		fill_err = tp.Fill(&_position)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _position == nil {
			return
		}

		_FaultDisputeGame.GetRequiredBond(_position)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Initialize()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_L1Head__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.L1Head()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_L2BlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.L2BlockNumber()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_L2BlockNumberChallenged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.L2BlockNumberChallenged()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_L2BlockNumberChallenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.L2BlockNumberChallenger()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_L2ChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.L2ChainId()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_MaxClockDuration__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.MaxClockDuration()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_MaxGameDepth__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.MaxGameDepth()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_Move__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _disputed [32]byte
		fill_err = tp.Fill(&_disputed)
		if fill_err != nil {
			return
		}
		var _challengeIndex *big.Int
		fill_err = tp.Fill(&_challengeIndex)
		if fill_err != nil {
			return
		}
		var _claim [32]byte
		fill_err = tp.Fill(&_claim)
		if fill_err != nil {
			return
		}
		var _isAttack bool
		fill_err = tp.Fill(&_isAttack)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _challengeIndex == nil {
			return
		}

		_FaultDisputeGame.Move(_disputed, _challengeIndex, _claim, _isAttack)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_ResolutionCheckpoints__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var arg0 *big.Int
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || arg0 == nil {
			return
		}

		_FaultDisputeGame.ResolutionCheckpoints(arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_Resolve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Resolve()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_ResolveClaim__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _claimIndex *big.Int
		fill_err = tp.Fill(&_claimIndex)
		if fill_err != nil {
			return
		}
		var _numToResolve *big.Int
		fill_err = tp.Fill(&_numToResolve)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _claimIndex == nil || _numToResolve == nil {
			return
		}

		_FaultDisputeGame.ResolveClaim(_claimIndex, _numToResolve)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_ResolvedAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ResolvedAt()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_ResolvedSubgames__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var arg0 *big.Int
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || arg0 == nil {
			return
		}

		_FaultDisputeGame.ResolvedSubgames(arg0)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_RootClaim__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.RootClaim()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_SplitDepth__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.SplitDepth()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_StartingBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.StartingBlockNumber()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_StartingOutputRoot__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.StartingOutputRoot()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_StartingRootHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.StartingRootHash()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_Status__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Status()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_Step__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _claimIndex *big.Int
		fill_err = tp.Fill(&_claimIndex)
		if fill_err != nil {
			return
		}
		var _isAttack bool
		fill_err = tp.Fill(&_isAttack)
		if fill_err != nil {
			return
		}
		var _stateData []byte
		fill_err = tp.Fill(&_stateData)
		if fill_err != nil {
			return
		}
		var _proof []byte
		fill_err = tp.Fill(&_proof)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _claimIndex == nil {
			return
		}

		_FaultDisputeGame.Step(_claimIndex, _isAttack, _stateData, _proof)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_Subgames__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var arg0 *big.Int
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 *big.Int
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || arg0 == nil || arg1 == nil {
			return
		}

		_FaultDisputeGame.Subgames(arg0, arg1)
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Version()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_Vm__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Vm()
	})
}

func Fuzz_Nosy_FaultDisputeGameSession_Weth__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Weth()
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactor_AddLocalData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactor
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _ident *big.Int
		fill_err = tp.Fill(&_ident)
		if fill_err != nil {
			return
		}
		var _execLeafIdx *big.Int
		fill_err = tp.Fill(&_execLeafIdx)
		if fill_err != nil {
			return
		}
		var _partOffset *big.Int
		fill_err = tp.Fill(&_partOffset)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil || _ident == nil || _execLeafIdx == nil || _partOffset == nil {
			return
		}

		_FaultDisputeGame.AddLocalData(opts, _ident, _execLeafIdx, _partOffset)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactor_Attack__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactor
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _disputed [32]byte
		fill_err = tp.Fill(&_disputed)
		if fill_err != nil {
			return
		}
		var _parentIndex *big.Int
		fill_err = tp.Fill(&_parentIndex)
		if fill_err != nil {
			return
		}
		var _claim [32]byte
		fill_err = tp.Fill(&_claim)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil || _parentIndex == nil {
			return
		}

		_FaultDisputeGame.Attack(opts, _disputed, _parentIndex, _claim)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactor_ChallengeRootL2Block__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactor
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _outputRootProof TypesOutputRootProof
		fill_err = tp.Fill(&_outputRootProof)
		if fill_err != nil {
			return
		}
		var _headerRLP []byte
		fill_err = tp.Fill(&_headerRLP)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.ChallengeRootL2Block(opts, _outputRootProof, _headerRLP)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactor_ClaimCredit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactor
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _recipient common.Address
		fill_err = tp.Fill(&_recipient)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.ClaimCredit(opts, _recipient)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactor_Defend__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactor
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _disputed [32]byte
		fill_err = tp.Fill(&_disputed)
		if fill_err != nil {
			return
		}
		var _parentIndex *big.Int
		fill_err = tp.Fill(&_parentIndex)
		if fill_err != nil {
			return
		}
		var _claim [32]byte
		fill_err = tp.Fill(&_claim)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil || _parentIndex == nil {
			return
		}

		_FaultDisputeGame.Defend(opts, _disputed, _parentIndex, _claim)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactor
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.Initialize(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactor_Move__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactor
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _disputed [32]byte
		fill_err = tp.Fill(&_disputed)
		if fill_err != nil {
			return
		}
		var _challengeIndex *big.Int
		fill_err = tp.Fill(&_challengeIndex)
		if fill_err != nil {
			return
		}
		var _claim [32]byte
		fill_err = tp.Fill(&_claim)
		if fill_err != nil {
			return
		}
		var _isAttack bool
		fill_err = tp.Fill(&_isAttack)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil || _challengeIndex == nil {
			return
		}

		_FaultDisputeGame.Move(opts, _disputed, _challengeIndex, _claim, _isAttack)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactor_Resolve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactor
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.Resolve(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactor_ResolveClaim__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactor
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _claimIndex *big.Int
		fill_err = tp.Fill(&_claimIndex)
		if fill_err != nil {
			return
		}
		var _numToResolve *big.Int
		fill_err = tp.Fill(&_numToResolve)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil || _claimIndex == nil || _numToResolve == nil {
			return
		}

		_FaultDisputeGame.ResolveClaim(opts, _claimIndex, _numToResolve)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactor_Step__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactor
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _claimIndex *big.Int
		fill_err = tp.Fill(&_claimIndex)
		if fill_err != nil {
			return
		}
		var _isAttack bool
		fill_err = tp.Fill(&_isAttack)
		if fill_err != nil {
			return
		}
		var _stateData []byte
		fill_err = tp.Fill(&_stateData)
		if fill_err != nil {
			return
		}
		var _proof []byte
		fill_err = tp.Fill(&_proof)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil || _claimIndex == nil {
			return
		}

		_FaultDisputeGame.Step(opts, _claimIndex, _isAttack, _stateData, _proof)
	})
}

// skipping Fuzz_Nosy_FaultDisputeGameTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_FaultDisputeGameTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactorRaw
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || opts == nil {
			return
		}

		_FaultDisputeGame.Transfer(opts)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactorSession_AddLocalData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactorSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _ident *big.Int
		fill_err = tp.Fill(&_ident)
		if fill_err != nil {
			return
		}
		var _execLeafIdx *big.Int
		fill_err = tp.Fill(&_execLeafIdx)
		if fill_err != nil {
			return
		}
		var _partOffset *big.Int
		fill_err = tp.Fill(&_partOffset)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _ident == nil || _execLeafIdx == nil || _partOffset == nil {
			return
		}

		_FaultDisputeGame.AddLocalData(_ident, _execLeafIdx, _partOffset)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactorSession_Attack__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactorSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _disputed [32]byte
		fill_err = tp.Fill(&_disputed)
		if fill_err != nil {
			return
		}
		var _parentIndex *big.Int
		fill_err = tp.Fill(&_parentIndex)
		if fill_err != nil {
			return
		}
		var _claim [32]byte
		fill_err = tp.Fill(&_claim)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _parentIndex == nil {
			return
		}

		_FaultDisputeGame.Attack(_disputed, _parentIndex, _claim)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactorSession_ChallengeRootL2Block__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactorSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _outputRootProof TypesOutputRootProof
		fill_err = tp.Fill(&_outputRootProof)
		if fill_err != nil {
			return
		}
		var _headerRLP []byte
		fill_err = tp.Fill(&_headerRLP)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ChallengeRootL2Block(_outputRootProof, _headerRLP)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactorSession_ClaimCredit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactorSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _recipient common.Address
		fill_err = tp.Fill(&_recipient)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.ClaimCredit(_recipient)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactorSession_Defend__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactorSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _disputed [32]byte
		fill_err = tp.Fill(&_disputed)
		if fill_err != nil {
			return
		}
		var _parentIndex *big.Int
		fill_err = tp.Fill(&_parentIndex)
		if fill_err != nil {
			return
		}
		var _claim [32]byte
		fill_err = tp.Fill(&_claim)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _parentIndex == nil {
			return
		}

		_FaultDisputeGame.Defend(_disputed, _parentIndex, _claim)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactorSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Initialize()
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactorSession_Move__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactorSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _disputed [32]byte
		fill_err = tp.Fill(&_disputed)
		if fill_err != nil {
			return
		}
		var _challengeIndex *big.Int
		fill_err = tp.Fill(&_challengeIndex)
		if fill_err != nil {
			return
		}
		var _claim [32]byte
		fill_err = tp.Fill(&_claim)
		if fill_err != nil {
			return
		}
		var _isAttack bool
		fill_err = tp.Fill(&_isAttack)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _challengeIndex == nil {
			return
		}

		_FaultDisputeGame.Move(_disputed, _challengeIndex, _claim, _isAttack)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactorSession_Resolve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactorSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil {
			return
		}

		_FaultDisputeGame.Resolve()
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactorSession_ResolveClaim__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactorSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _claimIndex *big.Int
		fill_err = tp.Fill(&_claimIndex)
		if fill_err != nil {
			return
		}
		var _numToResolve *big.Int
		fill_err = tp.Fill(&_numToResolve)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _claimIndex == nil || _numToResolve == nil {
			return
		}

		_FaultDisputeGame.ResolveClaim(_claimIndex, _numToResolve)
	})
}

func Fuzz_Nosy_FaultDisputeGameTransactorSession_Step__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _FaultDisputeGame *FaultDisputeGameTransactorSession
		fill_err = tp.Fill(&_FaultDisputeGame)
		if fill_err != nil {
			return
		}
		var _claimIndex *big.Int
		fill_err = tp.Fill(&_claimIndex)
		if fill_err != nil {
			return
		}
		var _isAttack bool
		fill_err = tp.Fill(&_isAttack)
		if fill_err != nil {
			return
		}
		var _stateData []byte
		fill_err = tp.Fill(&_stateData)
		if fill_err != nil {
			return
		}
		var _proof []byte
		fill_err = tp.Fill(&_proof)
		if fill_err != nil {
			return
		}
		if _FaultDisputeGame == nil || _claimIndex == nil {
			return
		}

		_FaultDisputeGame.Step(_claimIndex, _isAttack, _stateData, _proof)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_BaseFee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.BaseFee(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_BaseFeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.BaseFeeScalar(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_BlobBaseFee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.BlobBaseFee(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_BlobBaseFeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.BlobBaseFeeScalar(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_DECIMALS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.DECIMALS(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.Decimals(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_GasPrice__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.GasPrice(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_GetL1Fee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.GetL1Fee(opts, _data)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_GetL1FeeUpperBound__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _unsignedTxSize *big.Int
		fill_err = tp.Fill(&_unsignedTxSize)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil || _unsignedTxSize == nil {
			return
		}

		_GasPriceOracle.GetL1FeeUpperBound(opts, _unsignedTxSize)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_GetL1GasUsed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.GetL1GasUsed(opts, _data)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_IsEcotone__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.IsEcotone(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_IsFjord__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.IsFjord(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_L1BaseFee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.L1BaseFee(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_Overhead__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.Overhead(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_Scalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.Scalar(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCaller
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.Version(opts)
	})
}

// skipping Fuzz_Nosy_GasPriceOracleCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_GasPriceOracleCallerSession_BaseFee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.BaseFee()
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_BaseFeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.BaseFeeScalar()
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_BlobBaseFee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.BlobBaseFee()
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_BlobBaseFeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.BlobBaseFeeScalar()
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_DECIMALS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.DECIMALS()
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.Decimals()
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_GasPrice__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.GasPrice()
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_GetL1Fee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.GetL1Fee(_data)
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_GetL1FeeUpperBound__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var _unsignedTxSize *big.Int
		fill_err = tp.Fill(&_unsignedTxSize)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || _unsignedTxSize == nil {
			return
		}

		_GasPriceOracle.GetL1FeeUpperBound(_unsignedTxSize)
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_GetL1GasUsed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.GetL1GasUsed(_data)
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_IsEcotone__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.IsEcotone()
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_IsFjord__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.IsFjord()
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_L1BaseFee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.L1BaseFee()
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_Overhead__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.Overhead()
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_Scalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.Scalar()
	})
}

func Fuzz_Nosy_GasPriceOracleCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleCallerSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.Version()
	})
}

// skipping Fuzz_Nosy_GasPriceOracleRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_GasPriceOracleRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_GasPriceOracleRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleRaw
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.Transfer(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleSession_BaseFee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.BaseFee()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_BaseFeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.BaseFeeScalar()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_BlobBaseFee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.BlobBaseFee()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_BlobBaseFeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.BlobBaseFeeScalar()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_DECIMALS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.DECIMALS()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.Decimals()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_GasPrice__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.GasPrice()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_GetL1Fee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.GetL1Fee(_data)
	})
}

func Fuzz_Nosy_GasPriceOracleSession_GetL1FeeUpperBound__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var _unsignedTxSize *big.Int
		fill_err = tp.Fill(&_unsignedTxSize)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || _unsignedTxSize == nil {
			return
		}

		_GasPriceOracle.GetL1FeeUpperBound(_unsignedTxSize)
	})
}

func Fuzz_Nosy_GasPriceOracleSession_GetL1GasUsed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.GetL1GasUsed(_data)
	})
}

func Fuzz_Nosy_GasPriceOracleSession_IsEcotone__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.IsEcotone()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_IsFjord__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.IsFjord()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_L1BaseFee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.L1BaseFee()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_Overhead__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.Overhead()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_Scalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.Scalar()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_SetEcotone__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.SetEcotone()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_SetFjord__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.SetFjord()
	})
}

func Fuzz_Nosy_GasPriceOracleSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.Version()
	})
}

func Fuzz_Nosy_GasPriceOracleTransactor_SetEcotone__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleTransactor
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.SetEcotone(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleTransactor_SetFjord__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleTransactor
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.SetFjord(opts)
	})
}

// skipping Fuzz_Nosy_GasPriceOracleTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_GasPriceOracleTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleTransactorRaw
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil || opts == nil {
			return
		}

		_GasPriceOracle.Transfer(opts)
	})
}

func Fuzz_Nosy_GasPriceOracleTransactorSession_SetEcotone__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleTransactorSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.SetEcotone()
	})
}

func Fuzz_Nosy_GasPriceOracleTransactorSession_SetFjord__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GasPriceOracle *GasPriceOracleTransactorSession
		fill_err = tp.Fill(&_GasPriceOracle)
		if fill_err != nil {
			return
		}
		if _GasPriceOracle == nil {
			return
		}

		_GasPriceOracle.SetFjord()
	})
}

func Fuzz_Nosy_GovernanceTokenApprovalIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_GovernanceTokenApprovalIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_GovernanceTokenApprovalIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.Allowance(opts, owner, spender)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.BalanceOf(opts, account)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_Checkpoints__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		var pos uint32
		fill_err = tp.Fill(&pos)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.Checkpoints(opts, account, pos)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_DOMAINSEPARATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.DOMAINSEPARATOR(opts)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.Decimals(opts)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_Delegates__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.Delegates(opts, account)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_GetPastTotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var blockNumber *big.Int
		fill_err = tp.Fill(&blockNumber)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil || blockNumber == nil {
			return
		}

		_GovernanceToken.GetPastTotalSupply(opts, blockNumber)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_GetPastVotes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		var blockNumber *big.Int
		fill_err = tp.Fill(&blockNumber)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil || blockNumber == nil {
			return
		}

		_GovernanceToken.GetPastVotes(opts, account, blockNumber)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_GetVotes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.GetVotes(opts, account)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.Name(opts)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_Nonces__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.Nonces(opts, owner)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_NumCheckpoints__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.NumCheckpoints(opts, account)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.Owner(opts)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.Symbol(opts)
	})
}

func Fuzz_Nosy_GovernanceTokenCaller_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCaller
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.TotalSupply(opts)
	})
}

// skipping Fuzz_Nosy_GovernanceTokenCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_GovernanceTokenCallerSession_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Allowance(owner, spender)
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.BalanceOf(account)
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_Checkpoints__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		var pos uint32
		fill_err = tp.Fill(&pos)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Checkpoints(account, pos)
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_DOMAINSEPARATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.DOMAINSEPARATOR()
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Decimals()
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_Delegates__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Delegates(account)
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_GetPastTotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var blockNumber *big.Int
		fill_err = tp.Fill(&blockNumber)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || blockNumber == nil {
			return
		}

		_GovernanceToken.GetPastTotalSupply(blockNumber)
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_GetPastVotes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		var blockNumber *big.Int
		fill_err = tp.Fill(&blockNumber)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || blockNumber == nil {
			return
		}

		_GovernanceToken.GetPastVotes(account, blockNumber)
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_GetVotes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.GetVotes(account)
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Name()
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_Nonces__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Nonces(owner)
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_NumCheckpoints__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.NumCheckpoints(account)
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Owner()
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Symbol()
	})
}

func Fuzz_Nosy_GovernanceTokenCallerSession_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenCallerSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.TotalSupply()
	})
}

func Fuzz_Nosy_GovernanceTokenDelegateChangedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenDelegateChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_GovernanceTokenDelegateChangedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenDelegateChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_GovernanceTokenDelegateChangedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenDelegateChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_GovernanceTokenDelegateVotesChangedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenDelegateVotesChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_GovernanceTokenDelegateVotesChangedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenDelegateVotesChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_GovernanceTokenDelegateVotesChangedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenDelegateVotesChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_GovernanceTokenFilterer_FilterApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenFilterer
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner []common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender []common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.FilterApproval(opts, owner, spender)
	})
}

func Fuzz_Nosy_GovernanceTokenFilterer_FilterDelegateChanged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenFilterer
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var delegator []common.Address
		fill_err = tp.Fill(&delegator)
		if fill_err != nil {
			return
		}
		var fromDelegate []common.Address
		fill_err = tp.Fill(&fromDelegate)
		if fill_err != nil {
			return
		}
		var toDelegate []common.Address
		fill_err = tp.Fill(&toDelegate)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.FilterDelegateChanged(opts, delegator, fromDelegate, toDelegate)
	})
}

func Fuzz_Nosy_GovernanceTokenFilterer_FilterDelegateVotesChanged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenFilterer
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var delegate []common.Address
		fill_err = tp.Fill(&delegate)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.FilterDelegateVotesChanged(opts, delegate)
	})
}

func Fuzz_Nosy_GovernanceTokenFilterer_FilterOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenFilterer
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var previousOwner []common.Address
		fill_err = tp.Fill(&previousOwner)
		if fill_err != nil {
			return
		}
		var newOwner []common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.FilterOwnershipTransferred(opts, previousOwner, newOwner)
	})
}

func Fuzz_Nosy_GovernanceTokenFilterer_FilterTransfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenFilterer
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to []common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.FilterTransfer(opts, from, to)
	})
}

func Fuzz_Nosy_GovernanceTokenFilterer_ParseApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenFilterer
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.ParseApproval(log)
	})
}

func Fuzz_Nosy_GovernanceTokenFilterer_ParseDelegateChanged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenFilterer
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.ParseDelegateChanged(log)
	})
}

func Fuzz_Nosy_GovernanceTokenFilterer_ParseDelegateVotesChanged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenFilterer
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.ParseDelegateVotesChanged(log)
	})
}

func Fuzz_Nosy_GovernanceTokenFilterer_ParseOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenFilterer
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.ParseOwnershipTransferred(log)
	})
}

func Fuzz_Nosy_GovernanceTokenFilterer_ParseTransfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenFilterer
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.ParseTransfer(log)
	})
}

// skipping Fuzz_Nosy_GovernanceTokenFilterer_WatchApproval__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.GovernanceTokenApproval

// skipping Fuzz_Nosy_GovernanceTokenFilterer_WatchDelegateChanged__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.GovernanceTokenDelegateChanged

// skipping Fuzz_Nosy_GovernanceTokenFilterer_WatchDelegateVotesChanged__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.GovernanceTokenDelegateVotesChanged

// skipping Fuzz_Nosy_GovernanceTokenFilterer_WatchOwnershipTransferred__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.GovernanceTokenOwnershipTransferred

// skipping Fuzz_Nosy_GovernanceTokenFilterer_WatchTransfer__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.GovernanceTokenTransfer

func Fuzz_Nosy_GovernanceTokenOwnershipTransferredIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_GovernanceTokenOwnershipTransferredIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_GovernanceTokenOwnershipTransferredIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_GovernanceTokenRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_GovernanceTokenRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_GovernanceTokenRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenRaw
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.Transfer(opts)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Allowance(owner, spender)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || amount == nil {
			return
		}

		_GovernanceToken.Approve(spender, amount)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.BalanceOf(account)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Burn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || amount == nil {
			return
		}

		_GovernanceToken.Burn(amount)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_BurnFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || amount == nil {
			return
		}

		_GovernanceToken.BurnFrom(account, amount)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Checkpoints__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		var pos uint32
		fill_err = tp.Fill(&pos)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Checkpoints(account, pos)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_DOMAINSEPARATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.DOMAINSEPARATOR()
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Decimals()
	})
}

func Fuzz_Nosy_GovernanceTokenSession_DecreaseAllowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var subtractedValue *big.Int
		fill_err = tp.Fill(&subtractedValue)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || subtractedValue == nil {
			return
		}

		_GovernanceToken.DecreaseAllowance(spender, subtractedValue)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Delegate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var delegatee common.Address
		fill_err = tp.Fill(&delegatee)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Delegate(delegatee)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_DelegateBySig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var delegatee common.Address
		fill_err = tp.Fill(&delegatee)
		if fill_err != nil {
			return
		}
		var nonce *big.Int
		fill_err = tp.Fill(&nonce)
		if fill_err != nil {
			return
		}
		var expiry *big.Int
		fill_err = tp.Fill(&expiry)
		if fill_err != nil {
			return
		}
		var v uint8
		fill_err = tp.Fill(&v)
		if fill_err != nil {
			return
		}
		var r [32]byte
		fill_err = tp.Fill(&r)
		if fill_err != nil {
			return
		}
		var s [32]byte
		fill_err = tp.Fill(&s)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || nonce == nil || expiry == nil {
			return
		}

		_GovernanceToken.DelegateBySig(delegatee, nonce, expiry, v, r, s)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Delegates__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Delegates(account)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_GetPastTotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var blockNumber *big.Int
		fill_err = tp.Fill(&blockNumber)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || blockNumber == nil {
			return
		}

		_GovernanceToken.GetPastTotalSupply(blockNumber)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_GetPastVotes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		var blockNumber *big.Int
		fill_err = tp.Fill(&blockNumber)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || blockNumber == nil {
			return
		}

		_GovernanceToken.GetPastVotes(account, blockNumber)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_GetVotes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.GetVotes(account)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_IncreaseAllowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var addedValue *big.Int
		fill_err = tp.Fill(&addedValue)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || addedValue == nil {
			return
		}

		_GovernanceToken.IncreaseAllowance(spender, addedValue)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Mint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var _account common.Address
		fill_err = tp.Fill(&_account)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || _amount == nil {
			return
		}

		_GovernanceToken.Mint(_account, _amount)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Name()
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Nonces__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Nonces(owner)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_NumCheckpoints__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.NumCheckpoints(account)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Owner()
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Permit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var deadline *big.Int
		fill_err = tp.Fill(&deadline)
		if fill_err != nil {
			return
		}
		var v uint8
		fill_err = tp.Fill(&v)
		if fill_err != nil {
			return
		}
		var r [32]byte
		fill_err = tp.Fill(&r)
		if fill_err != nil {
			return
		}
		var s [32]byte
		fill_err = tp.Fill(&s)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || value == nil || deadline == nil {
			return
		}

		_GovernanceToken.Permit(owner, spender, value, deadline, v, r, s)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.RenounceOwnership()
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Symbol()
	})
}

func Fuzz_Nosy_GovernanceTokenSession_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.TotalSupply()
	})
}

func Fuzz_Nosy_GovernanceTokenSession_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || amount == nil {
			return
		}

		_GovernanceToken.Transfer(to, amount)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var from common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || amount == nil {
			return
		}

		_GovernanceToken.TransferFrom(from, to, amount)
	})
}

func Fuzz_Nosy_GovernanceTokenSession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactor_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactor
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil || amount == nil {
			return
		}

		_GovernanceToken.Approve(opts, spender, amount)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactor_Burn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactor
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil || amount == nil {
			return
		}

		_GovernanceToken.Burn(opts, amount)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactor_BurnFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactor
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil || amount == nil {
			return
		}

		_GovernanceToken.BurnFrom(opts, account, amount)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactor_DecreaseAllowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactor
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var subtractedValue *big.Int
		fill_err = tp.Fill(&subtractedValue)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil || subtractedValue == nil {
			return
		}

		_GovernanceToken.DecreaseAllowance(opts, spender, subtractedValue)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactor_Delegate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactor
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var delegatee common.Address
		fill_err = tp.Fill(&delegatee)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.Delegate(opts, delegatee)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactor_DelegateBySig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactor
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var delegatee common.Address
		fill_err = tp.Fill(&delegatee)
		if fill_err != nil {
			return
		}
		var nonce *big.Int
		fill_err = tp.Fill(&nonce)
		if fill_err != nil {
			return
		}
		var expiry *big.Int
		fill_err = tp.Fill(&expiry)
		if fill_err != nil {
			return
		}
		var v uint8
		fill_err = tp.Fill(&v)
		if fill_err != nil {
			return
		}
		var r [32]byte
		fill_err = tp.Fill(&r)
		if fill_err != nil {
			return
		}
		var s [32]byte
		fill_err = tp.Fill(&s)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil || nonce == nil || expiry == nil {
			return
		}

		_GovernanceToken.DelegateBySig(opts, delegatee, nonce, expiry, v, r, s)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactor_IncreaseAllowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactor
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var addedValue *big.Int
		fill_err = tp.Fill(&addedValue)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil || addedValue == nil {
			return
		}

		_GovernanceToken.IncreaseAllowance(opts, spender, addedValue)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactor_Mint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactor
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _account common.Address
		fill_err = tp.Fill(&_account)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil || _amount == nil {
			return
		}

		_GovernanceToken.Mint(opts, _account, _amount)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactor_Permit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactor
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var deadline *big.Int
		fill_err = tp.Fill(&deadline)
		if fill_err != nil {
			return
		}
		var v uint8
		fill_err = tp.Fill(&v)
		if fill_err != nil {
			return
		}
		var r [32]byte
		fill_err = tp.Fill(&r)
		if fill_err != nil {
			return
		}
		var s [32]byte
		fill_err = tp.Fill(&s)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil || value == nil || deadline == nil {
			return
		}

		_GovernanceToken.Permit(opts, owner, spender, value, deadline, v, r, s)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactor_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactor
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.RenounceOwnership(opts)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactor_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactor
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil || amount == nil {
			return
		}

		_GovernanceToken.Transfer(opts, to, amount)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactor_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactor
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil || amount == nil {
			return
		}

		_GovernanceToken.TransferFrom(opts, from, to, amount)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactor_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactor
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.TransferOwnership(opts, newOwner)
	})
}

// skipping Fuzz_Nosy_GovernanceTokenTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_GovernanceTokenTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorRaw
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || opts == nil {
			return
		}

		_GovernanceToken.Transfer(opts)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactorSession_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || amount == nil {
			return
		}

		_GovernanceToken.Approve(spender, amount)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactorSession_Burn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || amount == nil {
			return
		}

		_GovernanceToken.Burn(amount)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactorSession_BurnFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || amount == nil {
			return
		}

		_GovernanceToken.BurnFrom(account, amount)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactorSession_DecreaseAllowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var subtractedValue *big.Int
		fill_err = tp.Fill(&subtractedValue)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || subtractedValue == nil {
			return
		}

		_GovernanceToken.DecreaseAllowance(spender, subtractedValue)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactorSession_Delegate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var delegatee common.Address
		fill_err = tp.Fill(&delegatee)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.Delegate(delegatee)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactorSession_DelegateBySig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var delegatee common.Address
		fill_err = tp.Fill(&delegatee)
		if fill_err != nil {
			return
		}
		var nonce *big.Int
		fill_err = tp.Fill(&nonce)
		if fill_err != nil {
			return
		}
		var expiry *big.Int
		fill_err = tp.Fill(&expiry)
		if fill_err != nil {
			return
		}
		var v uint8
		fill_err = tp.Fill(&v)
		if fill_err != nil {
			return
		}
		var r [32]byte
		fill_err = tp.Fill(&r)
		if fill_err != nil {
			return
		}
		var s [32]byte
		fill_err = tp.Fill(&s)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || nonce == nil || expiry == nil {
			return
		}

		_GovernanceToken.DelegateBySig(delegatee, nonce, expiry, v, r, s)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactorSession_IncreaseAllowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var addedValue *big.Int
		fill_err = tp.Fill(&addedValue)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || addedValue == nil {
			return
		}

		_GovernanceToken.IncreaseAllowance(spender, addedValue)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactorSession_Mint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var _account common.Address
		fill_err = tp.Fill(&_account)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || _amount == nil {
			return
		}

		_GovernanceToken.Mint(_account, _amount)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactorSession_Permit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var deadline *big.Int
		fill_err = tp.Fill(&deadline)
		if fill_err != nil {
			return
		}
		var v uint8
		fill_err = tp.Fill(&v)
		if fill_err != nil {
			return
		}
		var r [32]byte
		fill_err = tp.Fill(&r)
		if fill_err != nil {
			return
		}
		var s [32]byte
		fill_err = tp.Fill(&s)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || value == nil || deadline == nil {
			return
		}

		_GovernanceToken.Permit(owner, spender, value, deadline, v, r, s)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactorSession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.RenounceOwnership()
	})
}

func Fuzz_Nosy_GovernanceTokenTransactorSession_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || amount == nil {
			return
		}

		_GovernanceToken.Transfer(to, amount)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactorSession_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var from common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil || amount == nil {
			return
		}

		_GovernanceToken.TransferFrom(from, to, amount)
	})
}

func Fuzz_Nosy_GovernanceTokenTransactorSession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _GovernanceToken *GovernanceTokenTransactorSession
		fill_err = tp.Fill(&_GovernanceToken)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _GovernanceToken == nil {
			return
		}

		_GovernanceToken.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_GovernanceTokenTransferIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenTransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_GovernanceTokenTransferIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenTransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_GovernanceTokenTransferIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *GovernanceTokenTransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_ISemverCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ISemver *ISemverCaller
		fill_err = tp.Fill(&_ISemver)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ISemver == nil || opts == nil {
			return
		}

		_ISemver.Version(opts)
	})
}

// skipping Fuzz_Nosy_ISemverCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_ISemverCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ISemver *ISemverCallerSession
		fill_err = tp.Fill(&_ISemver)
		if fill_err != nil {
			return
		}
		if _ISemver == nil {
			return
		}

		_ISemver.Version()
	})
}

// skipping Fuzz_Nosy_ISemverRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_ISemverRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_ISemverRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ISemver *ISemverRaw
		fill_err = tp.Fill(&_ISemver)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ISemver == nil || opts == nil {
			return
		}

		_ISemver.Transfer(opts)
	})
}

func Fuzz_Nosy_ISemverSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ISemver *ISemverSession
		fill_err = tp.Fill(&_ISemver)
		if fill_err != nil {
			return
		}
		if _ISemver == nil {
			return
		}

		_ISemver.Version()
	})
}

// skipping Fuzz_Nosy_ISemverTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_ISemverTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ISemver *ISemverTransactorRaw
		fill_err = tp.Fill(&_ISemver)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ISemver == nil || opts == nil {
			return
		}

		_ISemver.Transfer(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_BaseFeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.BaseFeeScalar(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_Basefee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.Basefee(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_BatcherHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.BatcherHash(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_BlobBaseFee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.BlobBaseFee(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_BlobBaseFeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.BlobBaseFeeScalar(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_DEPOSITORACCOUNT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.DEPOSITORACCOUNT(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_GasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.GasPayingToken(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_GasPayingTokenName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.GasPayingTokenName(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_GasPayingTokenSymbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.GasPayingTokenSymbol(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_Hash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.Hash(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_IsCustomGasToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.IsCustomGasToken(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_L1FeeOverhead__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.L1FeeOverhead(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_L1FeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.L1FeeScalar(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_Number__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.Number(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_SequenceNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.SequenceNumber(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_Timestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.Timestamp(opts)
	})
}

func Fuzz_Nosy_L1BlockCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCaller
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.Version(opts)
	})
}

// skipping Fuzz_Nosy_L1BlockCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_L1BlockCallerSession_BaseFeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.BaseFeeScalar()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_Basefee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.Basefee()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_BatcherHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.BatcherHash()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_BlobBaseFee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.BlobBaseFee()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_BlobBaseFeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.BlobBaseFeeScalar()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_DEPOSITORACCOUNT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.DEPOSITORACCOUNT()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_GasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.GasPayingToken()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_GasPayingTokenName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.GasPayingTokenName()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_GasPayingTokenSymbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.GasPayingTokenSymbol()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_Hash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.Hash()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_IsCustomGasToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.IsCustomGasToken()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_L1FeeOverhead__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.L1FeeOverhead()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_L1FeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.L1FeeScalar()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_Number__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.Number()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_SequenceNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.SequenceNumber()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_Timestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.Timestamp()
	})
}

func Fuzz_Nosy_L1BlockCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockCallerSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.Version()
	})
}

func Fuzz_Nosy_L1BlockFilterer_FilterGasPayingTokenSet__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockFilterer
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var token []common.Address
		fill_err = tp.Fill(&token)
		if fill_err != nil {
			return
		}
		var decimals []uint8
		fill_err = tp.Fill(&decimals)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.FilterGasPayingTokenSet(opts, token, decimals)
	})
}

func Fuzz_Nosy_L1BlockFilterer_ParseGasPayingTokenSet__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockFilterer
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.ParseGasPayingTokenSet(log)
	})
}

// skipping Fuzz_Nosy_L1BlockFilterer_WatchGasPayingTokenSet__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1BlockGasPayingTokenSet

func Fuzz_Nosy_L1BlockGasPayingTokenSetIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1BlockGasPayingTokenSetIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1BlockGasPayingTokenSetIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1BlockGasPayingTokenSetIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1BlockGasPayingTokenSetIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1BlockGasPayingTokenSetIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1BlockNumberCaller_GetL1BlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberCaller
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil || opts == nil {
			return
		}

		_L1BlockNumber.GetL1BlockNumber(opts)
	})
}

func Fuzz_Nosy_L1BlockNumberCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberCaller
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil || opts == nil {
			return
		}

		_L1BlockNumber.Version(opts)
	})
}

// skipping Fuzz_Nosy_L1BlockNumberCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_L1BlockNumberCallerSession_GetL1BlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberCallerSession
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil {
			return
		}

		_L1BlockNumber.GetL1BlockNumber()
	})
}

func Fuzz_Nosy_L1BlockNumberCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberCallerSession
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil {
			return
		}

		_L1BlockNumber.Version()
	})
}

// skipping Fuzz_Nosy_L1BlockNumberRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_L1BlockNumberRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L1BlockNumberRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberRaw
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil || opts == nil {
			return
		}

		_L1BlockNumber.Transfer(opts)
	})
}

func Fuzz_Nosy_L1BlockNumberSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberSession
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil {
			return
		}

		_L1BlockNumber.Fallback(calldata)
	})
}

func Fuzz_Nosy_L1BlockNumberSession_GetL1BlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberSession
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil {
			return
		}

		_L1BlockNumber.GetL1BlockNumber()
	})
}

func Fuzz_Nosy_L1BlockNumberSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberSession
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil {
			return
		}

		_L1BlockNumber.Receive()
	})
}

func Fuzz_Nosy_L1BlockNumberSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberSession
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil {
			return
		}

		_L1BlockNumber.Version()
	})
}

func Fuzz_Nosy_L1BlockNumberTransactor_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberTransactor
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil || opts == nil {
			return
		}

		_L1BlockNumber.Fallback(opts, calldata)
	})
}

func Fuzz_Nosy_L1BlockNumberTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberTransactor
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil || opts == nil {
			return
		}

		_L1BlockNumber.Receive(opts)
	})
}

// skipping Fuzz_Nosy_L1BlockNumberTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L1BlockNumberTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberTransactorRaw
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil || opts == nil {
			return
		}

		_L1BlockNumber.Transfer(opts)
	})
}

func Fuzz_Nosy_L1BlockNumberTransactorSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberTransactorSession
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil {
			return
		}

		_L1BlockNumber.Fallback(calldata)
	})
}

func Fuzz_Nosy_L1BlockNumberTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1BlockNumber *L1BlockNumberTransactorSession
		fill_err = tp.Fill(&_L1BlockNumber)
		if fill_err != nil {
			return
		}
		if _L1BlockNumber == nil {
			return
		}

		_L1BlockNumber.Receive()
	})
}

// skipping Fuzz_Nosy_L1BlockRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_L1BlockRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L1BlockRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockRaw
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.Transfer(opts)
	})
}

func Fuzz_Nosy_L1BlockSession_BaseFeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.BaseFeeScalar()
	})
}

func Fuzz_Nosy_L1BlockSession_Basefee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.Basefee()
	})
}

func Fuzz_Nosy_L1BlockSession_BatcherHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.BatcherHash()
	})
}

func Fuzz_Nosy_L1BlockSession_BlobBaseFee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.BlobBaseFee()
	})
}

func Fuzz_Nosy_L1BlockSession_BlobBaseFeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.BlobBaseFeeScalar()
	})
}

func Fuzz_Nosy_L1BlockSession_DEPOSITORACCOUNT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.DEPOSITORACCOUNT()
	})
}

func Fuzz_Nosy_L1BlockSession_GasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.GasPayingToken()
	})
}

func Fuzz_Nosy_L1BlockSession_GasPayingTokenName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.GasPayingTokenName()
	})
}

func Fuzz_Nosy_L1BlockSession_GasPayingTokenSymbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.GasPayingTokenSymbol()
	})
}

func Fuzz_Nosy_L1BlockSession_Hash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.Hash()
	})
}

func Fuzz_Nosy_L1BlockSession_IsCustomGasToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.IsCustomGasToken()
	})
}

func Fuzz_Nosy_L1BlockSession_L1FeeOverhead__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.L1FeeOverhead()
	})
}

func Fuzz_Nosy_L1BlockSession_L1FeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.L1FeeScalar()
	})
}

func Fuzz_Nosy_L1BlockSession_Number__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.Number()
	})
}

func Fuzz_Nosy_L1BlockSession_SequenceNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.SequenceNumber()
	})
}

func Fuzz_Nosy_L1BlockSession_SetGasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var _token common.Address
		fill_err = tp.Fill(&_token)
		if fill_err != nil {
			return
		}
		var _decimals uint8
		fill_err = tp.Fill(&_decimals)
		if fill_err != nil {
			return
		}
		var _name [32]byte
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol [32]byte
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.SetGasPayingToken(_token, _decimals, _name, _symbol)
	})
}

func Fuzz_Nosy_L1BlockSession_SetL1BlockValues__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var _number uint64
		fill_err = tp.Fill(&_number)
		if fill_err != nil {
			return
		}
		var _timestamp uint64
		fill_err = tp.Fill(&_timestamp)
		if fill_err != nil {
			return
		}
		var _basefee *big.Int
		fill_err = tp.Fill(&_basefee)
		if fill_err != nil {
			return
		}
		var _hash [32]byte
		fill_err = tp.Fill(&_hash)
		if fill_err != nil {
			return
		}
		var _sequenceNumber uint64
		fill_err = tp.Fill(&_sequenceNumber)
		if fill_err != nil {
			return
		}
		var _batcherHash [32]byte
		fill_err = tp.Fill(&_batcherHash)
		if fill_err != nil {
			return
		}
		var _l1FeeOverhead *big.Int
		fill_err = tp.Fill(&_l1FeeOverhead)
		if fill_err != nil {
			return
		}
		var _l1FeeScalar *big.Int
		fill_err = tp.Fill(&_l1FeeScalar)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || _basefee == nil || _l1FeeOverhead == nil || _l1FeeScalar == nil {
			return
		}

		_L1Block.SetL1BlockValues(_number, _timestamp, _basefee, _hash, _sequenceNumber, _batcherHash, _l1FeeOverhead, _l1FeeScalar)
	})
}

func Fuzz_Nosy_L1BlockSession_SetL1BlockValuesEcotone__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.SetL1BlockValuesEcotone()
	})
}

func Fuzz_Nosy_L1BlockSession_Timestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.Timestamp()
	})
}

func Fuzz_Nosy_L1BlockSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.Version()
	})
}

func Fuzz_Nosy_L1BlockTransactor_SetGasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockTransactor
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _token common.Address
		fill_err = tp.Fill(&_token)
		if fill_err != nil {
			return
		}
		var _decimals uint8
		fill_err = tp.Fill(&_decimals)
		if fill_err != nil {
			return
		}
		var _name [32]byte
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol [32]byte
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.SetGasPayingToken(opts, _token, _decimals, _name, _symbol)
	})
}

func Fuzz_Nosy_L1BlockTransactor_SetL1BlockValues__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockTransactor
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _number uint64
		fill_err = tp.Fill(&_number)
		if fill_err != nil {
			return
		}
		var _timestamp uint64
		fill_err = tp.Fill(&_timestamp)
		if fill_err != nil {
			return
		}
		var _basefee *big.Int
		fill_err = tp.Fill(&_basefee)
		if fill_err != nil {
			return
		}
		var _hash [32]byte
		fill_err = tp.Fill(&_hash)
		if fill_err != nil {
			return
		}
		var _sequenceNumber uint64
		fill_err = tp.Fill(&_sequenceNumber)
		if fill_err != nil {
			return
		}
		var _batcherHash [32]byte
		fill_err = tp.Fill(&_batcherHash)
		if fill_err != nil {
			return
		}
		var _l1FeeOverhead *big.Int
		fill_err = tp.Fill(&_l1FeeOverhead)
		if fill_err != nil {
			return
		}
		var _l1FeeScalar *big.Int
		fill_err = tp.Fill(&_l1FeeScalar)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil || _basefee == nil || _l1FeeOverhead == nil || _l1FeeScalar == nil {
			return
		}

		_L1Block.SetL1BlockValues(opts, _number, _timestamp, _basefee, _hash, _sequenceNumber, _batcherHash, _l1FeeOverhead, _l1FeeScalar)
	})
}

func Fuzz_Nosy_L1BlockTransactor_SetL1BlockValuesEcotone__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockTransactor
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.SetL1BlockValuesEcotone(opts)
	})
}

// skipping Fuzz_Nosy_L1BlockTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L1BlockTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockTransactorRaw
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || opts == nil {
			return
		}

		_L1Block.Transfer(opts)
	})
}

func Fuzz_Nosy_L1BlockTransactorSession_SetGasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockTransactorSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var _token common.Address
		fill_err = tp.Fill(&_token)
		if fill_err != nil {
			return
		}
		var _decimals uint8
		fill_err = tp.Fill(&_decimals)
		if fill_err != nil {
			return
		}
		var _name [32]byte
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol [32]byte
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.SetGasPayingToken(_token, _decimals, _name, _symbol)
	})
}

func Fuzz_Nosy_L1BlockTransactorSession_SetL1BlockValues__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockTransactorSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		var _number uint64
		fill_err = tp.Fill(&_number)
		if fill_err != nil {
			return
		}
		var _timestamp uint64
		fill_err = tp.Fill(&_timestamp)
		if fill_err != nil {
			return
		}
		var _basefee *big.Int
		fill_err = tp.Fill(&_basefee)
		if fill_err != nil {
			return
		}
		var _hash [32]byte
		fill_err = tp.Fill(&_hash)
		if fill_err != nil {
			return
		}
		var _sequenceNumber uint64
		fill_err = tp.Fill(&_sequenceNumber)
		if fill_err != nil {
			return
		}
		var _batcherHash [32]byte
		fill_err = tp.Fill(&_batcherHash)
		if fill_err != nil {
			return
		}
		var _l1FeeOverhead *big.Int
		fill_err = tp.Fill(&_l1FeeOverhead)
		if fill_err != nil {
			return
		}
		var _l1FeeScalar *big.Int
		fill_err = tp.Fill(&_l1FeeScalar)
		if fill_err != nil {
			return
		}
		if _L1Block == nil || _basefee == nil || _l1FeeOverhead == nil || _l1FeeScalar == nil {
			return
		}

		_L1Block.SetL1BlockValues(_number, _timestamp, _basefee, _hash, _sequenceNumber, _batcherHash, _l1FeeOverhead, _l1FeeScalar)
	})
}

func Fuzz_Nosy_L1BlockTransactorSession_SetL1BlockValuesEcotone__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1Block *L1BlockTransactorSession
		fill_err = tp.Fill(&_L1Block)
		if fill_err != nil {
			return
		}
		if _L1Block == nil {
			return
		}

		_L1Block.SetL1BlockValuesEcotone()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_BaseGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.BaseGas(opts, _message, _minGasLimit)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_FailedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.FailedMessages(opts, arg0)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_MESSAGEVERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.MESSAGEVERSION(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_MINGASCALLDATAOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.MINGASCALLDATAOVERHEAD(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_MINGASDYNAMICOVERHEADDENOMINATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.MINGASDYNAMICOVERHEADDENOMINATOR(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_MINGASDYNAMICOVERHEADNUMERATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.MINGASDYNAMICOVERHEADNUMERATOR(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_MessageNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.MessageNonce(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_OTHERMESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.OTHERMESSENGER(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_OtherMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.OtherMessenger(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_PORTAL__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.PORTAL(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.Paused(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_Portal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.Portal(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_RELAYCALLOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.RELAYCALLOVERHEAD(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_RELAYCONSTANTOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.RELAYCONSTANTOVERHEAD(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_RELAYGASCHECKBUFFER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.RELAYGASCHECKBUFFER(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_RELAYRESERVEDGAS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.RELAYRESERVEDGAS(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_SuccessfulMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.SuccessfulMessages(opts, arg0)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_SuperchainConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.SuperchainConfig(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_SystemConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.SystemConfig(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.Version(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCaller_XDomainMessageSender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.XDomainMessageSender(opts)
	})
}

// skipping Fuzz_Nosy_L1CrossDomainMessengerCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_BaseGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.BaseGas(_message, _minGasLimit)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_FailedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.FailedMessages(arg0)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_MESSAGEVERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.MESSAGEVERSION()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_MINGASCALLDATAOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.MINGASCALLDATAOVERHEAD()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_MINGASDYNAMICOVERHEADDENOMINATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.MINGASDYNAMICOVERHEADDENOMINATOR()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_MINGASDYNAMICOVERHEADNUMERATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.MINGASDYNAMICOVERHEADNUMERATOR()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_MessageNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.MessageNonce()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_OTHERMESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.OTHERMESSENGER()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_OtherMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.OtherMessenger()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_PORTAL__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.PORTAL()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.Paused()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_Portal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.Portal()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_RELAYCALLOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.RELAYCALLOVERHEAD()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_RELAYCONSTANTOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.RELAYCONSTANTOVERHEAD()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_RELAYGASCHECKBUFFER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.RELAYGASCHECKBUFFER()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_RELAYRESERVEDGAS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.RELAYRESERVEDGAS()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_SuccessfulMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.SuccessfulMessages(arg0)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_SuperchainConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.SuperchainConfig()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_SystemConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.SystemConfig()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.Version()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerCallerSession_XDomainMessageSender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.XDomainMessageSender()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerFailedRelayedMessageIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerFailedRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerFailedRelayedMessageIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerFailedRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerFailedRelayedMessageIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerFailedRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerFilterer_FilterFailedRelayedMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var msgHash [][32]byte
		fill_err = tp.Fill(&msgHash)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.FilterFailedRelayedMessage(opts, msgHash)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerFilterer_FilterRelayedMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var msgHash [][32]byte
		fill_err = tp.Fill(&msgHash)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.FilterRelayedMessage(opts, msgHash)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerFilterer_FilterSentMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var t3 []common.Address
		fill_err = tp.Fill(&t3)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.FilterSentMessage(opts, t3)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerFilterer_FilterSentMessageExtension1__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var sender []common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.FilterSentMessageExtension1(opts, sender)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerFilterer_ParseFailedRelayedMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.ParseFailedRelayedMessage(log)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.ParseInitialized(log)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerFilterer_ParseRelayedMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.ParseRelayedMessage(log)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerFilterer_ParseSentMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.ParseSentMessage(log)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerFilterer_ParseSentMessageExtension1__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.ParseSentMessageExtension1(log)
	})
}

// skipping Fuzz_Nosy_L1CrossDomainMessengerFilterer_WatchFailedRelayedMessage__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1CrossDomainMessengerFailedRelayedMessage

// skipping Fuzz_Nosy_L1CrossDomainMessengerFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1CrossDomainMessengerInitialized

// skipping Fuzz_Nosy_L1CrossDomainMessengerFilterer_WatchRelayedMessage__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1CrossDomainMessengerRelayedMessage

// skipping Fuzz_Nosy_L1CrossDomainMessengerFilterer_WatchSentMessage__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1CrossDomainMessengerSentMessage

// skipping Fuzz_Nosy_L1CrossDomainMessengerFilterer_WatchSentMessageExtension1__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1CrossDomainMessengerSentMessageExtension1

func Fuzz_Nosy_L1CrossDomainMessengerInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_L1CrossDomainMessengerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_L1CrossDomainMessengerRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L1CrossDomainMessengerRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerRaw
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.Transfer(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerRelayedMessageIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerRelayedMessageIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerRelayedMessageIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSentMessageExtension1Iterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerSentMessageExtension1Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSentMessageExtension1Iterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerSentMessageExtension1Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSentMessageExtension1Iterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerSentMessageExtension1Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSentMessageIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerSentMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSentMessageIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerSentMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSentMessageIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1CrossDomainMessengerSentMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_BaseGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.BaseGas(_message, _minGasLimit)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_FailedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.FailedMessages(arg0)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _superchainConfig common.Address
		fill_err = tp.Fill(&_superchainConfig)
		if fill_err != nil {
			return
		}
		var _portal common.Address
		fill_err = tp.Fill(&_portal)
		if fill_err != nil {
			return
		}
		var _systemConfig common.Address
		fill_err = tp.Fill(&_systemConfig)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.Initialize(_superchainConfig, _portal, _systemConfig)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_MESSAGEVERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.MESSAGEVERSION()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_MINGASCALLDATAOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.MINGASCALLDATAOVERHEAD()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_MINGASDYNAMICOVERHEADDENOMINATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.MINGASDYNAMICOVERHEADDENOMINATOR()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_MINGASDYNAMICOVERHEADNUMERATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.MINGASDYNAMICOVERHEADNUMERATOR()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_MessageNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.MessageNonce()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_OTHERMESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.OTHERMESSENGER()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_OtherMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.OtherMessenger()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_PORTAL__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.PORTAL()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.Paused()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_Portal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.Portal()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_RELAYCALLOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.RELAYCALLOVERHEAD()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_RELAYCONSTANTOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.RELAYCONSTANTOVERHEAD()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_RELAYGASCHECKBUFFER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.RELAYGASCHECKBUFFER()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_RELAYRESERVEDGAS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.RELAYRESERVEDGAS()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_RelayMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		var _sender common.Address
		fill_err = tp.Fill(&_sender)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _minGasLimit *big.Int
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || _nonce == nil || _value == nil || _minGasLimit == nil {
			return
		}

		_L1CrossDomainMessenger.RelayMessage(_nonce, _sender, _target, _value, _minGasLimit, _message)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_SendMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.SendMessage(_target, _message, _minGasLimit)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_SuccessfulMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.SuccessfulMessages(arg0)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_SuperchainConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.SuperchainConfig()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_SystemConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.SystemConfig()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.Version()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerSession_XDomainMessageSender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.XDomainMessageSender()
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerTransactor
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _superchainConfig common.Address
		fill_err = tp.Fill(&_superchainConfig)
		if fill_err != nil {
			return
		}
		var _portal common.Address
		fill_err = tp.Fill(&_portal)
		if fill_err != nil {
			return
		}
		var _systemConfig common.Address
		fill_err = tp.Fill(&_systemConfig)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.Initialize(opts, _superchainConfig, _portal, _systemConfig)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerTransactor_RelayMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerTransactor
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		var _sender common.Address
		fill_err = tp.Fill(&_sender)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _minGasLimit *big.Int
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil || _nonce == nil || _value == nil || _minGasLimit == nil {
			return
		}

		_L1CrossDomainMessenger.RelayMessage(opts, _nonce, _sender, _target, _value, _minGasLimit, _message)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerTransactor_SendMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerTransactor
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.SendMessage(opts, _target, _message, _minGasLimit)
	})
}

// skipping Fuzz_Nosy_L1CrossDomainMessengerTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L1CrossDomainMessengerTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerTransactorRaw
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L1CrossDomainMessenger.Transfer(opts)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerTransactorSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _superchainConfig common.Address
		fill_err = tp.Fill(&_superchainConfig)
		if fill_err != nil {
			return
		}
		var _portal common.Address
		fill_err = tp.Fill(&_portal)
		if fill_err != nil {
			return
		}
		var _systemConfig common.Address
		fill_err = tp.Fill(&_systemConfig)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.Initialize(_superchainConfig, _portal, _systemConfig)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerTransactorSession_RelayMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerTransactorSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		var _sender common.Address
		fill_err = tp.Fill(&_sender)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _minGasLimit *big.Int
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil || _nonce == nil || _value == nil || _minGasLimit == nil {
			return
		}

		_L1CrossDomainMessenger.RelayMessage(_nonce, _sender, _target, _value, _minGasLimit, _message)
	})
}

func Fuzz_Nosy_L1CrossDomainMessengerTransactorSession_SendMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1CrossDomainMessenger *L1CrossDomainMessengerTransactorSession
		fill_err = tp.Fill(&_L1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _L1CrossDomainMessenger == nil {
			return
		}

		_L1CrossDomainMessenger.SendMessage(_target, _message, _minGasLimit)
	})
}

func Fuzz_Nosy_L1ERC721BridgeCaller_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCaller
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		var arg2 *big.Int
		fill_err = tp.Fill(&arg2)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil || arg2 == nil {
			return
		}

		_L1ERC721Bridge.Deposits(opts, arg0, arg1, arg2)
	})
}

func Fuzz_Nosy_L1ERC721BridgeCaller_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCaller
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil {
			return
		}

		_L1ERC721Bridge.MESSENGER(opts)
	})
}

func Fuzz_Nosy_L1ERC721BridgeCaller_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCaller
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil {
			return
		}

		_L1ERC721Bridge.Messenger(opts)
	})
}

func Fuzz_Nosy_L1ERC721BridgeCaller_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCaller
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil {
			return
		}

		_L1ERC721Bridge.OTHERBRIDGE(opts)
	})
}

func Fuzz_Nosy_L1ERC721BridgeCaller_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCaller
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil {
			return
		}

		_L1ERC721Bridge.OtherBridge(opts)
	})
}

func Fuzz_Nosy_L1ERC721BridgeCaller_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCaller
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil {
			return
		}

		_L1ERC721Bridge.Paused(opts)
	})
}

func Fuzz_Nosy_L1ERC721BridgeCaller_SuperchainConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCaller
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil {
			return
		}

		_L1ERC721Bridge.SuperchainConfig(opts)
	})
}

func Fuzz_Nosy_L1ERC721BridgeCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCaller
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil {
			return
		}

		_L1ERC721Bridge.Version(opts)
	})
}

// skipping Fuzz_Nosy_L1ERC721BridgeCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_L1ERC721BridgeCallerSession_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		var arg2 *big.Int
		fill_err = tp.Fill(&arg2)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || arg2 == nil {
			return
		}

		_L1ERC721Bridge.Deposits(arg0, arg1, arg2)
	})
}

func Fuzz_Nosy_L1ERC721BridgeCallerSession_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.MESSENGER()
	})
}

func Fuzz_Nosy_L1ERC721BridgeCallerSession_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.Messenger()
	})
}

func Fuzz_Nosy_L1ERC721BridgeCallerSession_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.OTHERBRIDGE()
	})
}

func Fuzz_Nosy_L1ERC721BridgeCallerSession_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.OtherBridge()
	})
}

func Fuzz_Nosy_L1ERC721BridgeCallerSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.Paused()
	})
}

func Fuzz_Nosy_L1ERC721BridgeCallerSession_SuperchainConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.SuperchainConfig()
	})
}

func Fuzz_Nosy_L1ERC721BridgeCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.Version()
	})
}

func Fuzz_Nosy_L1ERC721BridgeERC721BridgeFinalizedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1ERC721BridgeERC721BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1ERC721BridgeERC721BridgeFinalizedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1ERC721BridgeERC721BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1ERC721BridgeERC721BridgeFinalizedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1ERC721BridgeERC721BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1ERC721BridgeERC721BridgeInitiatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1ERC721BridgeERC721BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1ERC721BridgeERC721BridgeInitiatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1ERC721BridgeERC721BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1ERC721BridgeERC721BridgeInitiatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1ERC721BridgeERC721BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1ERC721BridgeFilterer_FilterERC721BridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeFilterer
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var localToken []common.Address
		fill_err = tp.Fill(&localToken)
		if fill_err != nil {
			return
		}
		var remoteToken []common.Address
		fill_err = tp.Fill(&remoteToken)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil {
			return
		}

		_L1ERC721Bridge.FilterERC721BridgeFinalized(opts, localToken, remoteToken, from)
	})
}

func Fuzz_Nosy_L1ERC721BridgeFilterer_FilterERC721BridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeFilterer
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var localToken []common.Address
		fill_err = tp.Fill(&localToken)
		if fill_err != nil {
			return
		}
		var remoteToken []common.Address
		fill_err = tp.Fill(&remoteToken)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil {
			return
		}

		_L1ERC721Bridge.FilterERC721BridgeInitiated(opts, localToken, remoteToken, from)
	})
}

func Fuzz_Nosy_L1ERC721BridgeFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeFilterer
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil {
			return
		}

		_L1ERC721Bridge.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_L1ERC721BridgeFilterer_ParseERC721BridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeFilterer
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.ParseERC721BridgeFinalized(log)
	})
}

func Fuzz_Nosy_L1ERC721BridgeFilterer_ParseERC721BridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeFilterer
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.ParseERC721BridgeInitiated(log)
	})
}

func Fuzz_Nosy_L1ERC721BridgeFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeFilterer
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.ParseInitialized(log)
	})
}

// skipping Fuzz_Nosy_L1ERC721BridgeFilterer_WatchERC721BridgeFinalized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1ERC721BridgeERC721BridgeFinalized

// skipping Fuzz_Nosy_L1ERC721BridgeFilterer_WatchERC721BridgeInitiated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1ERC721BridgeERC721BridgeInitiated

// skipping Fuzz_Nosy_L1ERC721BridgeFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1ERC721BridgeInitialized

func Fuzz_Nosy_L1ERC721BridgeInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1ERC721BridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1ERC721BridgeInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1ERC721BridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1ERC721BridgeInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1ERC721BridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_L1ERC721BridgeRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_L1ERC721BridgeRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L1ERC721BridgeRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeRaw
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil {
			return
		}

		_L1ERC721Bridge.Transfer(opts)
	})
}

func Fuzz_Nosy_L1ERC721BridgeSession_BridgeERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || _tokenId == nil {
			return
		}

		_L1ERC721Bridge.BridgeERC721(_localToken, _remoteToken, _tokenId, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1ERC721BridgeSession_BridgeERC721To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || _tokenId == nil {
			return
		}

		_L1ERC721Bridge.BridgeERC721To(_localToken, _remoteToken, _to, _tokenId, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1ERC721BridgeSession_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		var arg2 *big.Int
		fill_err = tp.Fill(&arg2)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || arg2 == nil {
			return
		}

		_L1ERC721Bridge.Deposits(arg0, arg1, arg2)
	})
}

func Fuzz_Nosy_L1ERC721BridgeSession_FinalizeBridgeERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || _tokenId == nil {
			return
		}

		_L1ERC721Bridge.FinalizeBridgeERC721(_localToken, _remoteToken, _from, _to, _tokenId, _extraData)
	})
}

func Fuzz_Nosy_L1ERC721BridgeSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _messenger common.Address
		fill_err = tp.Fill(&_messenger)
		if fill_err != nil {
			return
		}
		var _superchainConfig common.Address
		fill_err = tp.Fill(&_superchainConfig)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.Initialize(_messenger, _superchainConfig)
	})
}

func Fuzz_Nosy_L1ERC721BridgeSession_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.MESSENGER()
	})
}

func Fuzz_Nosy_L1ERC721BridgeSession_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.Messenger()
	})
}

func Fuzz_Nosy_L1ERC721BridgeSession_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.OTHERBRIDGE()
	})
}

func Fuzz_Nosy_L1ERC721BridgeSession_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.OtherBridge()
	})
}

func Fuzz_Nosy_L1ERC721BridgeSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.Paused()
	})
}

func Fuzz_Nosy_L1ERC721BridgeSession_SuperchainConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.SuperchainConfig()
	})
}

func Fuzz_Nosy_L1ERC721BridgeSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.Version()
	})
}

func Fuzz_Nosy_L1ERC721BridgeTransactor_BridgeERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeTransactor
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil || _tokenId == nil {
			return
		}

		_L1ERC721Bridge.BridgeERC721(opts, _localToken, _remoteToken, _tokenId, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1ERC721BridgeTransactor_BridgeERC721To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeTransactor
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil || _tokenId == nil {
			return
		}

		_L1ERC721Bridge.BridgeERC721To(opts, _localToken, _remoteToken, _to, _tokenId, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1ERC721BridgeTransactor_FinalizeBridgeERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeTransactor
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil || _tokenId == nil {
			return
		}

		_L1ERC721Bridge.FinalizeBridgeERC721(opts, _localToken, _remoteToken, _from, _to, _tokenId, _extraData)
	})
}

func Fuzz_Nosy_L1ERC721BridgeTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeTransactor
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _messenger common.Address
		fill_err = tp.Fill(&_messenger)
		if fill_err != nil {
			return
		}
		var _superchainConfig common.Address
		fill_err = tp.Fill(&_superchainConfig)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil {
			return
		}

		_L1ERC721Bridge.Initialize(opts, _messenger, _superchainConfig)
	})
}

// skipping Fuzz_Nosy_L1ERC721BridgeTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L1ERC721BridgeTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeTransactorRaw
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || opts == nil {
			return
		}

		_L1ERC721Bridge.Transfer(opts)
	})
}

func Fuzz_Nosy_L1ERC721BridgeTransactorSession_BridgeERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeTransactorSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || _tokenId == nil {
			return
		}

		_L1ERC721Bridge.BridgeERC721(_localToken, _remoteToken, _tokenId, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1ERC721BridgeTransactorSession_BridgeERC721To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeTransactorSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || _tokenId == nil {
			return
		}

		_L1ERC721Bridge.BridgeERC721To(_localToken, _remoteToken, _to, _tokenId, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1ERC721BridgeTransactorSession_FinalizeBridgeERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeTransactorSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil || _tokenId == nil {
			return
		}

		_L1ERC721Bridge.FinalizeBridgeERC721(_localToken, _remoteToken, _from, _to, _tokenId, _extraData)
	})
}

func Fuzz_Nosy_L1ERC721BridgeTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1ERC721Bridge *L1ERC721BridgeTransactorSession
		fill_err = tp.Fill(&_L1ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _messenger common.Address
		fill_err = tp.Fill(&_messenger)
		if fill_err != nil {
			return
		}
		var _superchainConfig common.Address
		fill_err = tp.Fill(&_superchainConfig)
		if fill_err != nil {
			return
		}
		if _L1ERC721Bridge == nil {
			return
		}

		_L1ERC721Bridge.Initialize(_messenger, _superchainConfig)
	})
}

func Fuzz_Nosy_L1FeeVaultCaller_MINWITHDRAWALAMOUNT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultCaller
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil || opts == nil {
			return
		}

		_L1FeeVault.MINWITHDRAWALAMOUNT(opts)
	})
}

func Fuzz_Nosy_L1FeeVaultCaller_RECIPIENT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultCaller
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil || opts == nil {
			return
		}

		_L1FeeVault.RECIPIENT(opts)
	})
}

func Fuzz_Nosy_L1FeeVaultCaller_TotalProcessed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultCaller
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil || opts == nil {
			return
		}

		_L1FeeVault.TotalProcessed(opts)
	})
}

func Fuzz_Nosy_L1FeeVaultCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultCaller
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil || opts == nil {
			return
		}

		_L1FeeVault.Version(opts)
	})
}

func Fuzz_Nosy_L1FeeVaultCaller_WITHDRAWALNETWORK__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultCaller
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil || opts == nil {
			return
		}

		_L1FeeVault.WITHDRAWALNETWORK(opts)
	})
}

// skipping Fuzz_Nosy_L1FeeVaultCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_L1FeeVaultCallerSession_MINWITHDRAWALAMOUNT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultCallerSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.MINWITHDRAWALAMOUNT()
	})
}

func Fuzz_Nosy_L1FeeVaultCallerSession_RECIPIENT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultCallerSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.RECIPIENT()
	})
}

func Fuzz_Nosy_L1FeeVaultCallerSession_TotalProcessed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultCallerSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.TotalProcessed()
	})
}

func Fuzz_Nosy_L1FeeVaultCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultCallerSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.Version()
	})
}

func Fuzz_Nosy_L1FeeVaultCallerSession_WITHDRAWALNETWORK__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultCallerSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.WITHDRAWALNETWORK()
	})
}

func Fuzz_Nosy_L1FeeVaultFilterer_FilterWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultFilterer
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil || opts == nil {
			return
		}

		_L1FeeVault.FilterWithdrawal(opts)
	})
}

func Fuzz_Nosy_L1FeeVaultFilterer_FilterWithdrawal0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultFilterer
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil || opts == nil {
			return
		}

		_L1FeeVault.FilterWithdrawal0(opts)
	})
}

func Fuzz_Nosy_L1FeeVaultFilterer_ParseWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultFilterer
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.ParseWithdrawal(log)
	})
}

func Fuzz_Nosy_L1FeeVaultFilterer_ParseWithdrawal0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultFilterer
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.ParseWithdrawal0(log)
	})
}

// skipping Fuzz_Nosy_L1FeeVaultFilterer_WatchWithdrawal__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1FeeVaultWithdrawal

// skipping Fuzz_Nosy_L1FeeVaultFilterer_WatchWithdrawal0__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1FeeVaultWithdrawal0

// skipping Fuzz_Nosy_L1FeeVaultRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_L1FeeVaultRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L1FeeVaultRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultRaw
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil || opts == nil {
			return
		}

		_L1FeeVault.Transfer(opts)
	})
}

func Fuzz_Nosy_L1FeeVaultSession_MINWITHDRAWALAMOUNT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.MINWITHDRAWALAMOUNT()
	})
}

func Fuzz_Nosy_L1FeeVaultSession_RECIPIENT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.RECIPIENT()
	})
}

func Fuzz_Nosy_L1FeeVaultSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.Receive()
	})
}

func Fuzz_Nosy_L1FeeVaultSession_TotalProcessed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.TotalProcessed()
	})
}

func Fuzz_Nosy_L1FeeVaultSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.Version()
	})
}

func Fuzz_Nosy_L1FeeVaultSession_WITHDRAWALNETWORK__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.WITHDRAWALNETWORK()
	})
}

func Fuzz_Nosy_L1FeeVaultSession_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.Withdraw()
	})
}

func Fuzz_Nosy_L1FeeVaultTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultTransactor
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil || opts == nil {
			return
		}

		_L1FeeVault.Receive(opts)
	})
}

func Fuzz_Nosy_L1FeeVaultTransactor_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultTransactor
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil || opts == nil {
			return
		}

		_L1FeeVault.Withdraw(opts)
	})
}

// skipping Fuzz_Nosy_L1FeeVaultTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L1FeeVaultTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultTransactorRaw
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil || opts == nil {
			return
		}

		_L1FeeVault.Transfer(opts)
	})
}

func Fuzz_Nosy_L1FeeVaultTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultTransactorSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.Receive()
	})
}

func Fuzz_Nosy_L1FeeVaultTransactorSession_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1FeeVault *L1FeeVaultTransactorSession
		fill_err = tp.Fill(&_L1FeeVault)
		if fill_err != nil {
			return
		}
		if _L1FeeVault == nil {
			return
		}

		_L1FeeVault.Withdraw()
	})
}

func Fuzz_Nosy_L1FeeVaultWithdrawal0Iterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1FeeVaultWithdrawal0Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1FeeVaultWithdrawal0Iterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1FeeVaultWithdrawal0Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1FeeVaultWithdrawal0Iterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1FeeVaultWithdrawal0Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1FeeVaultWithdrawalIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1FeeVaultWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1FeeVaultWithdrawalIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1FeeVaultWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1FeeVaultWithdrawalIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1FeeVaultWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1StandardBridgeCaller_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCaller
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.Deposits(opts, arg0, arg1)
	})
}

func Fuzz_Nosy_L1StandardBridgeCaller_L2TokenBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCaller
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.L2TokenBridge(opts)
	})
}

func Fuzz_Nosy_L1StandardBridgeCaller_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCaller
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.MESSENGER(opts)
	})
}

func Fuzz_Nosy_L1StandardBridgeCaller_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCaller
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.Messenger(opts)
	})
}

func Fuzz_Nosy_L1StandardBridgeCaller_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCaller
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.OTHERBRIDGE(opts)
	})
}

func Fuzz_Nosy_L1StandardBridgeCaller_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCaller
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.OtherBridge(opts)
	})
}

func Fuzz_Nosy_L1StandardBridgeCaller_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCaller
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.Paused(opts)
	})
}

func Fuzz_Nosy_L1StandardBridgeCaller_SuperchainConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCaller
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.SuperchainConfig(opts)
	})
}

func Fuzz_Nosy_L1StandardBridgeCaller_SystemConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCaller
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.SystemConfig(opts)
	})
}

func Fuzz_Nosy_L1StandardBridgeCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCaller
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.Version(opts)
	})
}

// skipping Fuzz_Nosy_L1StandardBridgeCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_L1StandardBridgeCallerSession_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCallerSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.Deposits(arg0, arg1)
	})
}

func Fuzz_Nosy_L1StandardBridgeCallerSession_L2TokenBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCallerSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.L2TokenBridge()
	})
}

func Fuzz_Nosy_L1StandardBridgeCallerSession_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCallerSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.MESSENGER()
	})
}

func Fuzz_Nosy_L1StandardBridgeCallerSession_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCallerSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.Messenger()
	})
}

func Fuzz_Nosy_L1StandardBridgeCallerSession_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCallerSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.OTHERBRIDGE()
	})
}

func Fuzz_Nosy_L1StandardBridgeCallerSession_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCallerSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.OtherBridge()
	})
}

func Fuzz_Nosy_L1StandardBridgeCallerSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCallerSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.Paused()
	})
}

func Fuzz_Nosy_L1StandardBridgeCallerSession_SuperchainConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCallerSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.SuperchainConfig()
	})
}

func Fuzz_Nosy_L1StandardBridgeCallerSession_SystemConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCallerSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.SystemConfig()
	})
}

func Fuzz_Nosy_L1StandardBridgeCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeCallerSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.Version()
	})
}

func Fuzz_Nosy_L1StandardBridgeERC20BridgeFinalizedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeERC20BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1StandardBridgeERC20BridgeFinalizedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeERC20BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1StandardBridgeERC20BridgeFinalizedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeERC20BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1StandardBridgeERC20BridgeInitiatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeERC20BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1StandardBridgeERC20BridgeInitiatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeERC20BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1StandardBridgeERC20BridgeInitiatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeERC20BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1StandardBridgeERC20DepositInitiatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeERC20DepositInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1StandardBridgeERC20DepositInitiatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeERC20DepositInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1StandardBridgeERC20DepositInitiatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeERC20DepositInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1StandardBridgeERC20WithdrawalFinalizedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeERC20WithdrawalFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1StandardBridgeERC20WithdrawalFinalizedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeERC20WithdrawalFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1StandardBridgeERC20WithdrawalFinalizedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeERC20WithdrawalFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1StandardBridgeETHBridgeFinalizedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeETHBridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1StandardBridgeETHBridgeFinalizedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeETHBridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1StandardBridgeETHBridgeFinalizedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeETHBridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1StandardBridgeETHBridgeInitiatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeETHBridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1StandardBridgeETHBridgeInitiatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeETHBridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1StandardBridgeETHBridgeInitiatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeETHBridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1StandardBridgeETHDepositInitiatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeETHDepositInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1StandardBridgeETHDepositInitiatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeETHDepositInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1StandardBridgeETHDepositInitiatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeETHDepositInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1StandardBridgeETHWithdrawalFinalizedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeETHWithdrawalFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1StandardBridgeETHWithdrawalFinalizedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeETHWithdrawalFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1StandardBridgeETHWithdrawalFinalizedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeETHWithdrawalFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_FilterERC20BridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var localToken []common.Address
		fill_err = tp.Fill(&localToken)
		if fill_err != nil {
			return
		}
		var remoteToken []common.Address
		fill_err = tp.Fill(&remoteToken)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.FilterERC20BridgeFinalized(opts, localToken, remoteToken, from)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_FilterERC20BridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var localToken []common.Address
		fill_err = tp.Fill(&localToken)
		if fill_err != nil {
			return
		}
		var remoteToken []common.Address
		fill_err = tp.Fill(&remoteToken)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.FilterERC20BridgeInitiated(opts, localToken, remoteToken, from)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_FilterERC20DepositInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var l1Token []common.Address
		fill_err = tp.Fill(&l1Token)
		if fill_err != nil {
			return
		}
		var l2Token []common.Address
		fill_err = tp.Fill(&l2Token)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.FilterERC20DepositInitiated(opts, l1Token, l2Token, from)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_FilterERC20WithdrawalFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var l1Token []common.Address
		fill_err = tp.Fill(&l1Token)
		if fill_err != nil {
			return
		}
		var l2Token []common.Address
		fill_err = tp.Fill(&l2Token)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.FilterERC20WithdrawalFinalized(opts, l1Token, l2Token, from)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_FilterETHBridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to []common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.FilterETHBridgeFinalized(opts, from, to)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_FilterETHBridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to []common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.FilterETHBridgeInitiated(opts, from, to)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_FilterETHDepositInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to []common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.FilterETHDepositInitiated(opts, from, to)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_FilterETHWithdrawalFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to []common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.FilterETHWithdrawalFinalized(opts, from, to)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_ParseERC20BridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.ParseERC20BridgeFinalized(log)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_ParseERC20BridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.ParseERC20BridgeInitiated(log)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_ParseERC20DepositInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.ParseERC20DepositInitiated(log)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_ParseERC20WithdrawalFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.ParseERC20WithdrawalFinalized(log)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_ParseETHBridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.ParseETHBridgeFinalized(log)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_ParseETHBridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.ParseETHBridgeInitiated(log)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_ParseETHDepositInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.ParseETHDepositInitiated(log)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_ParseETHWithdrawalFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.ParseETHWithdrawalFinalized(log)
	})
}

func Fuzz_Nosy_L1StandardBridgeFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeFilterer
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.ParseInitialized(log)
	})
}

// skipping Fuzz_Nosy_L1StandardBridgeFilterer_WatchERC20BridgeFinalized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1StandardBridgeERC20BridgeFinalized

// skipping Fuzz_Nosy_L1StandardBridgeFilterer_WatchERC20BridgeInitiated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1StandardBridgeERC20BridgeInitiated

// skipping Fuzz_Nosy_L1StandardBridgeFilterer_WatchERC20DepositInitiated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1StandardBridgeERC20DepositInitiated

// skipping Fuzz_Nosy_L1StandardBridgeFilterer_WatchERC20WithdrawalFinalized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1StandardBridgeERC20WithdrawalFinalized

// skipping Fuzz_Nosy_L1StandardBridgeFilterer_WatchETHBridgeFinalized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1StandardBridgeETHBridgeFinalized

// skipping Fuzz_Nosy_L1StandardBridgeFilterer_WatchETHBridgeInitiated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1StandardBridgeETHBridgeInitiated

// skipping Fuzz_Nosy_L1StandardBridgeFilterer_WatchETHDepositInitiated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1StandardBridgeETHDepositInitiated

// skipping Fuzz_Nosy_L1StandardBridgeFilterer_WatchETHWithdrawalFinalized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1StandardBridgeETHWithdrawalFinalized

// skipping Fuzz_Nosy_L1StandardBridgeFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L1StandardBridgeInitialized

func Fuzz_Nosy_L1StandardBridgeInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L1StandardBridgeInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L1StandardBridgeInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L1StandardBridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_L1StandardBridgeRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_L1StandardBridgeRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L1StandardBridgeRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeRaw
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.Transfer(opts)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_BridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.BridgeERC20(_localToken, _remoteToken, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_BridgeERC20To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.BridgeERC20To(_localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_BridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.BridgeETH(_minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_BridgeETHTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.BridgeETHTo(_to, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_DepositERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _l1Token common.Address
		fill_err = tp.Fill(&_l1Token)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.DepositERC20(_l1Token, _l2Token, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_DepositERC20To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _l1Token common.Address
		fill_err = tp.Fill(&_l1Token)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.DepositERC20To(_l1Token, _l2Token, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_DepositETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.DepositETH(_minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_DepositETHTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.DepositETHTo(_to, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.Deposits(arg0, arg1)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_FinalizeBridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.FinalizeBridgeERC20(_localToken, _remoteToken, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_FinalizeBridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.FinalizeBridgeETH(_from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_FinalizeERC20Withdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _l1Token common.Address
		fill_err = tp.Fill(&_l1Token)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.FinalizeERC20Withdrawal(_l1Token, _l2Token, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_FinalizeETHWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.FinalizeETHWithdrawal(_from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _messenger common.Address
		fill_err = tp.Fill(&_messenger)
		if fill_err != nil {
			return
		}
		var _superchainConfig common.Address
		fill_err = tp.Fill(&_superchainConfig)
		if fill_err != nil {
			return
		}
		var _systemConfig common.Address
		fill_err = tp.Fill(&_systemConfig)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.Initialize(_messenger, _superchainConfig, _systemConfig)
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_L2TokenBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.L2TokenBridge()
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.MESSENGER()
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.Messenger()
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.OTHERBRIDGE()
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.OtherBridge()
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.Paused()
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.Receive()
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_SuperchainConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.SuperchainConfig()
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_SystemConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.SystemConfig()
	})
}

func Fuzz_Nosy_L1StandardBridgeSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.Version()
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_BridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L1StandardBridge.BridgeERC20(opts, _localToken, _remoteToken, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_BridgeERC20To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L1StandardBridge.BridgeERC20To(opts, _localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_BridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.BridgeETH(opts, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_BridgeETHTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.BridgeETHTo(opts, _to, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_DepositERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l1Token common.Address
		fill_err = tp.Fill(&_l1Token)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L1StandardBridge.DepositERC20(opts, _l1Token, _l2Token, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_DepositERC20To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l1Token common.Address
		fill_err = tp.Fill(&_l1Token)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L1StandardBridge.DepositERC20To(opts, _l1Token, _l2Token, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_DepositETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.DepositETH(opts, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_DepositETHTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.DepositETHTo(opts, _to, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_FinalizeBridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L1StandardBridge.FinalizeBridgeERC20(opts, _localToken, _remoteToken, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_FinalizeBridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L1StandardBridge.FinalizeBridgeETH(opts, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_FinalizeERC20Withdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l1Token common.Address
		fill_err = tp.Fill(&_l1Token)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L1StandardBridge.FinalizeERC20Withdrawal(opts, _l1Token, _l2Token, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_FinalizeETHWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L1StandardBridge.FinalizeETHWithdrawal(opts, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _messenger common.Address
		fill_err = tp.Fill(&_messenger)
		if fill_err != nil {
			return
		}
		var _superchainConfig common.Address
		fill_err = tp.Fill(&_superchainConfig)
		if fill_err != nil {
			return
		}
		var _systemConfig common.Address
		fill_err = tp.Fill(&_systemConfig)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.Initialize(opts, _messenger, _superchainConfig, _systemConfig)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactor
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.Receive(opts)
	})
}

// skipping Fuzz_Nosy_L1StandardBridgeTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L1StandardBridgeTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorRaw
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || opts == nil {
			return
		}

		_L1StandardBridge.Transfer(opts)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_BridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.BridgeERC20(_localToken, _remoteToken, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_BridgeERC20To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.BridgeERC20To(_localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_BridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.BridgeETH(_minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_BridgeETHTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.BridgeETHTo(_to, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_DepositERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _l1Token common.Address
		fill_err = tp.Fill(&_l1Token)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.DepositERC20(_l1Token, _l2Token, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_DepositERC20To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _l1Token common.Address
		fill_err = tp.Fill(&_l1Token)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.DepositERC20To(_l1Token, _l2Token, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_DepositETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.DepositETH(_minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_DepositETHTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.DepositETHTo(_to, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_FinalizeBridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.FinalizeBridgeERC20(_localToken, _remoteToken, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_FinalizeBridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.FinalizeBridgeETH(_from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_FinalizeERC20Withdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _l1Token common.Address
		fill_err = tp.Fill(&_l1Token)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.FinalizeERC20Withdrawal(_l1Token, _l2Token, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_FinalizeETHWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil || _amount == nil {
			return
		}

		_L1StandardBridge.FinalizeETHWithdrawal(_from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		var _messenger common.Address
		fill_err = tp.Fill(&_messenger)
		if fill_err != nil {
			return
		}
		var _superchainConfig common.Address
		fill_err = tp.Fill(&_superchainConfig)
		if fill_err != nil {
			return
		}
		var _systemConfig common.Address
		fill_err = tp.Fill(&_systemConfig)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.Initialize(_messenger, _superchainConfig, _systemConfig)
	})
}

func Fuzz_Nosy_L1StandardBridgeTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L1StandardBridge *L1StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L1StandardBridge)
		if fill_err != nil {
			return
		}
		if _L1StandardBridge == nil {
			return
		}

		_L1StandardBridge.Receive()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_BaseGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.BaseGas(opts, _message, _minGasLimit)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_FailedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.FailedMessages(opts, arg0)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_L1CrossDomainMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.L1CrossDomainMessenger(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_MESSAGEVERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.MESSAGEVERSION(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_MINGASCALLDATAOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.MINGASCALLDATAOVERHEAD(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_MINGASDYNAMICOVERHEADDENOMINATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.MINGASDYNAMICOVERHEADDENOMINATOR(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_MINGASDYNAMICOVERHEADNUMERATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.MINGASDYNAMICOVERHEADNUMERATOR(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_MessageNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.MessageNonce(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_OTHERMESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.OTHERMESSENGER(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_OtherMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.OtherMessenger(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.Paused(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_RELAYCALLOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.RELAYCALLOVERHEAD(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_RELAYCONSTANTOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.RELAYCONSTANTOVERHEAD(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_RELAYGASCHECKBUFFER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.RELAYGASCHECKBUFFER(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_RELAYRESERVEDGAS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.RELAYRESERVEDGAS(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_SuccessfulMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.SuccessfulMessages(opts, arg0)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.Version(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCaller_XDomainMessageSender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCaller
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.XDomainMessageSender(opts)
	})
}

// skipping Fuzz_Nosy_L2CrossDomainMessengerCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_BaseGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.BaseGas(_message, _minGasLimit)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_FailedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.FailedMessages(arg0)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_L1CrossDomainMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.L1CrossDomainMessenger()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_MESSAGEVERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.MESSAGEVERSION()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_MINGASCALLDATAOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.MINGASCALLDATAOVERHEAD()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_MINGASDYNAMICOVERHEADDENOMINATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.MINGASDYNAMICOVERHEADDENOMINATOR()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_MINGASDYNAMICOVERHEADNUMERATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.MINGASDYNAMICOVERHEADNUMERATOR()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_MessageNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.MessageNonce()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_OTHERMESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.OTHERMESSENGER()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_OtherMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.OtherMessenger()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.Paused()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_RELAYCALLOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.RELAYCALLOVERHEAD()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_RELAYCONSTANTOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.RELAYCONSTANTOVERHEAD()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_RELAYGASCHECKBUFFER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.RELAYGASCHECKBUFFER()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_RELAYRESERVEDGAS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.RELAYRESERVEDGAS()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_SuccessfulMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.SuccessfulMessages(arg0)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.Version()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerCallerSession_XDomainMessageSender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerCallerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.XDomainMessageSender()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerFailedRelayedMessageIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerFailedRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerFailedRelayedMessageIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerFailedRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerFailedRelayedMessageIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerFailedRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerFilterer_FilterFailedRelayedMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var msgHash [][32]byte
		fill_err = tp.Fill(&msgHash)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.FilterFailedRelayedMessage(opts, msgHash)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerFilterer_FilterRelayedMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var msgHash [][32]byte
		fill_err = tp.Fill(&msgHash)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.FilterRelayedMessage(opts, msgHash)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerFilterer_FilterSentMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var t3 []common.Address
		fill_err = tp.Fill(&t3)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.FilterSentMessage(opts, t3)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerFilterer_FilterSentMessageExtension1__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var sender []common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.FilterSentMessageExtension1(opts, sender)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerFilterer_ParseFailedRelayedMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.ParseFailedRelayedMessage(log)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.ParseInitialized(log)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerFilterer_ParseRelayedMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.ParseRelayedMessage(log)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerFilterer_ParseSentMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.ParseSentMessage(log)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerFilterer_ParseSentMessageExtension1__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerFilterer
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.ParseSentMessageExtension1(log)
	})
}

// skipping Fuzz_Nosy_L2CrossDomainMessengerFilterer_WatchFailedRelayedMessage__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2CrossDomainMessengerFailedRelayedMessage

// skipping Fuzz_Nosy_L2CrossDomainMessengerFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2CrossDomainMessengerInitialized

// skipping Fuzz_Nosy_L2CrossDomainMessengerFilterer_WatchRelayedMessage__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2CrossDomainMessengerRelayedMessage

// skipping Fuzz_Nosy_L2CrossDomainMessengerFilterer_WatchSentMessage__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2CrossDomainMessengerSentMessage

// skipping Fuzz_Nosy_L2CrossDomainMessengerFilterer_WatchSentMessageExtension1__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2CrossDomainMessengerSentMessageExtension1

func Fuzz_Nosy_L2CrossDomainMessengerInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_L2CrossDomainMessengerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_L2CrossDomainMessengerRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L2CrossDomainMessengerRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerRaw
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.Transfer(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerRelayedMessageIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerRelayedMessageIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerRelayedMessageIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerRelayedMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSentMessageExtension1Iterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerSentMessageExtension1Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSentMessageExtension1Iterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerSentMessageExtension1Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSentMessageExtension1Iterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerSentMessageExtension1Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSentMessageIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerSentMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSentMessageIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerSentMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSentMessageIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2CrossDomainMessengerSentMessageIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_BaseGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.BaseGas(_message, _minGasLimit)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_FailedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.FailedMessages(arg0)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _l1CrossDomainMessenger common.Address
		fill_err = tp.Fill(&_l1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.Initialize(_l1CrossDomainMessenger)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_L1CrossDomainMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.L1CrossDomainMessenger()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_MESSAGEVERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.MESSAGEVERSION()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_MINGASCALLDATAOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.MINGASCALLDATAOVERHEAD()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_MINGASDYNAMICOVERHEADDENOMINATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.MINGASDYNAMICOVERHEADDENOMINATOR()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_MINGASDYNAMICOVERHEADNUMERATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.MINGASDYNAMICOVERHEADNUMERATOR()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_MessageNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.MessageNonce()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_OTHERMESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.OTHERMESSENGER()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_OtherMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.OtherMessenger()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.Paused()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_RELAYCALLOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.RELAYCALLOVERHEAD()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_RELAYCONSTANTOVERHEAD__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.RELAYCONSTANTOVERHEAD()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_RELAYGASCHECKBUFFER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.RELAYGASCHECKBUFFER()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_RELAYRESERVEDGAS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.RELAYRESERVEDGAS()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_RelayMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		var _sender common.Address
		fill_err = tp.Fill(&_sender)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _minGasLimit *big.Int
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || _nonce == nil || _value == nil || _minGasLimit == nil {
			return
		}

		_L2CrossDomainMessenger.RelayMessage(_nonce, _sender, _target, _value, _minGasLimit, _message)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_SendMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.SendMessage(_target, _message, _minGasLimit)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_SuccessfulMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.SuccessfulMessages(arg0)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.Version()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerSession_XDomainMessageSender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.XDomainMessageSender()
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerTransactor
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l1CrossDomainMessenger common.Address
		fill_err = tp.Fill(&_l1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.Initialize(opts, _l1CrossDomainMessenger)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerTransactor_RelayMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerTransactor
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		var _sender common.Address
		fill_err = tp.Fill(&_sender)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _minGasLimit *big.Int
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil || _nonce == nil || _value == nil || _minGasLimit == nil {
			return
		}

		_L2CrossDomainMessenger.RelayMessage(opts, _nonce, _sender, _target, _value, _minGasLimit, _message)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerTransactor_SendMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerTransactor
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.SendMessage(opts, _target, _message, _minGasLimit)
	})
}

// skipping Fuzz_Nosy_L2CrossDomainMessengerTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L2CrossDomainMessengerTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerTransactorRaw
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || opts == nil {
			return
		}

		_L2CrossDomainMessenger.Transfer(opts)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerTransactorSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _l1CrossDomainMessenger common.Address
		fill_err = tp.Fill(&_l1CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.Initialize(_l1CrossDomainMessenger)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerTransactorSession_RelayMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerTransactorSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		var _sender common.Address
		fill_err = tp.Fill(&_sender)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _minGasLimit *big.Int
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil || _nonce == nil || _value == nil || _minGasLimit == nil {
			return
		}

		_L2CrossDomainMessenger.RelayMessage(_nonce, _sender, _target, _value, _minGasLimit, _message)
	})
}

func Fuzz_Nosy_L2CrossDomainMessengerTransactorSession_SendMessage__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2CrossDomainMessenger *L2CrossDomainMessengerTransactorSession
		fill_err = tp.Fill(&_L2CrossDomainMessenger)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		if _L2CrossDomainMessenger == nil {
			return
		}

		_L2CrossDomainMessenger.SendMessage(_target, _message, _minGasLimit)
	})
}

func Fuzz_Nosy_L2ERC721BridgeCaller_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeCaller
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil {
			return
		}

		_L2ERC721Bridge.MESSENGER(opts)
	})
}

func Fuzz_Nosy_L2ERC721BridgeCaller_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeCaller
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil {
			return
		}

		_L2ERC721Bridge.Messenger(opts)
	})
}

func Fuzz_Nosy_L2ERC721BridgeCaller_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeCaller
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil {
			return
		}

		_L2ERC721Bridge.OTHERBRIDGE(opts)
	})
}

func Fuzz_Nosy_L2ERC721BridgeCaller_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeCaller
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil {
			return
		}

		_L2ERC721Bridge.OtherBridge(opts)
	})
}

func Fuzz_Nosy_L2ERC721BridgeCaller_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeCaller
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil {
			return
		}

		_L2ERC721Bridge.Paused(opts)
	})
}

func Fuzz_Nosy_L2ERC721BridgeCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeCaller
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil {
			return
		}

		_L2ERC721Bridge.Version(opts)
	})
}

// skipping Fuzz_Nosy_L2ERC721BridgeCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_L2ERC721BridgeCallerSession_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.MESSENGER()
	})
}

func Fuzz_Nosy_L2ERC721BridgeCallerSession_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.Messenger()
	})
}

func Fuzz_Nosy_L2ERC721BridgeCallerSession_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.OTHERBRIDGE()
	})
}

func Fuzz_Nosy_L2ERC721BridgeCallerSession_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.OtherBridge()
	})
}

func Fuzz_Nosy_L2ERC721BridgeCallerSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.Paused()
	})
}

func Fuzz_Nosy_L2ERC721BridgeCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeCallerSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.Version()
	})
}

func Fuzz_Nosy_L2ERC721BridgeERC721BridgeFinalizedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ERC721BridgeERC721BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2ERC721BridgeERC721BridgeFinalizedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ERC721BridgeERC721BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2ERC721BridgeERC721BridgeFinalizedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ERC721BridgeERC721BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2ERC721BridgeERC721BridgeInitiatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ERC721BridgeERC721BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2ERC721BridgeERC721BridgeInitiatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ERC721BridgeERC721BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2ERC721BridgeERC721BridgeInitiatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ERC721BridgeERC721BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2ERC721BridgeFilterer_FilterERC721BridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeFilterer
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var localToken []common.Address
		fill_err = tp.Fill(&localToken)
		if fill_err != nil {
			return
		}
		var remoteToken []common.Address
		fill_err = tp.Fill(&remoteToken)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil {
			return
		}

		_L2ERC721Bridge.FilterERC721BridgeFinalized(opts, localToken, remoteToken, from)
	})
}

func Fuzz_Nosy_L2ERC721BridgeFilterer_FilterERC721BridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeFilterer
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var localToken []common.Address
		fill_err = tp.Fill(&localToken)
		if fill_err != nil {
			return
		}
		var remoteToken []common.Address
		fill_err = tp.Fill(&remoteToken)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil {
			return
		}

		_L2ERC721Bridge.FilterERC721BridgeInitiated(opts, localToken, remoteToken, from)
	})
}

func Fuzz_Nosy_L2ERC721BridgeFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeFilterer
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil {
			return
		}

		_L2ERC721Bridge.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_L2ERC721BridgeFilterer_ParseERC721BridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeFilterer
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.ParseERC721BridgeFinalized(log)
	})
}

func Fuzz_Nosy_L2ERC721BridgeFilterer_ParseERC721BridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeFilterer
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.ParseERC721BridgeInitiated(log)
	})
}

func Fuzz_Nosy_L2ERC721BridgeFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeFilterer
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.ParseInitialized(log)
	})
}

// skipping Fuzz_Nosy_L2ERC721BridgeFilterer_WatchERC721BridgeFinalized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2ERC721BridgeERC721BridgeFinalized

// skipping Fuzz_Nosy_L2ERC721BridgeFilterer_WatchERC721BridgeInitiated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2ERC721BridgeERC721BridgeInitiated

// skipping Fuzz_Nosy_L2ERC721BridgeFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2ERC721BridgeInitialized

func Fuzz_Nosy_L2ERC721BridgeInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ERC721BridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2ERC721BridgeInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ERC721BridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2ERC721BridgeInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ERC721BridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_L2ERC721BridgeRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_L2ERC721BridgeRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L2ERC721BridgeRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeRaw
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil {
			return
		}

		_L2ERC721Bridge.Transfer(opts)
	})
}

func Fuzz_Nosy_L2ERC721BridgeSession_BridgeERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || _tokenId == nil {
			return
		}

		_L2ERC721Bridge.BridgeERC721(_localToken, _remoteToken, _tokenId, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2ERC721BridgeSession_BridgeERC721To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || _tokenId == nil {
			return
		}

		_L2ERC721Bridge.BridgeERC721To(_localToken, _remoteToken, _to, _tokenId, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2ERC721BridgeSession_FinalizeBridgeERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || _tokenId == nil {
			return
		}

		_L2ERC721Bridge.FinalizeBridgeERC721(_localToken, _remoteToken, _from, _to, _tokenId, _extraData)
	})
}

func Fuzz_Nosy_L2ERC721BridgeSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _l1ERC721Bridge common.Address
		fill_err = tp.Fill(&_l1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.Initialize(_l1ERC721Bridge)
	})
}

func Fuzz_Nosy_L2ERC721BridgeSession_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.MESSENGER()
	})
}

func Fuzz_Nosy_L2ERC721BridgeSession_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.Messenger()
	})
}

func Fuzz_Nosy_L2ERC721BridgeSession_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.OTHERBRIDGE()
	})
}

func Fuzz_Nosy_L2ERC721BridgeSession_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.OtherBridge()
	})
}

func Fuzz_Nosy_L2ERC721BridgeSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.Paused()
	})
}

func Fuzz_Nosy_L2ERC721BridgeSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.Version()
	})
}

func Fuzz_Nosy_L2ERC721BridgeTransactor_BridgeERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeTransactor
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil || _tokenId == nil {
			return
		}

		_L2ERC721Bridge.BridgeERC721(opts, _localToken, _remoteToken, _tokenId, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2ERC721BridgeTransactor_BridgeERC721To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeTransactor
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil || _tokenId == nil {
			return
		}

		_L2ERC721Bridge.BridgeERC721To(opts, _localToken, _remoteToken, _to, _tokenId, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2ERC721BridgeTransactor_FinalizeBridgeERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeTransactor
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil || _tokenId == nil {
			return
		}

		_L2ERC721Bridge.FinalizeBridgeERC721(opts, _localToken, _remoteToken, _from, _to, _tokenId, _extraData)
	})
}

func Fuzz_Nosy_L2ERC721BridgeTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeTransactor
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l1ERC721Bridge common.Address
		fill_err = tp.Fill(&_l1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil {
			return
		}

		_L2ERC721Bridge.Initialize(opts, _l1ERC721Bridge)
	})
}

// skipping Fuzz_Nosy_L2ERC721BridgeTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L2ERC721BridgeTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeTransactorRaw
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || opts == nil {
			return
		}

		_L2ERC721Bridge.Transfer(opts)
	})
}

func Fuzz_Nosy_L2ERC721BridgeTransactorSession_BridgeERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeTransactorSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || _tokenId == nil {
			return
		}

		_L2ERC721Bridge.BridgeERC721(_localToken, _remoteToken, _tokenId, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2ERC721BridgeTransactorSession_BridgeERC721To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeTransactorSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || _tokenId == nil {
			return
		}

		_L2ERC721Bridge.BridgeERC721To(_localToken, _remoteToken, _to, _tokenId, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2ERC721BridgeTransactorSession_FinalizeBridgeERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeTransactorSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _tokenId *big.Int
		fill_err = tp.Fill(&_tokenId)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil || _tokenId == nil {
			return
		}

		_L2ERC721Bridge.FinalizeBridgeERC721(_localToken, _remoteToken, _from, _to, _tokenId, _extraData)
	})
}

func Fuzz_Nosy_L2ERC721BridgeTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ERC721Bridge *L2ERC721BridgeTransactorSession
		fill_err = tp.Fill(&_L2ERC721Bridge)
		if fill_err != nil {
			return
		}
		var _l1ERC721Bridge common.Address
		fill_err = tp.Fill(&_l1ERC721Bridge)
		if fill_err != nil {
			return
		}
		if _L2ERC721Bridge == nil {
			return
		}

		_L2ERC721Bridge.Initialize(_l1ERC721Bridge)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_CHALLENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.CHALLENGER(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_Challenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.Challenger(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_ComputeL2Timestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l2BlockNumber *big.Int
		fill_err = tp.Fill(&_l2BlockNumber)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil || _l2BlockNumber == nil {
			return
		}

		_L2OutputOracle.ComputeL2Timestamp(opts, _l2BlockNumber)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_FINALIZATIONPERIODSECONDS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.FINALIZATIONPERIODSECONDS(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_FinalizationPeriodSeconds__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.FinalizationPeriodSeconds(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_GetL2Output__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l2OutputIndex *big.Int
		fill_err = tp.Fill(&_l2OutputIndex)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil || _l2OutputIndex == nil {
			return
		}

		_L2OutputOracle.GetL2Output(opts, _l2OutputIndex)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_GetL2OutputAfter__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l2BlockNumber *big.Int
		fill_err = tp.Fill(&_l2BlockNumber)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil || _l2BlockNumber == nil {
			return
		}

		_L2OutputOracle.GetL2OutputAfter(opts, _l2BlockNumber)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_GetL2OutputIndexAfter__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l2BlockNumber *big.Int
		fill_err = tp.Fill(&_l2BlockNumber)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil || _l2BlockNumber == nil {
			return
		}

		_L2OutputOracle.GetL2OutputIndexAfter(opts, _l2BlockNumber)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_L2BLOCKTIME__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.L2BLOCKTIME(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_L2BlockTime__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.L2BlockTime(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_LatestBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.LatestBlockNumber(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_LatestOutputIndex__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.LatestOutputIndex(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_NextBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.NextBlockNumber(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_NextOutputIndex__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.NextOutputIndex(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_PROPOSER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.PROPOSER(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_Proposer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.Proposer(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_SUBMISSIONINTERVAL__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.SUBMISSIONINTERVAL(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_StartingBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.StartingBlockNumber(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_StartingTimestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.StartingTimestamp(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_SubmissionInterval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.SubmissionInterval(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCaller
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.Version(opts)
	})
}

// skipping Fuzz_Nosy_L2OutputOracleCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_L2OutputOracleCallerSession_CHALLENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.CHALLENGER()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_Challenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.Challenger()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_ComputeL2Timestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _l2BlockNumber *big.Int
		fill_err = tp.Fill(&_l2BlockNumber)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _l2BlockNumber == nil {
			return
		}

		_L2OutputOracle.ComputeL2Timestamp(_l2BlockNumber)
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_FINALIZATIONPERIODSECONDS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.FINALIZATIONPERIODSECONDS()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_FinalizationPeriodSeconds__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.FinalizationPeriodSeconds()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_GetL2Output__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _l2OutputIndex *big.Int
		fill_err = tp.Fill(&_l2OutputIndex)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _l2OutputIndex == nil {
			return
		}

		_L2OutputOracle.GetL2Output(_l2OutputIndex)
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_GetL2OutputAfter__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _l2BlockNumber *big.Int
		fill_err = tp.Fill(&_l2BlockNumber)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _l2BlockNumber == nil {
			return
		}

		_L2OutputOracle.GetL2OutputAfter(_l2BlockNumber)
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_GetL2OutputIndexAfter__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _l2BlockNumber *big.Int
		fill_err = tp.Fill(&_l2BlockNumber)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _l2BlockNumber == nil {
			return
		}

		_L2OutputOracle.GetL2OutputIndexAfter(_l2BlockNumber)
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_L2BLOCKTIME__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.L2BLOCKTIME()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_L2BlockTime__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.L2BlockTime()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_LatestBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.LatestBlockNumber()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_LatestOutputIndex__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.LatestOutputIndex()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_NextBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.NextBlockNumber()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_NextOutputIndex__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.NextOutputIndex()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_PROPOSER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.PROPOSER()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_Proposer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.Proposer()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_SUBMISSIONINTERVAL__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.SUBMISSIONINTERVAL()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_StartingBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.StartingBlockNumber()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_StartingTimestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.StartingTimestamp()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_SubmissionInterval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.SubmissionInterval()
	})
}

func Fuzz_Nosy_L2OutputOracleCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleCallerSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.Version()
	})
}

func Fuzz_Nosy_L2OutputOracleFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleFilterer
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleFilterer_FilterOutputProposed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleFilterer
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var outputRoot [][32]byte
		fill_err = tp.Fill(&outputRoot)
		if fill_err != nil {
			return
		}
		var l2OutputIndex []*big.Int
		fill_err = tp.Fill(&l2OutputIndex)
		if fill_err != nil {
			return
		}
		var l2BlockNumber []*big.Int
		fill_err = tp.Fill(&l2BlockNumber)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.FilterOutputProposed(opts, outputRoot, l2OutputIndex, l2BlockNumber)
	})
}

func Fuzz_Nosy_L2OutputOracleFilterer_FilterOutputsDeleted__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleFilterer
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var prevNextOutputIndex []*big.Int
		fill_err = tp.Fill(&prevNextOutputIndex)
		if fill_err != nil {
			return
		}
		var newNextOutputIndex []*big.Int
		fill_err = tp.Fill(&newNextOutputIndex)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.FilterOutputsDeleted(opts, prevNextOutputIndex, newNextOutputIndex)
	})
}

func Fuzz_Nosy_L2OutputOracleFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleFilterer
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.ParseInitialized(log)
	})
}

func Fuzz_Nosy_L2OutputOracleFilterer_ParseOutputProposed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleFilterer
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.ParseOutputProposed(log)
	})
}

func Fuzz_Nosy_L2OutputOracleFilterer_ParseOutputsDeleted__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleFilterer
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.ParseOutputsDeleted(log)
	})
}

// skipping Fuzz_Nosy_L2OutputOracleFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2OutputOracleInitialized

// skipping Fuzz_Nosy_L2OutputOracleFilterer_WatchOutputProposed__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2OutputOracleOutputProposed

// skipping Fuzz_Nosy_L2OutputOracleFilterer_WatchOutputsDeleted__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2OutputOracleOutputsDeleted

func Fuzz_Nosy_L2OutputOracleInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2OutputOracleInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2OutputOracleInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2OutputOracleInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2OutputOracleInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2OutputOracleInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2OutputOracleOutputProposedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2OutputOracleOutputProposedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2OutputOracleOutputProposedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2OutputOracleOutputProposedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2OutputOracleOutputProposedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2OutputOracleOutputProposedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2OutputOracleOutputsDeletedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2OutputOracleOutputsDeletedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2OutputOracleOutputsDeletedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2OutputOracleOutputsDeletedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2OutputOracleOutputsDeletedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2OutputOracleOutputsDeletedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_L2OutputOracleRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_L2OutputOracleRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L2OutputOracleRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleRaw
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.Transfer(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleSession_CHALLENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.CHALLENGER()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_Challenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.Challenger()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_ComputeL2Timestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _l2BlockNumber *big.Int
		fill_err = tp.Fill(&_l2BlockNumber)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _l2BlockNumber == nil {
			return
		}

		_L2OutputOracle.ComputeL2Timestamp(_l2BlockNumber)
	})
}

func Fuzz_Nosy_L2OutputOracleSession_DeleteL2Outputs__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _l2OutputIndex *big.Int
		fill_err = tp.Fill(&_l2OutputIndex)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _l2OutputIndex == nil {
			return
		}

		_L2OutputOracle.DeleteL2Outputs(_l2OutputIndex)
	})
}

func Fuzz_Nosy_L2OutputOracleSession_FINALIZATIONPERIODSECONDS__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.FINALIZATIONPERIODSECONDS()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_FinalizationPeriodSeconds__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.FinalizationPeriodSeconds()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_GetL2Output__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _l2OutputIndex *big.Int
		fill_err = tp.Fill(&_l2OutputIndex)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _l2OutputIndex == nil {
			return
		}

		_L2OutputOracle.GetL2Output(_l2OutputIndex)
	})
}

func Fuzz_Nosy_L2OutputOracleSession_GetL2OutputAfter__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _l2BlockNumber *big.Int
		fill_err = tp.Fill(&_l2BlockNumber)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _l2BlockNumber == nil {
			return
		}

		_L2OutputOracle.GetL2OutputAfter(_l2BlockNumber)
	})
}

func Fuzz_Nosy_L2OutputOracleSession_GetL2OutputIndexAfter__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _l2BlockNumber *big.Int
		fill_err = tp.Fill(&_l2BlockNumber)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _l2BlockNumber == nil {
			return
		}

		_L2OutputOracle.GetL2OutputIndexAfter(_l2BlockNumber)
	})
}

func Fuzz_Nosy_L2OutputOracleSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _submissionInterval *big.Int
		fill_err = tp.Fill(&_submissionInterval)
		if fill_err != nil {
			return
		}
		var _l2BlockTime *big.Int
		fill_err = tp.Fill(&_l2BlockTime)
		if fill_err != nil {
			return
		}
		var _startingBlockNumber *big.Int
		fill_err = tp.Fill(&_startingBlockNumber)
		if fill_err != nil {
			return
		}
		var _startingTimestamp *big.Int
		fill_err = tp.Fill(&_startingTimestamp)
		if fill_err != nil {
			return
		}
		var _proposer common.Address
		fill_err = tp.Fill(&_proposer)
		if fill_err != nil {
			return
		}
		var _challenger common.Address
		fill_err = tp.Fill(&_challenger)
		if fill_err != nil {
			return
		}
		var _finalizationPeriodSeconds *big.Int
		fill_err = tp.Fill(&_finalizationPeriodSeconds)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _submissionInterval == nil || _l2BlockTime == nil || _startingBlockNumber == nil || _startingTimestamp == nil || _finalizationPeriodSeconds == nil {
			return
		}

		_L2OutputOracle.Initialize(_submissionInterval, _l2BlockTime, _startingBlockNumber, _startingTimestamp, _proposer, _challenger, _finalizationPeriodSeconds)
	})
}

func Fuzz_Nosy_L2OutputOracleSession_L2BLOCKTIME__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.L2BLOCKTIME()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_L2BlockTime__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.L2BlockTime()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_LatestBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.LatestBlockNumber()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_LatestOutputIndex__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.LatestOutputIndex()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_NextBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.NextBlockNumber()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_NextOutputIndex__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.NextOutputIndex()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_PROPOSER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.PROPOSER()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_ProposeL2Output__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _outputRoot [32]byte
		fill_err = tp.Fill(&_outputRoot)
		if fill_err != nil {
			return
		}
		var _l2BlockNumber *big.Int
		fill_err = tp.Fill(&_l2BlockNumber)
		if fill_err != nil {
			return
		}
		var _l1BlockHash [32]byte
		fill_err = tp.Fill(&_l1BlockHash)
		if fill_err != nil {
			return
		}
		var _l1BlockNumber *big.Int
		fill_err = tp.Fill(&_l1BlockNumber)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _l2BlockNumber == nil || _l1BlockNumber == nil {
			return
		}

		_L2OutputOracle.ProposeL2Output(_outputRoot, _l2BlockNumber, _l1BlockHash, _l1BlockNumber)
	})
}

func Fuzz_Nosy_L2OutputOracleSession_Proposer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.Proposer()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_SUBMISSIONINTERVAL__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.SUBMISSIONINTERVAL()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_StartingBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.StartingBlockNumber()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_StartingTimestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.StartingTimestamp()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_SubmissionInterval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.SubmissionInterval()
	})
}

func Fuzz_Nosy_L2OutputOracleSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil {
			return
		}

		_L2OutputOracle.Version()
	})
}

func Fuzz_Nosy_L2OutputOracleTransactor_DeleteL2Outputs__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleTransactor
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l2OutputIndex *big.Int
		fill_err = tp.Fill(&_l2OutputIndex)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil || _l2OutputIndex == nil {
			return
		}

		_L2OutputOracle.DeleteL2Outputs(opts, _l2OutputIndex)
	})
}

func Fuzz_Nosy_L2OutputOracleTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleTransactor
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _submissionInterval *big.Int
		fill_err = tp.Fill(&_submissionInterval)
		if fill_err != nil {
			return
		}
		var _l2BlockTime *big.Int
		fill_err = tp.Fill(&_l2BlockTime)
		if fill_err != nil {
			return
		}
		var _startingBlockNumber *big.Int
		fill_err = tp.Fill(&_startingBlockNumber)
		if fill_err != nil {
			return
		}
		var _startingTimestamp *big.Int
		fill_err = tp.Fill(&_startingTimestamp)
		if fill_err != nil {
			return
		}
		var _proposer common.Address
		fill_err = tp.Fill(&_proposer)
		if fill_err != nil {
			return
		}
		var _challenger common.Address
		fill_err = tp.Fill(&_challenger)
		if fill_err != nil {
			return
		}
		var _finalizationPeriodSeconds *big.Int
		fill_err = tp.Fill(&_finalizationPeriodSeconds)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil || _submissionInterval == nil || _l2BlockTime == nil || _startingBlockNumber == nil || _startingTimestamp == nil || _finalizationPeriodSeconds == nil {
			return
		}

		_L2OutputOracle.Initialize(opts, _submissionInterval, _l2BlockTime, _startingBlockNumber, _startingTimestamp, _proposer, _challenger, _finalizationPeriodSeconds)
	})
}

func Fuzz_Nosy_L2OutputOracleTransactor_ProposeL2Output__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleTransactor
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _outputRoot [32]byte
		fill_err = tp.Fill(&_outputRoot)
		if fill_err != nil {
			return
		}
		var _l2BlockNumber *big.Int
		fill_err = tp.Fill(&_l2BlockNumber)
		if fill_err != nil {
			return
		}
		var _l1BlockHash [32]byte
		fill_err = tp.Fill(&_l1BlockHash)
		if fill_err != nil {
			return
		}
		var _l1BlockNumber *big.Int
		fill_err = tp.Fill(&_l1BlockNumber)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil || _l2BlockNumber == nil || _l1BlockNumber == nil {
			return
		}

		_L2OutputOracle.ProposeL2Output(opts, _outputRoot, _l2BlockNumber, _l1BlockHash, _l1BlockNumber)
	})
}

// skipping Fuzz_Nosy_L2OutputOracleTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L2OutputOracleTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleTransactorRaw
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || opts == nil {
			return
		}

		_L2OutputOracle.Transfer(opts)
	})
}

func Fuzz_Nosy_L2OutputOracleTransactorSession_DeleteL2Outputs__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleTransactorSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _l2OutputIndex *big.Int
		fill_err = tp.Fill(&_l2OutputIndex)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _l2OutputIndex == nil {
			return
		}

		_L2OutputOracle.DeleteL2Outputs(_l2OutputIndex)
	})
}

func Fuzz_Nosy_L2OutputOracleTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleTransactorSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _submissionInterval *big.Int
		fill_err = tp.Fill(&_submissionInterval)
		if fill_err != nil {
			return
		}
		var _l2BlockTime *big.Int
		fill_err = tp.Fill(&_l2BlockTime)
		if fill_err != nil {
			return
		}
		var _startingBlockNumber *big.Int
		fill_err = tp.Fill(&_startingBlockNumber)
		if fill_err != nil {
			return
		}
		var _startingTimestamp *big.Int
		fill_err = tp.Fill(&_startingTimestamp)
		if fill_err != nil {
			return
		}
		var _proposer common.Address
		fill_err = tp.Fill(&_proposer)
		if fill_err != nil {
			return
		}
		var _challenger common.Address
		fill_err = tp.Fill(&_challenger)
		if fill_err != nil {
			return
		}
		var _finalizationPeriodSeconds *big.Int
		fill_err = tp.Fill(&_finalizationPeriodSeconds)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _submissionInterval == nil || _l2BlockTime == nil || _startingBlockNumber == nil || _startingTimestamp == nil || _finalizationPeriodSeconds == nil {
			return
		}

		_L2OutputOracle.Initialize(_submissionInterval, _l2BlockTime, _startingBlockNumber, _startingTimestamp, _proposer, _challenger, _finalizationPeriodSeconds)
	})
}

func Fuzz_Nosy_L2OutputOracleTransactorSession_ProposeL2Output__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2OutputOracle *L2OutputOracleTransactorSession
		fill_err = tp.Fill(&_L2OutputOracle)
		if fill_err != nil {
			return
		}
		var _outputRoot [32]byte
		fill_err = tp.Fill(&_outputRoot)
		if fill_err != nil {
			return
		}
		var _l2BlockNumber *big.Int
		fill_err = tp.Fill(&_l2BlockNumber)
		if fill_err != nil {
			return
		}
		var _l1BlockHash [32]byte
		fill_err = tp.Fill(&_l1BlockHash)
		if fill_err != nil {
			return
		}
		var _l1BlockNumber *big.Int
		fill_err = tp.Fill(&_l1BlockNumber)
		if fill_err != nil {
			return
		}
		if _L2OutputOracle == nil || _l2BlockNumber == nil || _l1BlockNumber == nil {
			return
		}

		_L2OutputOracle.ProposeL2Output(_outputRoot, _l2BlockNumber, _l1BlockHash, _l1BlockNumber)
	})
}

func Fuzz_Nosy_L2StandardBridgeCaller_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCaller
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.Deposits(opts, arg0, arg1)
	})
}

func Fuzz_Nosy_L2StandardBridgeCaller_L1TokenBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCaller
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.L1TokenBridge(opts)
	})
}

func Fuzz_Nosy_L2StandardBridgeCaller_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCaller
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.MESSENGER(opts)
	})
}

func Fuzz_Nosy_L2StandardBridgeCaller_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCaller
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.Messenger(opts)
	})
}

func Fuzz_Nosy_L2StandardBridgeCaller_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCaller
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.OTHERBRIDGE(opts)
	})
}

func Fuzz_Nosy_L2StandardBridgeCaller_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCaller
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.OtherBridge(opts)
	})
}

func Fuzz_Nosy_L2StandardBridgeCaller_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCaller
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.Paused(opts)
	})
}

func Fuzz_Nosy_L2StandardBridgeCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCaller
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.Version(opts)
	})
}

// skipping Fuzz_Nosy_L2StandardBridgeCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_L2StandardBridgeCallerSession_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCallerSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.Deposits(arg0, arg1)
	})
}

func Fuzz_Nosy_L2StandardBridgeCallerSession_L1TokenBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCallerSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.L1TokenBridge()
	})
}

func Fuzz_Nosy_L2StandardBridgeCallerSession_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCallerSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.MESSENGER()
	})
}

func Fuzz_Nosy_L2StandardBridgeCallerSession_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCallerSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.Messenger()
	})
}

func Fuzz_Nosy_L2StandardBridgeCallerSession_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCallerSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.OTHERBRIDGE()
	})
}

func Fuzz_Nosy_L2StandardBridgeCallerSession_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCallerSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.OtherBridge()
	})
}

func Fuzz_Nosy_L2StandardBridgeCallerSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCallerSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.Paused()
	})
}

func Fuzz_Nosy_L2StandardBridgeCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeCallerSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.Version()
	})
}

func Fuzz_Nosy_L2StandardBridgeDepositFinalizedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeDepositFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2StandardBridgeDepositFinalizedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeDepositFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2StandardBridgeDepositFinalizedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeDepositFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2StandardBridgeERC20BridgeFinalizedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeERC20BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2StandardBridgeERC20BridgeFinalizedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeERC20BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2StandardBridgeERC20BridgeFinalizedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeERC20BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2StandardBridgeERC20BridgeInitiatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeERC20BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2StandardBridgeERC20BridgeInitiatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeERC20BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2StandardBridgeERC20BridgeInitiatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeERC20BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2StandardBridgeETHBridgeFinalizedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeETHBridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2StandardBridgeETHBridgeFinalizedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeETHBridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2StandardBridgeETHBridgeFinalizedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeETHBridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2StandardBridgeETHBridgeInitiatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeETHBridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2StandardBridgeETHBridgeInitiatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeETHBridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2StandardBridgeETHBridgeInitiatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeETHBridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_FilterDepositFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var l1Token []common.Address
		fill_err = tp.Fill(&l1Token)
		if fill_err != nil {
			return
		}
		var l2Token []common.Address
		fill_err = tp.Fill(&l2Token)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.FilterDepositFinalized(opts, l1Token, l2Token, from)
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_FilterERC20BridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var localToken []common.Address
		fill_err = tp.Fill(&localToken)
		if fill_err != nil {
			return
		}
		var remoteToken []common.Address
		fill_err = tp.Fill(&remoteToken)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.FilterERC20BridgeFinalized(opts, localToken, remoteToken, from)
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_FilterERC20BridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var localToken []common.Address
		fill_err = tp.Fill(&localToken)
		if fill_err != nil {
			return
		}
		var remoteToken []common.Address
		fill_err = tp.Fill(&remoteToken)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.FilterERC20BridgeInitiated(opts, localToken, remoteToken, from)
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_FilterETHBridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to []common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.FilterETHBridgeFinalized(opts, from, to)
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_FilterETHBridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to []common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.FilterETHBridgeInitiated(opts, from, to)
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_FilterWithdrawalInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var l1Token []common.Address
		fill_err = tp.Fill(&l1Token)
		if fill_err != nil {
			return
		}
		var l2Token []common.Address
		fill_err = tp.Fill(&l2Token)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.FilterWithdrawalInitiated(opts, l1Token, l2Token, from)
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_ParseDepositFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.ParseDepositFinalized(log)
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_ParseERC20BridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.ParseERC20BridgeFinalized(log)
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_ParseERC20BridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.ParseERC20BridgeInitiated(log)
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_ParseETHBridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.ParseETHBridgeFinalized(log)
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_ParseETHBridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.ParseETHBridgeInitiated(log)
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.ParseInitialized(log)
	})
}

func Fuzz_Nosy_L2StandardBridgeFilterer_ParseWithdrawalInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeFilterer
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.ParseWithdrawalInitiated(log)
	})
}

// skipping Fuzz_Nosy_L2StandardBridgeFilterer_WatchDepositFinalized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2StandardBridgeDepositFinalized

// skipping Fuzz_Nosy_L2StandardBridgeFilterer_WatchERC20BridgeFinalized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2StandardBridgeERC20BridgeFinalized

// skipping Fuzz_Nosy_L2StandardBridgeFilterer_WatchERC20BridgeInitiated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2StandardBridgeERC20BridgeInitiated

// skipping Fuzz_Nosy_L2StandardBridgeFilterer_WatchETHBridgeFinalized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2StandardBridgeETHBridgeFinalized

// skipping Fuzz_Nosy_L2StandardBridgeFilterer_WatchETHBridgeInitiated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2StandardBridgeETHBridgeInitiated

// skipping Fuzz_Nosy_L2StandardBridgeFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2StandardBridgeInitialized

// skipping Fuzz_Nosy_L2StandardBridgeFilterer_WatchWithdrawalInitiated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2StandardBridgeWithdrawalInitiated

func Fuzz_Nosy_L2StandardBridgeInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2StandardBridgeInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2StandardBridgeInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_L2StandardBridgeRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_L2StandardBridgeRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L2StandardBridgeRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeRaw
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.Transfer(opts)
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_BridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.BridgeERC20(_localToken, _remoteToken, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_BridgeERC20To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.BridgeERC20To(_localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_BridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.BridgeETH(_minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_BridgeETHTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.BridgeETHTo(_to, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.Deposits(arg0, arg1)
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_FinalizeBridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.FinalizeBridgeERC20(_localToken, _remoteToken, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_FinalizeBridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.FinalizeBridgeETH(_from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_FinalizeDeposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _l1Token common.Address
		fill_err = tp.Fill(&_l1Token)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.FinalizeDeposit(_l1Token, _l2Token, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _otherBridge common.Address
		fill_err = tp.Fill(&_otherBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.Initialize(_otherBridge)
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_L1TokenBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.L1TokenBridge()
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.MESSENGER()
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.Messenger()
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.OTHERBRIDGE()
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.OtherBridge()
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.Paused()
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.Receive()
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.Version()
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.Withdraw(_l2Token, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeSession_WithdrawTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.WithdrawTo(_l2Token, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactor_BridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactor
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L2StandardBridge.BridgeERC20(opts, _localToken, _remoteToken, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactor_BridgeERC20To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactor
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L2StandardBridge.BridgeERC20To(opts, _localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactor_BridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactor
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.BridgeETH(opts, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactor_BridgeETHTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactor
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.BridgeETHTo(opts, _to, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactor_FinalizeBridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactor
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L2StandardBridge.FinalizeBridgeERC20(opts, _localToken, _remoteToken, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactor_FinalizeBridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactor
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L2StandardBridge.FinalizeBridgeETH(opts, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactor_FinalizeDeposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactor
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l1Token common.Address
		fill_err = tp.Fill(&_l1Token)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L2StandardBridge.FinalizeDeposit(opts, _l1Token, _l2Token, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactor
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _otherBridge common.Address
		fill_err = tp.Fill(&_otherBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.Initialize(opts, _otherBridge)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactor
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.Receive(opts)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactor_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactor
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L2StandardBridge.Withdraw(opts, _l2Token, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactor_WithdrawTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactor
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_L2StandardBridge.WithdrawTo(opts, _l2Token, _to, _amount, _minGasLimit, _extraData)
	})
}

// skipping Fuzz_Nosy_L2StandardBridgeTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L2StandardBridgeTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactorRaw
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || opts == nil {
			return
		}

		_L2StandardBridge.Transfer(opts)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactorSession_BridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.BridgeERC20(_localToken, _remoteToken, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactorSession_BridgeERC20To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.BridgeERC20To(_localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactorSession_BridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.BridgeETH(_minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactorSession_BridgeETHTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.BridgeETHTo(_to, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactorSession_FinalizeBridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.FinalizeBridgeERC20(_localToken, _remoteToken, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactorSession_FinalizeBridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.FinalizeBridgeETH(_from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactorSession_FinalizeDeposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _l1Token common.Address
		fill_err = tp.Fill(&_l1Token)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.FinalizeDeposit(_l1Token, _l2Token, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _otherBridge common.Address
		fill_err = tp.Fill(&_otherBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.Initialize(_otherBridge)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil {
			return
		}

		_L2StandardBridge.Receive()
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactorSession_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.Withdraw(_l2Token, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeTransactorSession_WithdrawTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2StandardBridge *L2StandardBridgeTransactorSession
		fill_err = tp.Fill(&_L2StandardBridge)
		if fill_err != nil {
			return
		}
		var _l2Token common.Address
		fill_err = tp.Fill(&_l2Token)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _L2StandardBridge == nil || _amount == nil {
			return
		}

		_L2StandardBridge.WithdrawTo(_l2Token, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_L2StandardBridgeWithdrawalInitiatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeWithdrawalInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2StandardBridgeWithdrawalInitiatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeWithdrawalInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2StandardBridgeWithdrawalInitiatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2StandardBridgeWithdrawalInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserCaller_MESSAGEVERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserCaller
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil || opts == nil {
			return
		}

		_L2ToL1MessagePasser.MESSAGEVERSION(opts)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserCaller_MessageNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserCaller
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil || opts == nil {
			return
		}

		_L2ToL1MessagePasser.MessageNonce(opts)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserCaller_SentMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserCaller
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil || opts == nil {
			return
		}

		_L2ToL1MessagePasser.SentMessages(opts, arg0)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserCaller
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil || opts == nil {
			return
		}

		_L2ToL1MessagePasser.Version(opts)
	})
}

// skipping Fuzz_Nosy_L2ToL1MessagePasserCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_L2ToL1MessagePasserCallerSession_MESSAGEVERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserCallerSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.MESSAGEVERSION()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserCallerSession_MessageNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserCallerSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.MessageNonce()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserCallerSession_SentMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserCallerSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.SentMessages(arg0)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserCallerSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.Version()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserFilterer_FilterMessagePassed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserFilterer
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var nonce []*big.Int
		fill_err = tp.Fill(&nonce)
		if fill_err != nil {
			return
		}
		var sender []common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		var t5 []common.Address
		fill_err = tp.Fill(&t5)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil || opts == nil {
			return
		}

		_L2ToL1MessagePasser.FilterMessagePassed(opts, nonce, sender, t5)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserFilterer_FilterWithdrawerBalanceBurnt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserFilterer
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var amount []*big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil || opts == nil {
			return
		}

		_L2ToL1MessagePasser.FilterWithdrawerBalanceBurnt(opts, amount)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserFilterer_ParseMessagePassed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserFilterer
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.ParseMessagePassed(log)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserFilterer_ParseWithdrawerBalanceBurnt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserFilterer
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.ParseWithdrawerBalanceBurnt(log)
	})
}

// skipping Fuzz_Nosy_L2ToL1MessagePasserFilterer_WatchMessagePassed__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2ToL1MessagePasserMessagePassed

// skipping Fuzz_Nosy_L2ToL1MessagePasserFilterer_WatchWithdrawerBalanceBurnt__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.L2ToL1MessagePasserWithdrawerBalanceBurnt

func Fuzz_Nosy_L2ToL1MessagePasserMessagePassedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ToL1MessagePasserMessagePassedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserMessagePassedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ToL1MessagePasserMessagePassedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserMessagePassedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ToL1MessagePasserMessagePassedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_L2ToL1MessagePasserRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_L2ToL1MessagePasserRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L2ToL1MessagePasserRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserRaw
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil || opts == nil {
			return
		}

		_L2ToL1MessagePasser.Transfer(opts)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserSession_Burn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.Burn()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserSession_InitiateWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _gasLimit *big.Int
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil || _gasLimit == nil {
			return
		}

		_L2ToL1MessagePasser.InitiateWithdrawal(_target, _gasLimit, _data)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserSession_MESSAGEVERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.MESSAGEVERSION()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserSession_MessageNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.MessageNonce()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.Receive()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserSession_SentMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.SentMessages(arg0)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.Version()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserTransactor_Burn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserTransactor
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil || opts == nil {
			return
		}

		_L2ToL1MessagePasser.Burn(opts)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserTransactor_InitiateWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserTransactor
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _gasLimit *big.Int
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil || opts == nil || _gasLimit == nil {
			return
		}

		_L2ToL1MessagePasser.InitiateWithdrawal(opts, _target, _gasLimit, _data)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserTransactor
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil || opts == nil {
			return
		}

		_L2ToL1MessagePasser.Receive(opts)
	})
}

// skipping Fuzz_Nosy_L2ToL1MessagePasserTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_L2ToL1MessagePasserTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserTransactorRaw
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil || opts == nil {
			return
		}

		_L2ToL1MessagePasser.Transfer(opts)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserTransactorSession_Burn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserTransactorSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.Burn()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserTransactorSession_InitiateWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserTransactorSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		var _target common.Address
		fill_err = tp.Fill(&_target)
		if fill_err != nil {
			return
		}
		var _gasLimit *big.Int
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil || _gasLimit == nil {
			return
		}

		_L2ToL1MessagePasser.InitiateWithdrawal(_target, _gasLimit, _data)
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _L2ToL1MessagePasser *L2ToL1MessagePasserTransactorSession
		fill_err = tp.Fill(&_L2ToL1MessagePasser)
		if fill_err != nil {
			return
		}
		if _L2ToL1MessagePasser == nil {
			return
		}

		_L2ToL1MessagePasser.Receive()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserWithdrawerBalanceBurntIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ToL1MessagePasserWithdrawerBalanceBurntIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserWithdrawerBalanceBurntIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ToL1MessagePasserWithdrawerBalanceBurntIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_L2ToL1MessagePasserWithdrawerBalanceBurntIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *L2ToL1MessagePasserWithdrawerBalanceBurntIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_LegacyMessagePasserCaller_SentMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _LegacyMessagePasser *LegacyMessagePasserCaller
		fill_err = tp.Fill(&_LegacyMessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _LegacyMessagePasser == nil || opts == nil {
			return
		}

		_LegacyMessagePasser.SentMessages(opts, arg0)
	})
}

func Fuzz_Nosy_LegacyMessagePasserCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _LegacyMessagePasser *LegacyMessagePasserCaller
		fill_err = tp.Fill(&_LegacyMessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _LegacyMessagePasser == nil || opts == nil {
			return
		}

		_LegacyMessagePasser.Version(opts)
	})
}

// skipping Fuzz_Nosy_LegacyMessagePasserCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_LegacyMessagePasserCallerSession_SentMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _LegacyMessagePasser *LegacyMessagePasserCallerSession
		fill_err = tp.Fill(&_LegacyMessagePasser)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _LegacyMessagePasser == nil {
			return
		}

		_LegacyMessagePasser.SentMessages(arg0)
	})
}

func Fuzz_Nosy_LegacyMessagePasserCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _LegacyMessagePasser *LegacyMessagePasserCallerSession
		fill_err = tp.Fill(&_LegacyMessagePasser)
		if fill_err != nil {
			return
		}
		if _LegacyMessagePasser == nil {
			return
		}

		_LegacyMessagePasser.Version()
	})
}

// skipping Fuzz_Nosy_LegacyMessagePasserRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_LegacyMessagePasserRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_LegacyMessagePasserRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _LegacyMessagePasser *LegacyMessagePasserRaw
		fill_err = tp.Fill(&_LegacyMessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _LegacyMessagePasser == nil || opts == nil {
			return
		}

		_LegacyMessagePasser.Transfer(opts)
	})
}

func Fuzz_Nosy_LegacyMessagePasserSession_PassMessageToL1__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _LegacyMessagePasser *LegacyMessagePasserSession
		fill_err = tp.Fill(&_LegacyMessagePasser)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		if _LegacyMessagePasser == nil {
			return
		}

		_LegacyMessagePasser.PassMessageToL1(_message)
	})
}

func Fuzz_Nosy_LegacyMessagePasserSession_SentMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _LegacyMessagePasser *LegacyMessagePasserSession
		fill_err = tp.Fill(&_LegacyMessagePasser)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _LegacyMessagePasser == nil {
			return
		}

		_LegacyMessagePasser.SentMessages(arg0)
	})
}

func Fuzz_Nosy_LegacyMessagePasserSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _LegacyMessagePasser *LegacyMessagePasserSession
		fill_err = tp.Fill(&_LegacyMessagePasser)
		if fill_err != nil {
			return
		}
		if _LegacyMessagePasser == nil {
			return
		}

		_LegacyMessagePasser.Version()
	})
}

func Fuzz_Nosy_LegacyMessagePasserTransactor_PassMessageToL1__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _LegacyMessagePasser *LegacyMessagePasserTransactor
		fill_err = tp.Fill(&_LegacyMessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		if _LegacyMessagePasser == nil || opts == nil {
			return
		}

		_LegacyMessagePasser.PassMessageToL1(opts, _message)
	})
}

// skipping Fuzz_Nosy_LegacyMessagePasserTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_LegacyMessagePasserTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _LegacyMessagePasser *LegacyMessagePasserTransactorRaw
		fill_err = tp.Fill(&_LegacyMessagePasser)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _LegacyMessagePasser == nil || opts == nil {
			return
		}

		_LegacyMessagePasser.Transfer(opts)
	})
}

func Fuzz_Nosy_LegacyMessagePasserTransactorSession_PassMessageToL1__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _LegacyMessagePasser *LegacyMessagePasserTransactorSession
		fill_err = tp.Fill(&_LegacyMessagePasser)
		if fill_err != nil {
			return
		}
		var _message []byte
		fill_err = tp.Fill(&_message)
		if fill_err != nil {
			return
		}
		if _LegacyMessagePasser == nil {
			return
		}

		_LegacyMessagePasser.PassMessageToL1(_message)
	})
}

func Fuzz_Nosy_MIPSCaller_BRKSTART__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSCaller
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MIPS == nil || opts == nil {
			return
		}

		_MIPS.BRKSTART(opts)
	})
}

func Fuzz_Nosy_MIPSCaller_Oracle__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSCaller
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MIPS == nil || opts == nil {
			return
		}

		_MIPS.Oracle(opts)
	})
}

func Fuzz_Nosy_MIPSCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSCaller
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MIPS == nil || opts == nil {
			return
		}

		_MIPS.Version(opts)
	})
}

// skipping Fuzz_Nosy_MIPSCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_MIPSCallerSession_BRKSTART__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSCallerSession
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		if _MIPS == nil {
			return
		}

		_MIPS.BRKSTART()
	})
}

func Fuzz_Nosy_MIPSCallerSession_Oracle__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSCallerSession
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		if _MIPS == nil {
			return
		}

		_MIPS.Oracle()
	})
}

func Fuzz_Nosy_MIPSCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSCallerSession
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		if _MIPS == nil {
			return
		}

		_MIPS.Version()
	})
}

// skipping Fuzz_Nosy_MIPSRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_MIPSRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_MIPSRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSRaw
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MIPS == nil || opts == nil {
			return
		}

		_MIPS.Transfer(opts)
	})
}

func Fuzz_Nosy_MIPSSession_BRKSTART__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSSession
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		if _MIPS == nil {
			return
		}

		_MIPS.BRKSTART()
	})
}

func Fuzz_Nosy_MIPSSession_Oracle__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSSession
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		if _MIPS == nil {
			return
		}

		_MIPS.Oracle()
	})
}

func Fuzz_Nosy_MIPSSession_Step__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSSession
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		var _stateData []byte
		fill_err = tp.Fill(&_stateData)
		if fill_err != nil {
			return
		}
		var _proof []byte
		fill_err = tp.Fill(&_proof)
		if fill_err != nil {
			return
		}
		var _localContext [32]byte
		fill_err = tp.Fill(&_localContext)
		if fill_err != nil {
			return
		}
		if _MIPS == nil {
			return
		}

		_MIPS.Step(_stateData, _proof, _localContext)
	})
}

func Fuzz_Nosy_MIPSSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSSession
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		if _MIPS == nil {
			return
		}

		_MIPS.Version()
	})
}

func Fuzz_Nosy_MIPSTransactor_Step__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSTransactor
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _stateData []byte
		fill_err = tp.Fill(&_stateData)
		if fill_err != nil {
			return
		}
		var _proof []byte
		fill_err = tp.Fill(&_proof)
		if fill_err != nil {
			return
		}
		var _localContext [32]byte
		fill_err = tp.Fill(&_localContext)
		if fill_err != nil {
			return
		}
		if _MIPS == nil || opts == nil {
			return
		}

		_MIPS.Step(opts, _stateData, _proof, _localContext)
	})
}

// skipping Fuzz_Nosy_MIPSTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_MIPSTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSTransactorRaw
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MIPS == nil || opts == nil {
			return
		}

		_MIPS.Transfer(opts)
	})
}

func Fuzz_Nosy_MIPSTransactorSession_Step__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MIPS *MIPSTransactorSession
		fill_err = tp.Fill(&_MIPS)
		if fill_err != nil {
			return
		}
		var _stateData []byte
		fill_err = tp.Fill(&_stateData)
		if fill_err != nil {
			return
		}
		var _proof []byte
		fill_err = tp.Fill(&_proof)
		if fill_err != nil {
			return
		}
		var _localContext [32]byte
		fill_err = tp.Fill(&_localContext)
		if fill_err != nil {
			return
		}
		if _MIPS == nil {
			return
		}

		_MIPS.Step(_stateData, _proof, _localContext)
	})
}

func Fuzz_Nosy_MultiCall3Caller_GetBasefee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Caller
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.GetBasefee(opts)
	})
}

func Fuzz_Nosy_MultiCall3Caller_GetBlockHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Caller
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var blockNumber *big.Int
		fill_err = tp.Fill(&blockNumber)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil || blockNumber == nil {
			return
		}

		_MultiCall3.GetBlockHash(opts, blockNumber)
	})
}

func Fuzz_Nosy_MultiCall3Caller_GetBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Caller
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.GetBlockNumber(opts)
	})
}

func Fuzz_Nosy_MultiCall3Caller_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Caller
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.GetChainId(opts)
	})
}

func Fuzz_Nosy_MultiCall3Caller_GetCurrentBlockCoinbase__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Caller
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.GetCurrentBlockCoinbase(opts)
	})
}

func Fuzz_Nosy_MultiCall3Caller_GetCurrentBlockDifficulty__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Caller
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.GetCurrentBlockDifficulty(opts)
	})
}

func Fuzz_Nosy_MultiCall3Caller_GetCurrentBlockGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Caller
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.GetCurrentBlockGasLimit(opts)
	})
}

func Fuzz_Nosy_MultiCall3Caller_GetCurrentBlockTimestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Caller
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.GetCurrentBlockTimestamp(opts)
	})
}

func Fuzz_Nosy_MultiCall3Caller_GetEthBalance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Caller
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var addr common.Address
		fill_err = tp.Fill(&addr)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.GetEthBalance(opts, addr)
	})
}

func Fuzz_Nosy_MultiCall3Caller_GetLastBlockHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Caller
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.GetLastBlockHash(opts)
	})
}

// skipping Fuzz_Nosy_MultiCall3CallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_MultiCall3CallerSession_GetBasefee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3CallerSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetBasefee()
	})
}

func Fuzz_Nosy_MultiCall3CallerSession_GetBlockHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3CallerSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var blockNumber *big.Int
		fill_err = tp.Fill(&blockNumber)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || blockNumber == nil {
			return
		}

		_MultiCall3.GetBlockHash(blockNumber)
	})
}

func Fuzz_Nosy_MultiCall3CallerSession_GetBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3CallerSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetBlockNumber()
	})
}

func Fuzz_Nosy_MultiCall3CallerSession_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3CallerSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetChainId()
	})
}

func Fuzz_Nosy_MultiCall3CallerSession_GetCurrentBlockCoinbase__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3CallerSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetCurrentBlockCoinbase()
	})
}

func Fuzz_Nosy_MultiCall3CallerSession_GetCurrentBlockDifficulty__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3CallerSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetCurrentBlockDifficulty()
	})
}

func Fuzz_Nosy_MultiCall3CallerSession_GetCurrentBlockGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3CallerSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetCurrentBlockGasLimit()
	})
}

func Fuzz_Nosy_MultiCall3CallerSession_GetCurrentBlockTimestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3CallerSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetCurrentBlockTimestamp()
	})
}

func Fuzz_Nosy_MultiCall3CallerSession_GetEthBalance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3CallerSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var addr common.Address
		fill_err = tp.Fill(&addr)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetEthBalance(addr)
	})
}

func Fuzz_Nosy_MultiCall3CallerSession_GetLastBlockHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3CallerSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetLastBlockHash()
	})
}

// skipping Fuzz_Nosy_MultiCall3Raw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_MultiCall3Raw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_MultiCall3Raw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Raw
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.Transfer(opts)
	})
}

func Fuzz_Nosy_MultiCall3Session_Aggregate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.Aggregate(calls)
	})
}

func Fuzz_Nosy_MultiCall3Session_Aggregate3__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call3
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.Aggregate3(calls)
	})
}

func Fuzz_Nosy_MultiCall3Session_Aggregate3Value__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call3Value
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.Aggregate3Value(calls)
	})
}

func Fuzz_Nosy_MultiCall3Session_BlockAndAggregate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.BlockAndAggregate(calls)
	})
}

func Fuzz_Nosy_MultiCall3Session_GetBasefee__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetBasefee()
	})
}

func Fuzz_Nosy_MultiCall3Session_GetBlockHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var blockNumber *big.Int
		fill_err = tp.Fill(&blockNumber)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || blockNumber == nil {
			return
		}

		_MultiCall3.GetBlockHash(blockNumber)
	})
}

func Fuzz_Nosy_MultiCall3Session_GetBlockNumber__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetBlockNumber()
	})
}

func Fuzz_Nosy_MultiCall3Session_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetChainId()
	})
}

func Fuzz_Nosy_MultiCall3Session_GetCurrentBlockCoinbase__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetCurrentBlockCoinbase()
	})
}

func Fuzz_Nosy_MultiCall3Session_GetCurrentBlockDifficulty__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetCurrentBlockDifficulty()
	})
}

func Fuzz_Nosy_MultiCall3Session_GetCurrentBlockGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetCurrentBlockGasLimit()
	})
}

func Fuzz_Nosy_MultiCall3Session_GetCurrentBlockTimestamp__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetCurrentBlockTimestamp()
	})
}

func Fuzz_Nosy_MultiCall3Session_GetEthBalance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var addr common.Address
		fill_err = tp.Fill(&addr)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetEthBalance(addr)
	})
}

func Fuzz_Nosy_MultiCall3Session_GetLastBlockHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.GetLastBlockHash()
	})
}

func Fuzz_Nosy_MultiCall3Session_TryAggregate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var requireSuccess bool
		fill_err = tp.Fill(&requireSuccess)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.TryAggregate(requireSuccess, calls)
	})
}

func Fuzz_Nosy_MultiCall3Session_TryBlockAndAggregate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Session
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var requireSuccess bool
		fill_err = tp.Fill(&requireSuccess)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.TryBlockAndAggregate(requireSuccess, calls)
	})
}

func Fuzz_Nosy_MultiCall3Transactor_Aggregate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Transactor
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.Aggregate(opts, calls)
	})
}

func Fuzz_Nosy_MultiCall3Transactor_Aggregate3__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Transactor
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call3
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.Aggregate3(opts, calls)
	})
}

func Fuzz_Nosy_MultiCall3Transactor_Aggregate3Value__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Transactor
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call3Value
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.Aggregate3Value(opts, calls)
	})
}

func Fuzz_Nosy_MultiCall3Transactor_BlockAndAggregate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Transactor
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.BlockAndAggregate(opts, calls)
	})
}

func Fuzz_Nosy_MultiCall3Transactor_TryAggregate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Transactor
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var requireSuccess bool
		fill_err = tp.Fill(&requireSuccess)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.TryAggregate(opts, requireSuccess, calls)
	})
}

func Fuzz_Nosy_MultiCall3Transactor_TryBlockAndAggregate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3Transactor
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var requireSuccess bool
		fill_err = tp.Fill(&requireSuccess)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.TryBlockAndAggregate(opts, requireSuccess, calls)
	})
}

// skipping Fuzz_Nosy_MultiCall3TransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_MultiCall3TransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3TransactorRaw
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil || opts == nil {
			return
		}

		_MultiCall3.Transfer(opts)
	})
}

func Fuzz_Nosy_MultiCall3TransactorSession_Aggregate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3TransactorSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.Aggregate(calls)
	})
}

func Fuzz_Nosy_MultiCall3TransactorSession_Aggregate3__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3TransactorSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call3
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.Aggregate3(calls)
	})
}

func Fuzz_Nosy_MultiCall3TransactorSession_Aggregate3Value__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3TransactorSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call3Value
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.Aggregate3Value(calls)
	})
}

func Fuzz_Nosy_MultiCall3TransactorSession_BlockAndAggregate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3TransactorSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.BlockAndAggregate(calls)
	})
}

func Fuzz_Nosy_MultiCall3TransactorSession_TryAggregate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3TransactorSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var requireSuccess bool
		fill_err = tp.Fill(&requireSuccess)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.TryAggregate(requireSuccess, calls)
	})
}

func Fuzz_Nosy_MultiCall3TransactorSession_TryBlockAndAggregate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiCall3 *MultiCall3TransactorSession
		fill_err = tp.Fill(&_MultiCall3)
		if fill_err != nil {
			return
		}
		var requireSuccess bool
		fill_err = tp.Fill(&requireSuccess)
		if fill_err != nil {
			return
		}
		var calls []Multicall3Call
		fill_err = tp.Fill(&calls)
		if fill_err != nil {
			return
		}
		if _MultiCall3 == nil {
			return
		}

		_MultiCall3.TryBlockAndAggregate(requireSuccess, calls)
	})
}

// skipping Fuzz_Nosy_MultiSendCallOnlyV130CallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_MultiSendCallOnlyV130Raw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_MultiSendCallOnlyV130Raw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_MultiSendCallOnlyV130Raw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiSendCallOnlyV130 *MultiSendCallOnlyV130Raw
		fill_err = tp.Fill(&_MultiSendCallOnlyV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiSendCallOnlyV130 == nil || opts == nil {
			return
		}

		_MultiSendCallOnlyV130.Transfer(opts)
	})
}

func Fuzz_Nosy_MultiSendCallOnlyV130Session_MultiSend__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiSendCallOnlyV130 *MultiSendCallOnlyV130Session
		fill_err = tp.Fill(&_MultiSendCallOnlyV130)
		if fill_err != nil {
			return
		}
		var transactions []byte
		fill_err = tp.Fill(&transactions)
		if fill_err != nil {
			return
		}
		if _MultiSendCallOnlyV130 == nil {
			return
		}

		_MultiSendCallOnlyV130.MultiSend(transactions)
	})
}

func Fuzz_Nosy_MultiSendCallOnlyV130Transactor_MultiSend__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiSendCallOnlyV130 *MultiSendCallOnlyV130Transactor
		fill_err = tp.Fill(&_MultiSendCallOnlyV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var transactions []byte
		fill_err = tp.Fill(&transactions)
		if fill_err != nil {
			return
		}
		if _MultiSendCallOnlyV130 == nil || opts == nil {
			return
		}

		_MultiSendCallOnlyV130.MultiSend(opts, transactions)
	})
}

// skipping Fuzz_Nosy_MultiSendCallOnlyV130TransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_MultiSendCallOnlyV130TransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiSendCallOnlyV130 *MultiSendCallOnlyV130TransactorRaw
		fill_err = tp.Fill(&_MultiSendCallOnlyV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiSendCallOnlyV130 == nil || opts == nil {
			return
		}

		_MultiSendCallOnlyV130.Transfer(opts)
	})
}

func Fuzz_Nosy_MultiSendCallOnlyV130TransactorSession_MultiSend__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiSendCallOnlyV130 *MultiSendCallOnlyV130TransactorSession
		fill_err = tp.Fill(&_MultiSendCallOnlyV130)
		if fill_err != nil {
			return
		}
		var transactions []byte
		fill_err = tp.Fill(&transactions)
		if fill_err != nil {
			return
		}
		if _MultiSendCallOnlyV130 == nil {
			return
		}

		_MultiSendCallOnlyV130.MultiSend(transactions)
	})
}

// skipping Fuzz_Nosy_MultiSendV130CallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_MultiSendV130Raw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_MultiSendV130Raw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_MultiSendV130Raw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiSendV130 *MultiSendV130Raw
		fill_err = tp.Fill(&_MultiSendV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiSendV130 == nil || opts == nil {
			return
		}

		_MultiSendV130.Transfer(opts)
	})
}

func Fuzz_Nosy_MultiSendV130Session_MultiSend__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiSendV130 *MultiSendV130Session
		fill_err = tp.Fill(&_MultiSendV130)
		if fill_err != nil {
			return
		}
		var transactions []byte
		fill_err = tp.Fill(&transactions)
		if fill_err != nil {
			return
		}
		if _MultiSendV130 == nil {
			return
		}

		_MultiSendV130.MultiSend(transactions)
	})
}

func Fuzz_Nosy_MultiSendV130Transactor_MultiSend__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiSendV130 *MultiSendV130Transactor
		fill_err = tp.Fill(&_MultiSendV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var transactions []byte
		fill_err = tp.Fill(&transactions)
		if fill_err != nil {
			return
		}
		if _MultiSendV130 == nil || opts == nil {
			return
		}

		_MultiSendV130.MultiSend(opts, transactions)
	})
}

// skipping Fuzz_Nosy_MultiSendV130TransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_MultiSendV130TransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiSendV130 *MultiSendV130TransactorRaw
		fill_err = tp.Fill(&_MultiSendV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _MultiSendV130 == nil || opts == nil {
			return
		}

		_MultiSendV130.Transfer(opts)
	})
}

func Fuzz_Nosy_MultiSendV130TransactorSession_MultiSend__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _MultiSendV130 *MultiSendV130TransactorSession
		fill_err = tp.Fill(&_MultiSendV130)
		if fill_err != nil {
			return
		}
		var transactions []byte
		fill_err = tp.Fill(&transactions)
		if fill_err != nil {
			return
		}
		if _MultiSendV130 == nil {
			return
		}

		_MultiSendV130.MultiSend(transactions)
	})
}

func Fuzz_Nosy_OptimismMintableERC20ApprovalIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20ApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_OptimismMintableERC20ApprovalIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20ApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_OptimismMintableERC20ApprovalIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20ApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_OptimismMintableERC20BurnIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20BurnIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_OptimismMintableERC20BurnIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20BurnIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_OptimismMintableERC20BurnIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20BurnIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.Allowance(opts, owner, spender)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_BRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.BRIDGE(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.BalanceOf(opts, account)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_Bridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.Bridge(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.Decimals(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_L1Token__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.L1Token(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_L2Bridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.L2Bridge(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.Name(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_REMOTETOKEN__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.REMOTETOKEN(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_RemoteToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.RemoteToken(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_SupportsInterface__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _interfaceId [4]byte
		fill_err = tp.Fill(&_interfaceId)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.SupportsInterface(opts, _interfaceId)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.Symbol(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.TotalSupply(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Caller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Caller
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.Version(opts)
	})
}

// skipping Fuzz_Nosy_OptimismMintableERC20CallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.Allowance(owner, spender)
	})
}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_BRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.BRIDGE()
	})
}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.BalanceOf(account)
	})
}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_Bridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.Bridge()
	})
}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.Decimals()
	})
}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_L1Token__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.L1Token()
	})
}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_L2Bridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.L2Bridge()
	})
}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.Name()
	})
}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_REMOTETOKEN__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.REMOTETOKEN()
	})
}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_RemoteToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.RemoteToken()
	})
}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_SupportsInterface__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var _interfaceId [4]byte
		fill_err = tp.Fill(&_interfaceId)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.SupportsInterface(_interfaceId)
	})
}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.Symbol()
	})
}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.TotalSupply()
	})
}

func Fuzz_Nosy_OptimismMintableERC20CallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20CallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.Version()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryCaller_BRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryCaller
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC20Factory.BRIDGE(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryCaller_Bridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryCaller
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC20Factory.Bridge(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryCaller
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC20Factory.Version(opts)
	})
}

// skipping Fuzz_Nosy_OptimismMintableERC20FactoryCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_OptimismMintableERC20FactoryCallerSession_BRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryCallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.BRIDGE()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryCallerSession_Bridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryCallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.Bridge()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryCallerSession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.Version()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryFilterer
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC20Factory.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryFilterer_FilterOptimismMintableERC20Created__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryFilterer
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var localToken []common.Address
		fill_err = tp.Fill(&localToken)
		if fill_err != nil {
			return
		}
		var remoteToken []common.Address
		fill_err = tp.Fill(&remoteToken)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC20Factory.FilterOptimismMintableERC20Created(opts, localToken, remoteToken)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryFilterer_FilterStandardL2TokenCreated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryFilterer
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var remoteToken []common.Address
		fill_err = tp.Fill(&remoteToken)
		if fill_err != nil {
			return
		}
		var localToken []common.Address
		fill_err = tp.Fill(&localToken)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC20Factory.FilterStandardL2TokenCreated(opts, remoteToken, localToken)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryFilterer
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.ParseInitialized(log)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryFilterer_ParseOptimismMintableERC20Created__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryFilterer
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.ParseOptimismMintableERC20Created(log)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryFilterer_ParseStandardL2TokenCreated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryFilterer
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.ParseStandardL2TokenCreated(log)
	})
}

// skipping Fuzz_Nosy_OptimismMintableERC20FactoryFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.OptimismMintableERC20FactoryInitialized

// skipping Fuzz_Nosy_OptimismMintableERC20FactoryFilterer_WatchOptimismMintableERC20Created__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.OptimismMintableERC20FactoryOptimismMintableERC20Created

// skipping Fuzz_Nosy_OptimismMintableERC20FactoryFilterer_WatchStandardL2TokenCreated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.OptimismMintableERC20FactoryStandardL2TokenCreated

func Fuzz_Nosy_OptimismMintableERC20FactoryInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20FactoryInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20FactoryInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20FactoryInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryOptimismMintableERC20CreatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20FactoryOptimismMintableERC20CreatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryOptimismMintableERC20CreatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20FactoryOptimismMintableERC20CreatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryOptimismMintableERC20CreatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20FactoryOptimismMintableERC20CreatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_OptimismMintableERC20FactoryRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_OptimismMintableERC20FactoryRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_OptimismMintableERC20FactoryRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryRaw
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC20Factory.Transfer(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactorySession_BRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactorySession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.BRIDGE()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactorySession_Bridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactorySession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.Bridge()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactorySession_CreateOptimismMintableERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactorySession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol string
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.CreateOptimismMintableERC20(_remoteToken, _name, _symbol)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactorySession_CreateOptimismMintableERC20WithDecimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactorySession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol string
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		var _decimals uint8
		fill_err = tp.Fill(&_decimals)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.CreateOptimismMintableERC20WithDecimals(_remoteToken, _name, _symbol, _decimals)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactorySession_CreateStandardL2Token__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactorySession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol string
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.CreateStandardL2Token(_remoteToken, _name, _symbol)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactorySession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactorySession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var _bridge common.Address
		fill_err = tp.Fill(&_bridge)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.Initialize(_bridge)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactorySession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactorySession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.Version()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryStandardL2TokenCreatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20FactoryStandardL2TokenCreatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryStandardL2TokenCreatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20FactoryStandardL2TokenCreatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryStandardL2TokenCreatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20FactoryStandardL2TokenCreatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryTransactor_CreateOptimismMintableERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryTransactor
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol string
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC20Factory.CreateOptimismMintableERC20(opts, _remoteToken, _name, _symbol)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryTransactor_CreateOptimismMintableERC20WithDecimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryTransactor
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol string
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		var _decimals uint8
		fill_err = tp.Fill(&_decimals)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC20Factory.CreateOptimismMintableERC20WithDecimals(opts, _remoteToken, _name, _symbol, _decimals)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryTransactor_CreateStandardL2Token__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryTransactor
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol string
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC20Factory.CreateStandardL2Token(opts, _remoteToken, _name, _symbol)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryTransactor
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _bridge common.Address
		fill_err = tp.Fill(&_bridge)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC20Factory.Initialize(opts, _bridge)
	})
}

// skipping Fuzz_Nosy_OptimismMintableERC20FactoryTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_OptimismMintableERC20FactoryTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryTransactorRaw
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC20Factory.Transfer(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryTransactorSession_CreateOptimismMintableERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryTransactorSession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol string
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.CreateOptimismMintableERC20(_remoteToken, _name, _symbol)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryTransactorSession_CreateOptimismMintableERC20WithDecimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryTransactorSession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol string
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		var _decimals uint8
		fill_err = tp.Fill(&_decimals)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.CreateOptimismMintableERC20WithDecimals(_remoteToken, _name, _symbol, _decimals)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryTransactorSession_CreateStandardL2Token__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryTransactorSession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol string
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.CreateStandardL2Token(_remoteToken, _name, _symbol)
	})
}

func Fuzz_Nosy_OptimismMintableERC20FactoryTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20Factory *OptimismMintableERC20FactoryTransactorSession
		fill_err = tp.Fill(&_OptimismMintableERC20Factory)
		if fill_err != nil {
			return
		}
		var _bridge common.Address
		fill_err = tp.Fill(&_bridge)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20Factory == nil {
			return
		}

		_OptimismMintableERC20Factory.Initialize(_bridge)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Filterer_FilterApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Filterer
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner []common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender []common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.FilterApproval(opts, owner, spender)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Filterer_FilterBurn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Filterer
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account []common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.FilterBurn(opts, account)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Filterer_FilterMint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Filterer
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var account []common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.FilterMint(opts, account)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Filterer_FilterTransfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Filterer
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to []common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.FilterTransfer(opts, from, to)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Filterer_ParseApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Filterer
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.ParseApproval(log)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Filterer_ParseBurn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Filterer
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.ParseBurn(log)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Filterer_ParseMint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Filterer
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.ParseMint(log)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Filterer_ParseTransfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Filterer
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.ParseTransfer(log)
	})
}

// skipping Fuzz_Nosy_OptimismMintableERC20Filterer_WatchApproval__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.OptimismMintableERC20Approval

// skipping Fuzz_Nosy_OptimismMintableERC20Filterer_WatchBurn__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.OptimismMintableERC20Burn

// skipping Fuzz_Nosy_OptimismMintableERC20Filterer_WatchMint__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.OptimismMintableERC20Mint

// skipping Fuzz_Nosy_OptimismMintableERC20Filterer_WatchTransfer__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.OptimismMintableERC20Transfer

func Fuzz_Nosy_OptimismMintableERC20MintIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20MintIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_OptimismMintableERC20MintIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20MintIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_OptimismMintableERC20MintIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20MintIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_OptimismMintableERC20Raw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_OptimismMintableERC20Raw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_OptimismMintableERC20Raw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Raw
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.Transfer(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.Allowance(owner, spender)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || amount == nil {
			return
		}

		_OptimismMintableERC20.Approve(spender, amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_BRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.BRIDGE()
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var account common.Address
		fill_err = tp.Fill(&account)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.BalanceOf(account)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_Bridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.Bridge()
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_Burn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || _amount == nil {
			return
		}

		_OptimismMintableERC20.Burn(_from, _amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.Decimals()
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_DecreaseAllowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var subtractedValue *big.Int
		fill_err = tp.Fill(&subtractedValue)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || subtractedValue == nil {
			return
		}

		_OptimismMintableERC20.DecreaseAllowance(spender, subtractedValue)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_IncreaseAllowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var addedValue *big.Int
		fill_err = tp.Fill(&addedValue)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || addedValue == nil {
			return
		}

		_OptimismMintableERC20.IncreaseAllowance(spender, addedValue)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_L1Token__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.L1Token()
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_L2Bridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.L2Bridge()
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_Mint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || _amount == nil {
			return
		}

		_OptimismMintableERC20.Mint(_to, _amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.Name()
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_REMOTETOKEN__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.REMOTETOKEN()
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_RemoteToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.RemoteToken()
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_SupportsInterface__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var _interfaceId [4]byte
		fill_err = tp.Fill(&_interfaceId)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.SupportsInterface(_interfaceId)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.Symbol()
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.TotalSupply()
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || amount == nil {
			return
		}

		_OptimismMintableERC20.Transfer(to, amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var from common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || amount == nil {
			return
		}

		_OptimismMintableERC20.TransferFrom(from, to, amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Session_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Session
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil {
			return
		}

		_OptimismMintableERC20.Version()
	})
}

func Fuzz_Nosy_OptimismMintableERC20Transactor_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Transactor
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil || amount == nil {
			return
		}

		_OptimismMintableERC20.Approve(opts, spender, amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Transactor_Burn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Transactor
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil || _amount == nil {
			return
		}

		_OptimismMintableERC20.Burn(opts, _from, _amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Transactor_DecreaseAllowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Transactor
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var subtractedValue *big.Int
		fill_err = tp.Fill(&subtractedValue)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil || subtractedValue == nil {
			return
		}

		_OptimismMintableERC20.DecreaseAllowance(opts, spender, subtractedValue)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Transactor_IncreaseAllowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Transactor
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var addedValue *big.Int
		fill_err = tp.Fill(&addedValue)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil || addedValue == nil {
			return
		}

		_OptimismMintableERC20.IncreaseAllowance(opts, spender, addedValue)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Transactor_Mint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Transactor
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil || _amount == nil {
			return
		}

		_OptimismMintableERC20.Mint(opts, _to, _amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Transactor_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Transactor
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil || amount == nil {
			return
		}

		_OptimismMintableERC20.Transfer(opts, to, amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20Transactor_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20Transactor
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil || amount == nil {
			return
		}

		_OptimismMintableERC20.TransferFrom(opts, from, to, amount)
	})
}

// skipping Fuzz_Nosy_OptimismMintableERC20TransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_OptimismMintableERC20TransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20TransactorRaw
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || opts == nil {
			return
		}

		_OptimismMintableERC20.Transfer(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC20TransactorSession_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20TransactorSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || amount == nil {
			return
		}

		_OptimismMintableERC20.Approve(spender, amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20TransactorSession_Burn__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20TransactorSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || _amount == nil {
			return
		}

		_OptimismMintableERC20.Burn(_from, _amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20TransactorSession_DecreaseAllowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20TransactorSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var subtractedValue *big.Int
		fill_err = tp.Fill(&subtractedValue)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || subtractedValue == nil {
			return
		}

		_OptimismMintableERC20.DecreaseAllowance(spender, subtractedValue)
	})
}

func Fuzz_Nosy_OptimismMintableERC20TransactorSession_IncreaseAllowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20TransactorSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var addedValue *big.Int
		fill_err = tp.Fill(&addedValue)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || addedValue == nil {
			return
		}

		_OptimismMintableERC20.IncreaseAllowance(spender, addedValue)
	})
}

func Fuzz_Nosy_OptimismMintableERC20TransactorSession_Mint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20TransactorSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || _amount == nil {
			return
		}

		_OptimismMintableERC20.Mint(_to, _amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20TransactorSession_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20TransactorSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || amount == nil {
			return
		}

		_OptimismMintableERC20.Transfer(to, amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20TransactorSession_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC20 *OptimismMintableERC20TransactorSession
		fill_err = tp.Fill(&_OptimismMintableERC20)
		if fill_err != nil {
			return
		}
		var from common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC20 == nil || amount == nil {
			return
		}

		_OptimismMintableERC20.TransferFrom(from, to, amount)
	})
}

func Fuzz_Nosy_OptimismMintableERC20TransferIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20TransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_OptimismMintableERC20TransferIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20TransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_OptimismMintableERC20TransferIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC20TransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactoryCaller_BRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryCaller
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC721Factory.BRIDGE(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactoryCaller_IsOptimismMintableERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryCaller
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC721Factory.IsOptimismMintableERC721(opts, arg0)
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactoryCaller_REMOTECHAINID__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryCaller
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC721Factory.REMOTECHAINID(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactoryCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryCaller
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC721Factory.Version(opts)
	})
}

// skipping Fuzz_Nosy_OptimismMintableERC721FactoryCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_OptimismMintableERC721FactoryCallerSession_BRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryCallerSession
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil {
			return
		}

		_OptimismMintableERC721Factory.BRIDGE()
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactoryCallerSession_IsOptimismMintableERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryCallerSession
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil {
			return
		}

		_OptimismMintableERC721Factory.IsOptimismMintableERC721(arg0)
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactoryCallerSession_REMOTECHAINID__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryCallerSession
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil {
			return
		}

		_OptimismMintableERC721Factory.REMOTECHAINID()
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactoryCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryCallerSession
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil {
			return
		}

		_OptimismMintableERC721Factory.Version()
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactoryFilterer_FilterOptimismMintableERC721Created__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryFilterer
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var localToken []common.Address
		fill_err = tp.Fill(&localToken)
		if fill_err != nil {
			return
		}
		var remoteToken []common.Address
		fill_err = tp.Fill(&remoteToken)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC721Factory.FilterOptimismMintableERC721Created(opts, localToken, remoteToken)
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactoryFilterer_ParseOptimismMintableERC721Created__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryFilterer
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil {
			return
		}

		_OptimismMintableERC721Factory.ParseOptimismMintableERC721Created(log)
	})
}

// skipping Fuzz_Nosy_OptimismMintableERC721FactoryFilterer_WatchOptimismMintableERC721Created__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.OptimismMintableERC721FactoryOptimismMintableERC721Created

func Fuzz_Nosy_OptimismMintableERC721FactoryOptimismMintableERC721CreatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC721FactoryOptimismMintableERC721CreatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactoryOptimismMintableERC721CreatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC721FactoryOptimismMintableERC721CreatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactoryOptimismMintableERC721CreatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismMintableERC721FactoryOptimismMintableERC721CreatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_OptimismMintableERC721FactoryRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_OptimismMintableERC721FactoryRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_OptimismMintableERC721FactoryRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryRaw
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC721Factory.Transfer(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactorySession_BRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactorySession
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil {
			return
		}

		_OptimismMintableERC721Factory.BRIDGE()
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactorySession_CreateOptimismMintableERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactorySession
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol string
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil {
			return
		}

		_OptimismMintableERC721Factory.CreateOptimismMintableERC721(_remoteToken, _name, _symbol)
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactorySession_IsOptimismMintableERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactorySession
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil {
			return
		}

		_OptimismMintableERC721Factory.IsOptimismMintableERC721(arg0)
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactorySession_REMOTECHAINID__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactorySession
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil {
			return
		}

		_OptimismMintableERC721Factory.REMOTECHAINID()
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactorySession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactorySession
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil {
			return
		}

		_OptimismMintableERC721Factory.Version()
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactoryTransactor_CreateOptimismMintableERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryTransactor
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol string
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC721Factory.CreateOptimismMintableERC721(opts, _remoteToken, _name, _symbol)
	})
}

// skipping Fuzz_Nosy_OptimismMintableERC721FactoryTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_OptimismMintableERC721FactoryTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryTransactorRaw
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil || opts == nil {
			return
		}

		_OptimismMintableERC721Factory.Transfer(opts)
	})
}

func Fuzz_Nosy_OptimismMintableERC721FactoryTransactorSession_CreateOptimismMintableERC721__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismMintableERC721Factory *OptimismMintableERC721FactoryTransactorSession
		fill_err = tp.Fill(&_OptimismMintableERC721Factory)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol string
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _OptimismMintableERC721Factory == nil {
			return
		}

		_OptimismMintableERC721Factory.CreateOptimismMintableERC721(_remoteToken, _name, _symbol)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_Balance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.Balance(opts)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_FinalizedWithdrawals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.FinalizedWithdrawals(opts, arg0)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_GasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.GasPayingToken(opts)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_Guardian__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.Guardian(opts)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_IsOutputFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l2OutputIndex *big.Int
		fill_err = tp.Fill(&_l2OutputIndex)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil || _l2OutputIndex == nil {
			return
		}

		_OptimismPortal.IsOutputFinalized(opts, _l2OutputIndex)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_L2Oracle__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.L2Oracle(opts)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_L2Sender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.L2Sender(opts)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_MinimumGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _byteCount uint64
		fill_err = tp.Fill(&_byteCount)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.MinimumGasLimit(opts, _byteCount)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_Params__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.Params(opts)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.Paused(opts)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_ProvenWithdrawals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.ProvenWithdrawals(opts, arg0)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_SuperchainConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.SuperchainConfig(opts)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_SystemConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.SystemConfig(opts)
	})
}

func Fuzz_Nosy_OptimismPortalCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCaller
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.Version(opts)
	})
}

// skipping Fuzz_Nosy_OptimismPortalCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_OptimismPortalCallerSession_Balance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Balance()
	})
}

func Fuzz_Nosy_OptimismPortalCallerSession_FinalizedWithdrawals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.FinalizedWithdrawals(arg0)
	})
}

func Fuzz_Nosy_OptimismPortalCallerSession_GasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.GasPayingToken()
	})
}

func Fuzz_Nosy_OptimismPortalCallerSession_Guardian__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Guardian()
	})
}

func Fuzz_Nosy_OptimismPortalCallerSession_IsOutputFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _l2OutputIndex *big.Int
		fill_err = tp.Fill(&_l2OutputIndex)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || _l2OutputIndex == nil {
			return
		}

		_OptimismPortal.IsOutputFinalized(_l2OutputIndex)
	})
}

func Fuzz_Nosy_OptimismPortalCallerSession_L2Oracle__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.L2Oracle()
	})
}

func Fuzz_Nosy_OptimismPortalCallerSession_L2Sender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.L2Sender()
	})
}

func Fuzz_Nosy_OptimismPortalCallerSession_MinimumGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _byteCount uint64
		fill_err = tp.Fill(&_byteCount)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.MinimumGasLimit(_byteCount)
	})
}

func Fuzz_Nosy_OptimismPortalCallerSession_Params__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Params()
	})
}

func Fuzz_Nosy_OptimismPortalCallerSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Paused()
	})
}

func Fuzz_Nosy_OptimismPortalCallerSession_ProvenWithdrawals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.ProvenWithdrawals(arg0)
	})
}

func Fuzz_Nosy_OptimismPortalCallerSession_SuperchainConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.SuperchainConfig()
	})
}

func Fuzz_Nosy_OptimismPortalCallerSession_SystemConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.SystemConfig()
	})
}

func Fuzz_Nosy_OptimismPortalCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalCallerSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Version()
	})
}

func Fuzz_Nosy_OptimismPortalFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalFilterer
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_OptimismPortalFilterer_FilterTransactionDeposited__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalFilterer
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to []common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var version []*big.Int
		fill_err = tp.Fill(&version)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.FilterTransactionDeposited(opts, from, to, version)
	})
}

func Fuzz_Nosy_OptimismPortalFilterer_FilterWithdrawalFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalFilterer
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var withdrawalHash [][32]byte
		fill_err = tp.Fill(&withdrawalHash)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.FilterWithdrawalFinalized(opts, withdrawalHash)
	})
}

func Fuzz_Nosy_OptimismPortalFilterer_FilterWithdrawalProven__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalFilterer
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var withdrawalHash [][32]byte
		fill_err = tp.Fill(&withdrawalHash)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to []common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.FilterWithdrawalProven(opts, withdrawalHash, from, to)
	})
}

func Fuzz_Nosy_OptimismPortalFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalFilterer
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.ParseInitialized(log)
	})
}

func Fuzz_Nosy_OptimismPortalFilterer_ParseTransactionDeposited__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalFilterer
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.ParseTransactionDeposited(log)
	})
}

func Fuzz_Nosy_OptimismPortalFilterer_ParseWithdrawalFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalFilterer
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.ParseWithdrawalFinalized(log)
	})
}

func Fuzz_Nosy_OptimismPortalFilterer_ParseWithdrawalProven__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalFilterer
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.ParseWithdrawalProven(log)
	})
}

// skipping Fuzz_Nosy_OptimismPortalFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.OptimismPortalInitialized

// skipping Fuzz_Nosy_OptimismPortalFilterer_WatchTransactionDeposited__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.OptimismPortalTransactionDeposited

// skipping Fuzz_Nosy_OptimismPortalFilterer_WatchWithdrawalFinalized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.OptimismPortalWithdrawalFinalized

// skipping Fuzz_Nosy_OptimismPortalFilterer_WatchWithdrawalProven__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.OptimismPortalWithdrawalProven

func Fuzz_Nosy_OptimismPortalInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismPortalInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_OptimismPortalInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismPortalInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_OptimismPortalInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismPortalInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_OptimismPortalRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_OptimismPortalRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_OptimismPortalRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalRaw
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.Transfer(opts)
	})
}

func Fuzz_Nosy_OptimismPortalSession_Balance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Balance()
	})
}

func Fuzz_Nosy_OptimismPortalSession_DepositERC20Transaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _mint *big.Int
		fill_err = tp.Fill(&_mint)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _gasLimit uint64
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		var _isCreation bool
		fill_err = tp.Fill(&_isCreation)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || _mint == nil || _value == nil {
			return
		}

		_OptimismPortal.DepositERC20Transaction(_to, _mint, _value, _gasLimit, _isCreation, _data)
	})
}

func Fuzz_Nosy_OptimismPortalSession_DepositTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _gasLimit uint64
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		var _isCreation bool
		fill_err = tp.Fill(&_isCreation)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || _value == nil {
			return
		}

		_OptimismPortal.DepositTransaction(_to, _value, _gasLimit, _isCreation, _data)
	})
}

func Fuzz_Nosy_OptimismPortalSession_DonateETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.DonateETH()
	})
}

func Fuzz_Nosy_OptimismPortalSession_FinalizeWithdrawalTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _tx TypesWithdrawalTransaction
		fill_err = tp.Fill(&_tx)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.FinalizeWithdrawalTransaction(_tx)
	})
}

func Fuzz_Nosy_OptimismPortalSession_FinalizedWithdrawals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.FinalizedWithdrawals(arg0)
	})
}

func Fuzz_Nosy_OptimismPortalSession_GasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.GasPayingToken()
	})
}

func Fuzz_Nosy_OptimismPortalSession_Guardian__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Guardian()
	})
}

func Fuzz_Nosy_OptimismPortalSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _l2Oracle common.Address
		fill_err = tp.Fill(&_l2Oracle)
		if fill_err != nil {
			return
		}
		var _systemConfig common.Address
		fill_err = tp.Fill(&_systemConfig)
		if fill_err != nil {
			return
		}
		var _superchainConfig common.Address
		fill_err = tp.Fill(&_superchainConfig)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Initialize(_l2Oracle, _systemConfig, _superchainConfig)
	})
}

func Fuzz_Nosy_OptimismPortalSession_IsOutputFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _l2OutputIndex *big.Int
		fill_err = tp.Fill(&_l2OutputIndex)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || _l2OutputIndex == nil {
			return
		}

		_OptimismPortal.IsOutputFinalized(_l2OutputIndex)
	})
}

func Fuzz_Nosy_OptimismPortalSession_L2Oracle__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.L2Oracle()
	})
}

func Fuzz_Nosy_OptimismPortalSession_L2Sender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.L2Sender()
	})
}

func Fuzz_Nosy_OptimismPortalSession_MinimumGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _byteCount uint64
		fill_err = tp.Fill(&_byteCount)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.MinimumGasLimit(_byteCount)
	})
}

func Fuzz_Nosy_OptimismPortalSession_Params__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Params()
	})
}

func Fuzz_Nosy_OptimismPortalSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Paused()
	})
}

func Fuzz_Nosy_OptimismPortalSession_ProveWithdrawalTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _tx TypesWithdrawalTransaction
		fill_err = tp.Fill(&_tx)
		if fill_err != nil {
			return
		}
		var _l2OutputIndex *big.Int
		fill_err = tp.Fill(&_l2OutputIndex)
		if fill_err != nil {
			return
		}
		var _outputRootProof TypesOutputRootProof
		fill_err = tp.Fill(&_outputRootProof)
		if fill_err != nil {
			return
		}
		var _withdrawalProof [][]byte
		fill_err = tp.Fill(&_withdrawalProof)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || _l2OutputIndex == nil {
			return
		}

		_OptimismPortal.ProveWithdrawalTransaction(_tx, _l2OutputIndex, _outputRootProof, _withdrawalProof)
	})
}

func Fuzz_Nosy_OptimismPortalSession_ProvenWithdrawals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.ProvenWithdrawals(arg0)
	})
}

func Fuzz_Nosy_OptimismPortalSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Receive()
	})
}

func Fuzz_Nosy_OptimismPortalSession_SetGasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _token common.Address
		fill_err = tp.Fill(&_token)
		if fill_err != nil {
			return
		}
		var _decimals uint8
		fill_err = tp.Fill(&_decimals)
		if fill_err != nil {
			return
		}
		var _name [32]byte
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol [32]byte
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.SetGasPayingToken(_token, _decimals, _name, _symbol)
	})
}

func Fuzz_Nosy_OptimismPortalSession_SuperchainConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.SuperchainConfig()
	})
}

func Fuzz_Nosy_OptimismPortalSession_SystemConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.SystemConfig()
	})
}

func Fuzz_Nosy_OptimismPortalSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Version()
	})
}

func Fuzz_Nosy_OptimismPortalTransactionDepositedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismPortalTransactionDepositedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_OptimismPortalTransactionDepositedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismPortalTransactionDepositedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_OptimismPortalTransactionDepositedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismPortalTransactionDepositedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_OptimismPortalTransactor_DepositERC20Transaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactor
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _mint *big.Int
		fill_err = tp.Fill(&_mint)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _gasLimit uint64
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		var _isCreation bool
		fill_err = tp.Fill(&_isCreation)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil || _mint == nil || _value == nil {
			return
		}

		_OptimismPortal.DepositERC20Transaction(opts, _to, _mint, _value, _gasLimit, _isCreation, _data)
	})
}

func Fuzz_Nosy_OptimismPortalTransactor_DepositTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactor
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _gasLimit uint64
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		var _isCreation bool
		fill_err = tp.Fill(&_isCreation)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil || _value == nil {
			return
		}

		_OptimismPortal.DepositTransaction(opts, _to, _value, _gasLimit, _isCreation, _data)
	})
}

func Fuzz_Nosy_OptimismPortalTransactor_DonateETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactor
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.DonateETH(opts)
	})
}

func Fuzz_Nosy_OptimismPortalTransactor_FinalizeWithdrawalTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactor
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _tx TypesWithdrawalTransaction
		fill_err = tp.Fill(&_tx)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.FinalizeWithdrawalTransaction(opts, _tx)
	})
}

func Fuzz_Nosy_OptimismPortalTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactor
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _l2Oracle common.Address
		fill_err = tp.Fill(&_l2Oracle)
		if fill_err != nil {
			return
		}
		var _systemConfig common.Address
		fill_err = tp.Fill(&_systemConfig)
		if fill_err != nil {
			return
		}
		var _superchainConfig common.Address
		fill_err = tp.Fill(&_superchainConfig)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.Initialize(opts, _l2Oracle, _systemConfig, _superchainConfig)
	})
}

func Fuzz_Nosy_OptimismPortalTransactor_ProveWithdrawalTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactor
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _tx TypesWithdrawalTransaction
		fill_err = tp.Fill(&_tx)
		if fill_err != nil {
			return
		}
		var _l2OutputIndex *big.Int
		fill_err = tp.Fill(&_l2OutputIndex)
		if fill_err != nil {
			return
		}
		var _outputRootProof TypesOutputRootProof
		fill_err = tp.Fill(&_outputRootProof)
		if fill_err != nil {
			return
		}
		var _withdrawalProof [][]byte
		fill_err = tp.Fill(&_withdrawalProof)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil || _l2OutputIndex == nil {
			return
		}

		_OptimismPortal.ProveWithdrawalTransaction(opts, _tx, _l2OutputIndex, _outputRootProof, _withdrawalProof)
	})
}

func Fuzz_Nosy_OptimismPortalTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactor
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.Receive(opts)
	})
}

func Fuzz_Nosy_OptimismPortalTransactor_SetGasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactor
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _token common.Address
		fill_err = tp.Fill(&_token)
		if fill_err != nil {
			return
		}
		var _decimals uint8
		fill_err = tp.Fill(&_decimals)
		if fill_err != nil {
			return
		}
		var _name [32]byte
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol [32]byte
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.SetGasPayingToken(opts, _token, _decimals, _name, _symbol)
	})
}

// skipping Fuzz_Nosy_OptimismPortalTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_OptimismPortalTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactorRaw
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || opts == nil {
			return
		}

		_OptimismPortal.Transfer(opts)
	})
}

func Fuzz_Nosy_OptimismPortalTransactorSession_DepositERC20Transaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactorSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _mint *big.Int
		fill_err = tp.Fill(&_mint)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _gasLimit uint64
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		var _isCreation bool
		fill_err = tp.Fill(&_isCreation)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || _mint == nil || _value == nil {
			return
		}

		_OptimismPortal.DepositERC20Transaction(_to, _mint, _value, _gasLimit, _isCreation, _data)
	})
}

func Fuzz_Nosy_OptimismPortalTransactorSession_DepositTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactorSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		var _gasLimit uint64
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		var _isCreation bool
		fill_err = tp.Fill(&_isCreation)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || _value == nil {
			return
		}

		_OptimismPortal.DepositTransaction(_to, _value, _gasLimit, _isCreation, _data)
	})
}

func Fuzz_Nosy_OptimismPortalTransactorSession_DonateETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactorSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.DonateETH()
	})
}

func Fuzz_Nosy_OptimismPortalTransactorSession_FinalizeWithdrawalTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactorSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _tx TypesWithdrawalTransaction
		fill_err = tp.Fill(&_tx)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.FinalizeWithdrawalTransaction(_tx)
	})
}

func Fuzz_Nosy_OptimismPortalTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactorSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _l2Oracle common.Address
		fill_err = tp.Fill(&_l2Oracle)
		if fill_err != nil {
			return
		}
		var _systemConfig common.Address
		fill_err = tp.Fill(&_systemConfig)
		if fill_err != nil {
			return
		}
		var _superchainConfig common.Address
		fill_err = tp.Fill(&_superchainConfig)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Initialize(_l2Oracle, _systemConfig, _superchainConfig)
	})
}

func Fuzz_Nosy_OptimismPortalTransactorSession_ProveWithdrawalTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactorSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _tx TypesWithdrawalTransaction
		fill_err = tp.Fill(&_tx)
		if fill_err != nil {
			return
		}
		var _l2OutputIndex *big.Int
		fill_err = tp.Fill(&_l2OutputIndex)
		if fill_err != nil {
			return
		}
		var _outputRootProof TypesOutputRootProof
		fill_err = tp.Fill(&_outputRootProof)
		if fill_err != nil {
			return
		}
		var _withdrawalProof [][]byte
		fill_err = tp.Fill(&_withdrawalProof)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil || _l2OutputIndex == nil {
			return
		}

		_OptimismPortal.ProveWithdrawalTransaction(_tx, _l2OutputIndex, _outputRootProof, _withdrawalProof)
	})
}

func Fuzz_Nosy_OptimismPortalTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactorSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.Receive()
	})
}

func Fuzz_Nosy_OptimismPortalTransactorSession_SetGasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _OptimismPortal *OptimismPortalTransactorSession
		fill_err = tp.Fill(&_OptimismPortal)
		if fill_err != nil {
			return
		}
		var _token common.Address
		fill_err = tp.Fill(&_token)
		if fill_err != nil {
			return
		}
		var _decimals uint8
		fill_err = tp.Fill(&_decimals)
		if fill_err != nil {
			return
		}
		var _name [32]byte
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _symbol [32]byte
		fill_err = tp.Fill(&_symbol)
		if fill_err != nil {
			return
		}
		if _OptimismPortal == nil {
			return
		}

		_OptimismPortal.SetGasPayingToken(_token, _decimals, _name, _symbol)
	})
}

func Fuzz_Nosy_OptimismPortalWithdrawalFinalizedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismPortalWithdrawalFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_OptimismPortalWithdrawalFinalizedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismPortalWithdrawalFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_OptimismPortalWithdrawalFinalizedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismPortalWithdrawalFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_OptimismPortalWithdrawalProvenIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismPortalWithdrawalProvenIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_OptimismPortalWithdrawalProvenIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismPortalWithdrawalProvenIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_OptimismPortalWithdrawalProvenIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *OptimismPortalWithdrawalProvenIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_Permit2ApprovalIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2ApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_Permit2ApprovalIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2ApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_Permit2ApprovalIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2ApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_Permit2Caller_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Caller
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		var arg2 common.Address
		fill_err = tp.Fill(&arg2)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.Allowance(opts, arg0, arg1, arg2)
	})
}

func Fuzz_Nosy_Permit2Caller_DOMAINSEPARATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Caller
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.DOMAINSEPARATOR(opts)
	})
}

func Fuzz_Nosy_Permit2Caller_NonceBitmap__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Caller
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 *big.Int
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil || arg1 == nil {
			return
		}

		_Permit2.NonceBitmap(opts, arg0, arg1)
	})
}

// skipping Fuzz_Nosy_Permit2CallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_Permit2CallerSession_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2CallerSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		var arg2 common.Address
		fill_err = tp.Fill(&arg2)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.Allowance(arg0, arg1, arg2)
	})
}

func Fuzz_Nosy_Permit2CallerSession_DOMAINSEPARATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2CallerSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.DOMAINSEPARATOR()
	})
}

func Fuzz_Nosy_Permit2CallerSession_NonceBitmap__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2CallerSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 *big.Int
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || arg1 == nil {
			return
		}

		_Permit2.NonceBitmap(arg0, arg1)
	})
}

func Fuzz_Nosy_Permit2Filterer_FilterApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Filterer
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner []common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var token []common.Address
		fill_err = tp.Fill(&token)
		if fill_err != nil {
			return
		}
		var spender []common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.FilterApproval(opts, owner, token, spender)
	})
}

func Fuzz_Nosy_Permit2Filterer_FilterLockdown__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Filterer
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner []common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.FilterLockdown(opts, owner)
	})
}

func Fuzz_Nosy_Permit2Filterer_FilterNonceInvalidation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Filterer
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner []common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var token []common.Address
		fill_err = tp.Fill(&token)
		if fill_err != nil {
			return
		}
		var spender []common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.FilterNonceInvalidation(opts, owner, token, spender)
	})
}

func Fuzz_Nosy_Permit2Filterer_FilterPermit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Filterer
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner []common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var token []common.Address
		fill_err = tp.Fill(&token)
		if fill_err != nil {
			return
		}
		var spender []common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.FilterPermit(opts, owner, token, spender)
	})
}

func Fuzz_Nosy_Permit2Filterer_FilterUnorderedNonceInvalidation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Filterer
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner []common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.FilterUnorderedNonceInvalidation(opts, owner)
	})
}

func Fuzz_Nosy_Permit2Filterer_ParseApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Filterer
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.ParseApproval(log)
	})
}

func Fuzz_Nosy_Permit2Filterer_ParseLockdown__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Filterer
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.ParseLockdown(log)
	})
}

func Fuzz_Nosy_Permit2Filterer_ParseNonceInvalidation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Filterer
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.ParseNonceInvalidation(log)
	})
}

func Fuzz_Nosy_Permit2Filterer_ParsePermit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Filterer
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.ParsePermit(log)
	})
}

func Fuzz_Nosy_Permit2Filterer_ParseUnorderedNonceInvalidation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Filterer
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.ParseUnorderedNonceInvalidation(log)
	})
}

// skipping Fuzz_Nosy_Permit2Filterer_WatchApproval__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.Permit2Approval

// skipping Fuzz_Nosy_Permit2Filterer_WatchLockdown__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.Permit2Lockdown

// skipping Fuzz_Nosy_Permit2Filterer_WatchNonceInvalidation__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.Permit2NonceInvalidation

// skipping Fuzz_Nosy_Permit2Filterer_WatchPermit__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.Permit2Permit

// skipping Fuzz_Nosy_Permit2Filterer_WatchUnorderedNonceInvalidation__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.Permit2UnorderedNonceInvalidation

func Fuzz_Nosy_Permit2LockdownIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2LockdownIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_Permit2LockdownIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2LockdownIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_Permit2LockdownIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2LockdownIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_Permit2NonceInvalidationIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2NonceInvalidationIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_Permit2NonceInvalidationIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2NonceInvalidationIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_Permit2NonceInvalidationIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2NonceInvalidationIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_Permit2PermitIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2PermitIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_Permit2PermitIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2PermitIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_Permit2PermitIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2PermitIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_Permit2Raw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_Permit2Raw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_Permit2Raw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Raw
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.Transfer(opts)
	})
}

func Fuzz_Nosy_Permit2Session_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		var arg2 common.Address
		fill_err = tp.Fill(&arg2)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.Allowance(arg0, arg1, arg2)
	})
}

func Fuzz_Nosy_Permit2Session_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var token common.Address
		fill_err = tp.Fill(&token)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		var expiration *big.Int
		fill_err = tp.Fill(&expiration)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || amount == nil || expiration == nil {
			return
		}

		_Permit2.Approve(token, spender, amount, expiration)
	})
}

func Fuzz_Nosy_Permit2Session_DOMAINSEPARATOR__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.DOMAINSEPARATOR()
	})
}

func Fuzz_Nosy_Permit2Session_InvalidateNonces__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var token common.Address
		fill_err = tp.Fill(&token)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var newNonce *big.Int
		fill_err = tp.Fill(&newNonce)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || newNonce == nil {
			return
		}

		_Permit2.InvalidateNonces(token, spender, newNonce)
	})
}

func Fuzz_Nosy_Permit2Session_InvalidateUnorderedNonces__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var wordPos *big.Int
		fill_err = tp.Fill(&wordPos)
		if fill_err != nil {
			return
		}
		var mask *big.Int
		fill_err = tp.Fill(&mask)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || wordPos == nil || mask == nil {
			return
		}

		_Permit2.InvalidateUnorderedNonces(wordPos, mask)
	})
}

func Fuzz_Nosy_Permit2Session_Lockdown__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var approvals []IAllowanceTransferTokenSpenderPair
		fill_err = tp.Fill(&approvals)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.Lockdown(approvals)
	})
}

func Fuzz_Nosy_Permit2Session_NonceBitmap__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 *big.Int
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || arg1 == nil {
			return
		}

		_Permit2.NonceBitmap(arg0, arg1)
	})
}

func Fuzz_Nosy_Permit2Session_Permit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var permitBatch IAllowanceTransferPermitBatch
		fill_err = tp.Fill(&permitBatch)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.Permit(owner, permitBatch, signature)
	})
}

func Fuzz_Nosy_Permit2Session_Permit0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var permitSingle IAllowanceTransferPermitSingle
		fill_err = tp.Fill(&permitSingle)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.Permit0(owner, permitSingle, signature)
	})
}

func Fuzz_Nosy_Permit2Session_PermitTransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var permit ISignatureTransferPermitTransferFrom
		fill_err = tp.Fill(&permit)
		if fill_err != nil {
			return
		}
		var transferDetails ISignatureTransferSignatureTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.PermitTransferFrom(permit, transferDetails, owner, signature)
	})
}

func Fuzz_Nosy_Permit2Session_PermitTransferFrom0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var permit ISignatureTransferPermitBatchTransferFrom
		fill_err = tp.Fill(&permit)
		if fill_err != nil {
			return
		}
		var transferDetails []ISignatureTransferSignatureTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.PermitTransferFrom0(permit, transferDetails, owner, signature)
	})
}

func Fuzz_Nosy_Permit2Session_PermitWitnessTransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var permit ISignatureTransferPermitTransferFrom
		fill_err = tp.Fill(&permit)
		if fill_err != nil {
			return
		}
		var transferDetails ISignatureTransferSignatureTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var witness [32]byte
		fill_err = tp.Fill(&witness)
		if fill_err != nil {
			return
		}
		var witnessTypeString string
		fill_err = tp.Fill(&witnessTypeString)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.PermitWitnessTransferFrom(permit, transferDetails, owner, witness, witnessTypeString, signature)
	})
}

func Fuzz_Nosy_Permit2Session_PermitWitnessTransferFrom0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var permit ISignatureTransferPermitBatchTransferFrom
		fill_err = tp.Fill(&permit)
		if fill_err != nil {
			return
		}
		var transferDetails []ISignatureTransferSignatureTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var witness [32]byte
		fill_err = tp.Fill(&witness)
		if fill_err != nil {
			return
		}
		var witnessTypeString string
		fill_err = tp.Fill(&witnessTypeString)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.PermitWitnessTransferFrom0(permit, transferDetails, owner, witness, witnessTypeString, signature)
	})
}

func Fuzz_Nosy_Permit2Session_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var transferDetails []IAllowanceTransferAllowanceTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.TransferFrom(transferDetails)
	})
}

func Fuzz_Nosy_Permit2Session_TransferFrom0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Session
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var from common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		var token common.Address
		fill_err = tp.Fill(&token)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || amount == nil {
			return
		}

		_Permit2.TransferFrom0(from, to, amount, token)
	})
}

func Fuzz_Nosy_Permit2Transactor_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Transactor
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var token common.Address
		fill_err = tp.Fill(&token)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		var expiration *big.Int
		fill_err = tp.Fill(&expiration)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil || amount == nil || expiration == nil {
			return
		}

		_Permit2.Approve(opts, token, spender, amount, expiration)
	})
}

func Fuzz_Nosy_Permit2Transactor_InvalidateNonces__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Transactor
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var token common.Address
		fill_err = tp.Fill(&token)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var newNonce *big.Int
		fill_err = tp.Fill(&newNonce)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil || newNonce == nil {
			return
		}

		_Permit2.InvalidateNonces(opts, token, spender, newNonce)
	})
}

func Fuzz_Nosy_Permit2Transactor_InvalidateUnorderedNonces__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Transactor
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var wordPos *big.Int
		fill_err = tp.Fill(&wordPos)
		if fill_err != nil {
			return
		}
		var mask *big.Int
		fill_err = tp.Fill(&mask)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil || wordPos == nil || mask == nil {
			return
		}

		_Permit2.InvalidateUnorderedNonces(opts, wordPos, mask)
	})
}

func Fuzz_Nosy_Permit2Transactor_Lockdown__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Transactor
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var approvals []IAllowanceTransferTokenSpenderPair
		fill_err = tp.Fill(&approvals)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.Lockdown(opts, approvals)
	})
}

func Fuzz_Nosy_Permit2Transactor_Permit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Transactor
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var permitBatch IAllowanceTransferPermitBatch
		fill_err = tp.Fill(&permitBatch)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.Permit(opts, owner, permitBatch, signature)
	})
}

func Fuzz_Nosy_Permit2Transactor_Permit0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Transactor
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var permitSingle IAllowanceTransferPermitSingle
		fill_err = tp.Fill(&permitSingle)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.Permit0(opts, owner, permitSingle, signature)
	})
}

func Fuzz_Nosy_Permit2Transactor_PermitTransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Transactor
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var permit ISignatureTransferPermitTransferFrom
		fill_err = tp.Fill(&permit)
		if fill_err != nil {
			return
		}
		var transferDetails ISignatureTransferSignatureTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.PermitTransferFrom(opts, permit, transferDetails, owner, signature)
	})
}

func Fuzz_Nosy_Permit2Transactor_PermitTransferFrom0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Transactor
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var permit ISignatureTransferPermitBatchTransferFrom
		fill_err = tp.Fill(&permit)
		if fill_err != nil {
			return
		}
		var transferDetails []ISignatureTransferSignatureTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.PermitTransferFrom0(opts, permit, transferDetails, owner, signature)
	})
}

func Fuzz_Nosy_Permit2Transactor_PermitWitnessTransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Transactor
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var permit ISignatureTransferPermitTransferFrom
		fill_err = tp.Fill(&permit)
		if fill_err != nil {
			return
		}
		var transferDetails ISignatureTransferSignatureTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var witness [32]byte
		fill_err = tp.Fill(&witness)
		if fill_err != nil {
			return
		}
		var witnessTypeString string
		fill_err = tp.Fill(&witnessTypeString)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.PermitWitnessTransferFrom(opts, permit, transferDetails, owner, witness, witnessTypeString, signature)
	})
}

func Fuzz_Nosy_Permit2Transactor_PermitWitnessTransferFrom0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Transactor
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var permit ISignatureTransferPermitBatchTransferFrom
		fill_err = tp.Fill(&permit)
		if fill_err != nil {
			return
		}
		var transferDetails []ISignatureTransferSignatureTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var witness [32]byte
		fill_err = tp.Fill(&witness)
		if fill_err != nil {
			return
		}
		var witnessTypeString string
		fill_err = tp.Fill(&witnessTypeString)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.PermitWitnessTransferFrom0(opts, permit, transferDetails, owner, witness, witnessTypeString, signature)
	})
}

func Fuzz_Nosy_Permit2Transactor_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Transactor
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var transferDetails []IAllowanceTransferAllowanceTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.TransferFrom(opts, transferDetails)
	})
}

func Fuzz_Nosy_Permit2Transactor_TransferFrom0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2Transactor
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		var token common.Address
		fill_err = tp.Fill(&token)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil || amount == nil {
			return
		}

		_Permit2.TransferFrom0(opts, from, to, amount, token)
	})
}

// skipping Fuzz_Nosy_Permit2TransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_Permit2TransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2TransactorRaw
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || opts == nil {
			return
		}

		_Permit2.Transfer(opts)
	})
}

func Fuzz_Nosy_Permit2TransactorSession_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2TransactorSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var token common.Address
		fill_err = tp.Fill(&token)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		var expiration *big.Int
		fill_err = tp.Fill(&expiration)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || amount == nil || expiration == nil {
			return
		}

		_Permit2.Approve(token, spender, amount, expiration)
	})
}

func Fuzz_Nosy_Permit2TransactorSession_InvalidateNonces__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2TransactorSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var token common.Address
		fill_err = tp.Fill(&token)
		if fill_err != nil {
			return
		}
		var spender common.Address
		fill_err = tp.Fill(&spender)
		if fill_err != nil {
			return
		}
		var newNonce *big.Int
		fill_err = tp.Fill(&newNonce)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || newNonce == nil {
			return
		}

		_Permit2.InvalidateNonces(token, spender, newNonce)
	})
}

func Fuzz_Nosy_Permit2TransactorSession_InvalidateUnorderedNonces__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2TransactorSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var wordPos *big.Int
		fill_err = tp.Fill(&wordPos)
		if fill_err != nil {
			return
		}
		var mask *big.Int
		fill_err = tp.Fill(&mask)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || wordPos == nil || mask == nil {
			return
		}

		_Permit2.InvalidateUnorderedNonces(wordPos, mask)
	})
}

func Fuzz_Nosy_Permit2TransactorSession_Lockdown__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2TransactorSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var approvals []IAllowanceTransferTokenSpenderPair
		fill_err = tp.Fill(&approvals)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.Lockdown(approvals)
	})
}

func Fuzz_Nosy_Permit2TransactorSession_Permit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2TransactorSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var permitBatch IAllowanceTransferPermitBatch
		fill_err = tp.Fill(&permitBatch)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.Permit(owner, permitBatch, signature)
	})
}

func Fuzz_Nosy_Permit2TransactorSession_Permit0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2TransactorSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var permitSingle IAllowanceTransferPermitSingle
		fill_err = tp.Fill(&permitSingle)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.Permit0(owner, permitSingle, signature)
	})
}

func Fuzz_Nosy_Permit2TransactorSession_PermitTransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2TransactorSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var permit ISignatureTransferPermitTransferFrom
		fill_err = tp.Fill(&permit)
		if fill_err != nil {
			return
		}
		var transferDetails ISignatureTransferSignatureTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.PermitTransferFrom(permit, transferDetails, owner, signature)
	})
}

func Fuzz_Nosy_Permit2TransactorSession_PermitTransferFrom0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2TransactorSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var permit ISignatureTransferPermitBatchTransferFrom
		fill_err = tp.Fill(&permit)
		if fill_err != nil {
			return
		}
		var transferDetails []ISignatureTransferSignatureTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.PermitTransferFrom0(permit, transferDetails, owner, signature)
	})
}

func Fuzz_Nosy_Permit2TransactorSession_PermitWitnessTransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2TransactorSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var permit ISignatureTransferPermitTransferFrom
		fill_err = tp.Fill(&permit)
		if fill_err != nil {
			return
		}
		var transferDetails ISignatureTransferSignatureTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var witness [32]byte
		fill_err = tp.Fill(&witness)
		if fill_err != nil {
			return
		}
		var witnessTypeString string
		fill_err = tp.Fill(&witnessTypeString)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.PermitWitnessTransferFrom(permit, transferDetails, owner, witness, witnessTypeString, signature)
	})
}

func Fuzz_Nosy_Permit2TransactorSession_PermitWitnessTransferFrom0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2TransactorSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var permit ISignatureTransferPermitBatchTransferFrom
		fill_err = tp.Fill(&permit)
		if fill_err != nil {
			return
		}
		var transferDetails []ISignatureTransferSignatureTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var witness [32]byte
		fill_err = tp.Fill(&witness)
		if fill_err != nil {
			return
		}
		var witnessTypeString string
		fill_err = tp.Fill(&witnessTypeString)
		if fill_err != nil {
			return
		}
		var signature []byte
		fill_err = tp.Fill(&signature)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.PermitWitnessTransferFrom0(permit, transferDetails, owner, witness, witnessTypeString, signature)
	})
}

func Fuzz_Nosy_Permit2TransactorSession_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2TransactorSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var transferDetails []IAllowanceTransferAllowanceTransferDetails
		fill_err = tp.Fill(&transferDetails)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil {
			return
		}

		_Permit2.TransferFrom(transferDetails)
	})
}

func Fuzz_Nosy_Permit2TransactorSession_TransferFrom0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Permit2 *Permit2TransactorSession
		fill_err = tp.Fill(&_Permit2)
		if fill_err != nil {
			return
		}
		var from common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var amount *big.Int
		fill_err = tp.Fill(&amount)
		if fill_err != nil {
			return
		}
		var token common.Address
		fill_err = tp.Fill(&token)
		if fill_err != nil {
			return
		}
		if _Permit2 == nil || amount == nil {
			return
		}

		_Permit2.TransferFrom0(from, to, amount, token)
	})
}

func Fuzz_Nosy_Permit2UnorderedNonceInvalidationIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2UnorderedNonceInvalidationIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_Permit2UnorderedNonceInvalidationIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2UnorderedNonceInvalidationIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_Permit2UnorderedNonceInvalidationIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *Permit2UnorderedNonceInvalidationIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_ProtocolVersionsCaller_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCaller
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.Owner(opts)
	})
}

func Fuzz_Nosy_ProtocolVersionsCaller_RECOMMENDEDSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCaller
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.RECOMMENDEDSLOT(opts)
	})
}

func Fuzz_Nosy_ProtocolVersionsCaller_REQUIREDSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCaller
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.REQUIREDSLOT(opts)
	})
}

func Fuzz_Nosy_ProtocolVersionsCaller_Recommended__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCaller
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.Recommended(opts)
	})
}

func Fuzz_Nosy_ProtocolVersionsCaller_Required__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCaller
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.Required(opts)
	})
}

func Fuzz_Nosy_ProtocolVersionsCaller_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCaller
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.VERSION(opts)
	})
}

func Fuzz_Nosy_ProtocolVersionsCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCaller
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.Version(opts)
	})
}

// skipping Fuzz_Nosy_ProtocolVersionsCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_ProtocolVersionsCallerSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCallerSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.Owner()
	})
}

func Fuzz_Nosy_ProtocolVersionsCallerSession_RECOMMENDEDSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCallerSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.RECOMMENDEDSLOT()
	})
}

func Fuzz_Nosy_ProtocolVersionsCallerSession_REQUIREDSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCallerSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.REQUIREDSLOT()
	})
}

func Fuzz_Nosy_ProtocolVersionsCallerSession_Recommended__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCallerSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.Recommended()
	})
}

func Fuzz_Nosy_ProtocolVersionsCallerSession_Required__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCallerSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.Required()
	})
}

func Fuzz_Nosy_ProtocolVersionsCallerSession_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCallerSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.VERSION()
	})
}

func Fuzz_Nosy_ProtocolVersionsCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsCallerSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.Version()
	})
}

func Fuzz_Nosy_ProtocolVersionsConfigUpdateIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProtocolVersionsConfigUpdateIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_ProtocolVersionsConfigUpdateIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProtocolVersionsConfigUpdateIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_ProtocolVersionsConfigUpdateIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProtocolVersionsConfigUpdateIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_ProtocolVersionsFilterer_FilterConfigUpdate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsFilterer
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var version []*big.Int
		fill_err = tp.Fill(&version)
		if fill_err != nil {
			return
		}
		var updateType []uint8
		fill_err = tp.Fill(&updateType)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.FilterConfigUpdate(opts, version, updateType)
	})
}

func Fuzz_Nosy_ProtocolVersionsFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsFilterer
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_ProtocolVersionsFilterer_FilterOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsFilterer
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var previousOwner []common.Address
		fill_err = tp.Fill(&previousOwner)
		if fill_err != nil {
			return
		}
		var newOwner []common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.FilterOwnershipTransferred(opts, previousOwner, newOwner)
	})
}

func Fuzz_Nosy_ProtocolVersionsFilterer_ParseConfigUpdate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsFilterer
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.ParseConfigUpdate(log)
	})
}

func Fuzz_Nosy_ProtocolVersionsFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsFilterer
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.ParseInitialized(log)
	})
}

func Fuzz_Nosy_ProtocolVersionsFilterer_ParseOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsFilterer
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.ParseOwnershipTransferred(log)
	})
}

// skipping Fuzz_Nosy_ProtocolVersionsFilterer_WatchConfigUpdate__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.ProtocolVersionsConfigUpdate

// skipping Fuzz_Nosy_ProtocolVersionsFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.ProtocolVersionsInitialized

// skipping Fuzz_Nosy_ProtocolVersionsFilterer_WatchOwnershipTransferred__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.ProtocolVersionsOwnershipTransferred

func Fuzz_Nosy_ProtocolVersionsInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProtocolVersionsInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_ProtocolVersionsInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProtocolVersionsInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_ProtocolVersionsInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProtocolVersionsInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_ProtocolVersionsOwnershipTransferredIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProtocolVersionsOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_ProtocolVersionsOwnershipTransferredIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProtocolVersionsOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_ProtocolVersionsOwnershipTransferredIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProtocolVersionsOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_ProtocolVersionsRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_ProtocolVersionsRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_ProtocolVersionsRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsRaw
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.Transfer(opts)
	})
}

func Fuzz_Nosy_ProtocolVersionsSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		var _required *big.Int
		fill_err = tp.Fill(&_required)
		if fill_err != nil {
			return
		}
		var _recommended *big.Int
		fill_err = tp.Fill(&_recommended)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || _required == nil || _recommended == nil {
			return
		}

		_ProtocolVersions.Initialize(_owner, _required, _recommended)
	})
}

func Fuzz_Nosy_ProtocolVersionsSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.Owner()
	})
}

func Fuzz_Nosy_ProtocolVersionsSession_RECOMMENDEDSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.RECOMMENDEDSLOT()
	})
}

func Fuzz_Nosy_ProtocolVersionsSession_REQUIREDSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.REQUIREDSLOT()
	})
}

func Fuzz_Nosy_ProtocolVersionsSession_Recommended__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.Recommended()
	})
}

func Fuzz_Nosy_ProtocolVersionsSession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.RenounceOwnership()
	})
}

func Fuzz_Nosy_ProtocolVersionsSession_Required__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.Required()
	})
}

func Fuzz_Nosy_ProtocolVersionsSession_SetRecommended__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var _recommended *big.Int
		fill_err = tp.Fill(&_recommended)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || _recommended == nil {
			return
		}

		_ProtocolVersions.SetRecommended(_recommended)
	})
}

func Fuzz_Nosy_ProtocolVersionsSession_SetRequired__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var _required *big.Int
		fill_err = tp.Fill(&_required)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || _required == nil {
			return
		}

		_ProtocolVersions.SetRequired(_required)
	})
}

func Fuzz_Nosy_ProtocolVersionsSession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_ProtocolVersionsSession_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.VERSION()
	})
}

func Fuzz_Nosy_ProtocolVersionsSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.Version()
	})
}

func Fuzz_Nosy_ProtocolVersionsTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsTransactor
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		var _required *big.Int
		fill_err = tp.Fill(&_required)
		if fill_err != nil {
			return
		}
		var _recommended *big.Int
		fill_err = tp.Fill(&_recommended)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil || _required == nil || _recommended == nil {
			return
		}

		_ProtocolVersions.Initialize(opts, _owner, _required, _recommended)
	})
}

func Fuzz_Nosy_ProtocolVersionsTransactor_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsTransactor
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.RenounceOwnership(opts)
	})
}

func Fuzz_Nosy_ProtocolVersionsTransactor_SetRecommended__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsTransactor
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _recommended *big.Int
		fill_err = tp.Fill(&_recommended)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil || _recommended == nil {
			return
		}

		_ProtocolVersions.SetRecommended(opts, _recommended)
	})
}

func Fuzz_Nosy_ProtocolVersionsTransactor_SetRequired__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsTransactor
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _required *big.Int
		fill_err = tp.Fill(&_required)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil || _required == nil {
			return
		}

		_ProtocolVersions.SetRequired(opts, _required)
	})
}

func Fuzz_Nosy_ProtocolVersionsTransactor_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsTransactor
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.TransferOwnership(opts, newOwner)
	})
}

// skipping Fuzz_Nosy_ProtocolVersionsTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_ProtocolVersionsTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsTransactorRaw
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || opts == nil {
			return
		}

		_ProtocolVersions.Transfer(opts)
	})
}

func Fuzz_Nosy_ProtocolVersionsTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsTransactorSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		var _required *big.Int
		fill_err = tp.Fill(&_required)
		if fill_err != nil {
			return
		}
		var _recommended *big.Int
		fill_err = tp.Fill(&_recommended)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || _required == nil || _recommended == nil {
			return
		}

		_ProtocolVersions.Initialize(_owner, _required, _recommended)
	})
}

func Fuzz_Nosy_ProtocolVersionsTransactorSession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsTransactorSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.RenounceOwnership()
	})
}

func Fuzz_Nosy_ProtocolVersionsTransactorSession_SetRecommended__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsTransactorSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var _recommended *big.Int
		fill_err = tp.Fill(&_recommended)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || _recommended == nil {
			return
		}

		_ProtocolVersions.SetRecommended(_recommended)
	})
}

func Fuzz_Nosy_ProtocolVersionsTransactorSession_SetRequired__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsTransactorSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var _required *big.Int
		fill_err = tp.Fill(&_required)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil || _required == nil {
			return
		}

		_ProtocolVersions.SetRequired(_required)
	})
}

func Fuzz_Nosy_ProtocolVersionsTransactorSession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProtocolVersions *ProtocolVersionsTransactorSession
		fill_err = tp.Fill(&_ProtocolVersions)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _ProtocolVersions == nil {
			return
		}

		_ProtocolVersions.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_ProxyAdminCaller_AddressManager__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCaller
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.AddressManager(opts)
	})
}

func Fuzz_Nosy_ProxyAdminCaller_GetProxyAdmin__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCaller
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.GetProxyAdmin(opts, _proxy)
	})
}

func Fuzz_Nosy_ProxyAdminCaller_GetProxyImplementation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCaller
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.GetProxyImplementation(opts, _proxy)
	})
}

func Fuzz_Nosy_ProxyAdminCaller_ImplementationName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCaller
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.ImplementationName(opts, arg0)
	})
}

func Fuzz_Nosy_ProxyAdminCaller_IsUpgrading__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCaller
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.IsUpgrading(opts)
	})
}

func Fuzz_Nosy_ProxyAdminCaller_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCaller
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.Owner(opts)
	})
}

func Fuzz_Nosy_ProxyAdminCaller_ProxyType__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCaller
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.ProxyType(opts, arg0)
	})
}

// skipping Fuzz_Nosy_ProxyAdminCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_ProxyAdminCallerSession_AddressManager__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCallerSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.AddressManager()
	})
}

func Fuzz_Nosy_ProxyAdminCallerSession_GetProxyAdmin__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCallerSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.GetProxyAdmin(_proxy)
	})
}

func Fuzz_Nosy_ProxyAdminCallerSession_GetProxyImplementation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCallerSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.GetProxyImplementation(_proxy)
	})
}

func Fuzz_Nosy_ProxyAdminCallerSession_ImplementationName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCallerSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.ImplementationName(arg0)
	})
}

func Fuzz_Nosy_ProxyAdminCallerSession_IsUpgrading__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCallerSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.IsUpgrading()
	})
}

func Fuzz_Nosy_ProxyAdminCallerSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCallerSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.Owner()
	})
}

func Fuzz_Nosy_ProxyAdminCallerSession_ProxyType__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminCallerSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.ProxyType(arg0)
	})
}

func Fuzz_Nosy_ProxyAdminChangedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProxyAdminChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_ProxyAdminChangedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProxyAdminChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_ProxyAdminChangedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProxyAdminChangedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_ProxyAdminFilterer_FilterOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminFilterer
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var previousOwner []common.Address
		fill_err = tp.Fill(&previousOwner)
		if fill_err != nil {
			return
		}
		var newOwner []common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.FilterOwnershipTransferred(opts, previousOwner, newOwner)
	})
}

func Fuzz_Nosy_ProxyAdminFilterer_ParseOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminFilterer
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.ParseOwnershipTransferred(log)
	})
}

// skipping Fuzz_Nosy_ProxyAdminFilterer_WatchOwnershipTransferred__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.ProxyAdminOwnershipTransferred

func Fuzz_Nosy_ProxyAdminOwnershipTransferredIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProxyAdminOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_ProxyAdminOwnershipTransferredIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProxyAdminOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_ProxyAdminOwnershipTransferredIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProxyAdminOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_ProxyAdminRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_ProxyAdminRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_ProxyAdminRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminRaw
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.Transfer(opts)
	})
}

func Fuzz_Nosy_ProxyAdminSession_AddressManager__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.AddressManager()
	})
}

func Fuzz_Nosy_ProxyAdminSession_ChangeProxyAdmin__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		var _newAdmin common.Address
		fill_err = tp.Fill(&_newAdmin)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.ChangeProxyAdmin(_proxy, _newAdmin)
	})
}

func Fuzz_Nosy_ProxyAdminSession_GetProxyAdmin__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.GetProxyAdmin(_proxy)
	})
}

func Fuzz_Nosy_ProxyAdminSession_GetProxyImplementation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.GetProxyImplementation(_proxy)
	})
}

func Fuzz_Nosy_ProxyAdminSession_ImplementationName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.ImplementationName(arg0)
	})
}

func Fuzz_Nosy_ProxyAdminSession_IsUpgrading__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.IsUpgrading()
	})
}

func Fuzz_Nosy_ProxyAdminSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.Owner()
	})
}

func Fuzz_Nosy_ProxyAdminSession_ProxyType__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.ProxyType(arg0)
	})
}

func Fuzz_Nosy_ProxyAdminSession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.RenounceOwnership()
	})
}

func Fuzz_Nosy_ProxyAdminSession_SetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.SetAddress(_name, _address)
	})
}

func Fuzz_Nosy_ProxyAdminSession_SetAddressManager__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.SetAddressManager(_address)
	})
}

func Fuzz_Nosy_ProxyAdminSession_SetImplementationName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.SetImplementationName(_address, _name)
	})
}

func Fuzz_Nosy_ProxyAdminSession_SetProxyType__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		var _type uint8
		fill_err = tp.Fill(&_type)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.SetProxyType(_address, _type)
	})
}

func Fuzz_Nosy_ProxyAdminSession_SetUpgrading__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _upgrading bool
		fill_err = tp.Fill(&_upgrading)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.SetUpgrading(_upgrading)
	})
}

func Fuzz_Nosy_ProxyAdminSession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_ProxyAdminSession_Upgrade__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		var _implementation common.Address
		fill_err = tp.Fill(&_implementation)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.Upgrade(_proxy, _implementation)
	})
}

func Fuzz_Nosy_ProxyAdminSession_UpgradeAndCall__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		var _implementation common.Address
		fill_err = tp.Fill(&_implementation)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.UpgradeAndCall(_proxy, _implementation, _data)
	})
}

func Fuzz_Nosy_ProxyAdminTransactor_ChangeProxyAdmin__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactor
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		var _newAdmin common.Address
		fill_err = tp.Fill(&_newAdmin)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.ChangeProxyAdmin(opts, _proxy, _newAdmin)
	})
}

func Fuzz_Nosy_ProxyAdminTransactor_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactor
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.RenounceOwnership(opts)
	})
}

func Fuzz_Nosy_ProxyAdminTransactor_SetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactor
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.SetAddress(opts, _name, _address)
	})
}

func Fuzz_Nosy_ProxyAdminTransactor_SetAddressManager__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactor
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.SetAddressManager(opts, _address)
	})
}

func Fuzz_Nosy_ProxyAdminTransactor_SetImplementationName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactor
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.SetImplementationName(opts, _address, _name)
	})
}

func Fuzz_Nosy_ProxyAdminTransactor_SetProxyType__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactor
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		var _type uint8
		fill_err = tp.Fill(&_type)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.SetProxyType(opts, _address, _type)
	})
}

func Fuzz_Nosy_ProxyAdminTransactor_SetUpgrading__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactor
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _upgrading bool
		fill_err = tp.Fill(&_upgrading)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.SetUpgrading(opts, _upgrading)
	})
}

func Fuzz_Nosy_ProxyAdminTransactor_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactor
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.TransferOwnership(opts, newOwner)
	})
}

func Fuzz_Nosy_ProxyAdminTransactor_Upgrade__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactor
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		var _implementation common.Address
		fill_err = tp.Fill(&_implementation)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.Upgrade(opts, _proxy, _implementation)
	})
}

func Fuzz_Nosy_ProxyAdminTransactor_UpgradeAndCall__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactor
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		var _implementation common.Address
		fill_err = tp.Fill(&_implementation)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.UpgradeAndCall(opts, _proxy, _implementation, _data)
	})
}

// skipping Fuzz_Nosy_ProxyAdminTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_ProxyAdminTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactorRaw
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil || opts == nil {
			return
		}

		_ProxyAdmin.Transfer(opts)
	})
}

func Fuzz_Nosy_ProxyAdminTransactorSession_ChangeProxyAdmin__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactorSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		var _newAdmin common.Address
		fill_err = tp.Fill(&_newAdmin)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.ChangeProxyAdmin(_proxy, _newAdmin)
	})
}

func Fuzz_Nosy_ProxyAdminTransactorSession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactorSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.RenounceOwnership()
	})
}

func Fuzz_Nosy_ProxyAdminTransactorSession_SetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactorSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.SetAddress(_name, _address)
	})
}

func Fuzz_Nosy_ProxyAdminTransactorSession_SetAddressManager__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactorSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.SetAddressManager(_address)
	})
}

func Fuzz_Nosy_ProxyAdminTransactorSession_SetImplementationName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactorSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		var _name string
		fill_err = tp.Fill(&_name)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.SetImplementationName(_address, _name)
	})
}

func Fuzz_Nosy_ProxyAdminTransactorSession_SetProxyType__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactorSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		var _type uint8
		fill_err = tp.Fill(&_type)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.SetProxyType(_address, _type)
	})
}

func Fuzz_Nosy_ProxyAdminTransactorSession_SetUpgrading__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactorSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _upgrading bool
		fill_err = tp.Fill(&_upgrading)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.SetUpgrading(_upgrading)
	})
}

func Fuzz_Nosy_ProxyAdminTransactorSession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactorSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_ProxyAdminTransactorSession_Upgrade__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactorSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		var _implementation common.Address
		fill_err = tp.Fill(&_implementation)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.Upgrade(_proxy, _implementation)
	})
}

func Fuzz_Nosy_ProxyAdminTransactorSession_UpgradeAndCall__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _ProxyAdmin *ProxyAdminTransactorSession
		fill_err = tp.Fill(&_ProxyAdmin)
		if fill_err != nil {
			return
		}
		var _proxy common.Address
		fill_err = tp.Fill(&_proxy)
		if fill_err != nil {
			return
		}
		var _implementation common.Address
		fill_err = tp.Fill(&_implementation)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _ProxyAdmin == nil {
			return
		}

		_ProxyAdmin.UpgradeAndCall(_proxy, _implementation, _data)
	})
}

// skipping Fuzz_Nosy_ProxyCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_ProxyFilterer_FilterAdminChanged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyFilterer
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Proxy == nil || opts == nil {
			return
		}

		_Proxy.FilterAdminChanged(opts)
	})
}

func Fuzz_Nosy_ProxyFilterer_FilterUpgraded__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyFilterer
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var implementation []common.Address
		fill_err = tp.Fill(&implementation)
		if fill_err != nil {
			return
		}
		if _Proxy == nil || opts == nil {
			return
		}

		_Proxy.FilterUpgraded(opts, implementation)
	})
}

func Fuzz_Nosy_ProxyFilterer_ParseAdminChanged__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyFilterer
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.ParseAdminChanged(log)
	})
}

func Fuzz_Nosy_ProxyFilterer_ParseUpgraded__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyFilterer
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.ParseUpgraded(log)
	})
}

// skipping Fuzz_Nosy_ProxyFilterer_WatchAdminChanged__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.ProxyAdminChanged

// skipping Fuzz_Nosy_ProxyFilterer_WatchUpgraded__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.ProxyUpgraded

// skipping Fuzz_Nosy_ProxyRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_ProxyRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_ProxyRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyRaw
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Proxy == nil || opts == nil {
			return
		}

		_Proxy.Transfer(opts)
	})
}

func Fuzz_Nosy_ProxySession_Admin__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxySession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.Admin()
	})
}

func Fuzz_Nosy_ProxySession_ChangeAdmin__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxySession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var _admin common.Address
		fill_err = tp.Fill(&_admin)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.ChangeAdmin(_admin)
	})
}

func Fuzz_Nosy_ProxySession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxySession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.Fallback(calldata)
	})
}

func Fuzz_Nosy_ProxySession_Implementation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxySession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.Implementation()
	})
}

func Fuzz_Nosy_ProxySession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxySession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.Receive()
	})
}

func Fuzz_Nosy_ProxySession_UpgradeTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxySession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var _implementation common.Address
		fill_err = tp.Fill(&_implementation)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.UpgradeTo(_implementation)
	})
}

func Fuzz_Nosy_ProxySession_UpgradeToAndCall__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxySession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var _implementation common.Address
		fill_err = tp.Fill(&_implementation)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.UpgradeToAndCall(_implementation, _data)
	})
}

func Fuzz_Nosy_ProxyTransactor_Admin__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactor
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Proxy == nil || opts == nil {
			return
		}

		_Proxy.Admin(opts)
	})
}

func Fuzz_Nosy_ProxyTransactor_ChangeAdmin__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactor
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _admin common.Address
		fill_err = tp.Fill(&_admin)
		if fill_err != nil {
			return
		}
		if _Proxy == nil || opts == nil {
			return
		}

		_Proxy.ChangeAdmin(opts, _admin)
	})
}

func Fuzz_Nosy_ProxyTransactor_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactor
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _Proxy == nil || opts == nil {
			return
		}

		_Proxy.Fallback(opts, calldata)
	})
}

func Fuzz_Nosy_ProxyTransactor_Implementation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactor
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Proxy == nil || opts == nil {
			return
		}

		_Proxy.Implementation(opts)
	})
}

func Fuzz_Nosy_ProxyTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactor
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Proxy == nil || opts == nil {
			return
		}

		_Proxy.Receive(opts)
	})
}

func Fuzz_Nosy_ProxyTransactor_UpgradeTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactor
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _implementation common.Address
		fill_err = tp.Fill(&_implementation)
		if fill_err != nil {
			return
		}
		if _Proxy == nil || opts == nil {
			return
		}

		_Proxy.UpgradeTo(opts, _implementation)
	})
}

func Fuzz_Nosy_ProxyTransactor_UpgradeToAndCall__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactor
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _implementation common.Address
		fill_err = tp.Fill(&_implementation)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _Proxy == nil || opts == nil {
			return
		}

		_Proxy.UpgradeToAndCall(opts, _implementation, _data)
	})
}

// skipping Fuzz_Nosy_ProxyTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_ProxyTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactorRaw
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Proxy == nil || opts == nil {
			return
		}

		_Proxy.Transfer(opts)
	})
}

func Fuzz_Nosy_ProxyTransactorSession_Admin__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactorSession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.Admin()
	})
}

func Fuzz_Nosy_ProxyTransactorSession_ChangeAdmin__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactorSession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var _admin common.Address
		fill_err = tp.Fill(&_admin)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.ChangeAdmin(_admin)
	})
}

func Fuzz_Nosy_ProxyTransactorSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactorSession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.Fallback(calldata)
	})
}

func Fuzz_Nosy_ProxyTransactorSession_Implementation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactorSession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.Implementation()
	})
}

func Fuzz_Nosy_ProxyTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactorSession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.Receive()
	})
}

func Fuzz_Nosy_ProxyTransactorSession_UpgradeTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactorSession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var _implementation common.Address
		fill_err = tp.Fill(&_implementation)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.UpgradeTo(_implementation)
	})
}

func Fuzz_Nosy_ProxyTransactorSession_UpgradeToAndCall__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Proxy *ProxyTransactorSession
		fill_err = tp.Fill(&_Proxy)
		if fill_err != nil {
			return
		}
		var _implementation common.Address
		fill_err = tp.Fill(&_implementation)
		if fill_err != nil {
			return
		}
		var _data []byte
		fill_err = tp.Fill(&_data)
		if fill_err != nil {
			return
		}
		if _Proxy == nil {
			return
		}

		_Proxy.UpgradeToAndCall(_implementation, _data)
	})
}

func Fuzz_Nosy_ProxyUpgradedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProxyUpgradedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_ProxyUpgradedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProxyUpgradedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_ProxyUpgradedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *ProxyUpgradedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeAddedOwnerIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeAddedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeAddedOwnerIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeAddedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeAddedOwnerIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeAddedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeApproveHashIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeApproveHashIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeApproveHashIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeApproveHashIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeApproveHashIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeApproveHashIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeCaller_ApprovedHashes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 [32]byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.ApprovedHashes(opts, arg0, arg1)
	})
}

func Fuzz_Nosy_SafeCaller_CheckNSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		var requiredSignatures *big.Int
		fill_err = tp.Fill(&requiredSignatures)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil || requiredSignatures == nil {
			return
		}

		_Safe.CheckNSignatures(opts, dataHash, d4, signatures, requiredSignatures)
	})
}

func Fuzz_Nosy_SafeCaller_CheckSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.CheckSignatures(opts, dataHash, d4, signatures)
	})
}

func Fuzz_Nosy_SafeCaller_DomainSeparator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.DomainSeparator(opts)
	})
}

func Fuzz_Nosy_SafeCaller_EncodeTransactionData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_Safe.EncodeTransactionData(opts, to, value, d5, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeCaller_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.GetChainId(opts)
	})
}

func Fuzz_Nosy_SafeCaller_GetModulesPaginated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var start common.Address
		fill_err = tp.Fill(&start)
		if fill_err != nil {
			return
		}
		var pageSize *big.Int
		fill_err = tp.Fill(&pageSize)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil || pageSize == nil {
			return
		}

		_Safe.GetModulesPaginated(opts, start, pageSize)
	})
}

func Fuzz_Nosy_SafeCaller_GetOwners__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.GetOwners(opts)
	})
}

func Fuzz_Nosy_SafeCaller_GetStorageAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var offset *big.Int
		fill_err = tp.Fill(&offset)
		if fill_err != nil {
			return
		}
		var length *big.Int
		fill_err = tp.Fill(&length)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil || offset == nil || length == nil {
			return
		}

		_Safe.GetStorageAt(opts, offset, length)
	})
}

func Fuzz_Nosy_SafeCaller_GetThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.GetThreshold(opts)
	})
}

func Fuzz_Nosy_SafeCaller_GetTransactionHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_Safe.GetTransactionHash(opts, to, value, d5, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeCaller_IsModuleEnabled__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.IsModuleEnabled(opts, module)
	})
}

func Fuzz_Nosy_SafeCaller_IsOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.IsOwner(opts, owner)
	})
}

func Fuzz_Nosy_SafeCaller_Nonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.Nonce(opts)
	})
}

func Fuzz_Nosy_SafeCaller_SignedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.SignedMessages(opts, arg0)
	})
}

func Fuzz_Nosy_SafeCaller_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCaller
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.VERSION(opts)
	})
}

// skipping Fuzz_Nosy_SafeCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_SafeCallerSession_ApprovedHashes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 [32]byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ApprovedHashes(arg0, arg1)
	})
}

func Fuzz_Nosy_SafeCallerSession_CheckNSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d3 []byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		var requiredSignatures *big.Int
		fill_err = tp.Fill(&requiredSignatures)
		if fill_err != nil {
			return
		}
		if _Safe == nil || requiredSignatures == nil {
			return
		}

		_Safe.CheckNSignatures(dataHash, d3, signatures, requiredSignatures)
	})
}

func Fuzz_Nosy_SafeCallerSession_CheckSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d3 []byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.CheckSignatures(dataHash, d3, signatures)
	})
}

func Fuzz_Nosy_SafeCallerSession_DomainSeparator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.DomainSeparator()
	})
}

func Fuzz_Nosy_SafeCallerSession_EncodeTransactionData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _Safe == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_Safe.EncodeTransactionData(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeCallerSession_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.GetChainId()
	})
}

func Fuzz_Nosy_SafeCallerSession_GetModulesPaginated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var start common.Address
		fill_err = tp.Fill(&start)
		if fill_err != nil {
			return
		}
		var pageSize *big.Int
		fill_err = tp.Fill(&pageSize)
		if fill_err != nil {
			return
		}
		if _Safe == nil || pageSize == nil {
			return
		}

		_Safe.GetModulesPaginated(start, pageSize)
	})
}

func Fuzz_Nosy_SafeCallerSession_GetOwners__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.GetOwners()
	})
}

func Fuzz_Nosy_SafeCallerSession_GetStorageAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var offset *big.Int
		fill_err = tp.Fill(&offset)
		if fill_err != nil {
			return
		}
		var length *big.Int
		fill_err = tp.Fill(&length)
		if fill_err != nil {
			return
		}
		if _Safe == nil || offset == nil || length == nil {
			return
		}

		_Safe.GetStorageAt(offset, length)
	})
}

func Fuzz_Nosy_SafeCallerSession_GetThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.GetThreshold()
	})
}

func Fuzz_Nosy_SafeCallerSession_GetTransactionHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _Safe == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_Safe.GetTransactionHash(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeCallerSession_IsModuleEnabled__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.IsModuleEnabled(module)
	})
}

func Fuzz_Nosy_SafeCallerSession_IsOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.IsOwner(owner)
	})
}

func Fuzz_Nosy_SafeCallerSession_Nonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.Nonce()
	})
}

func Fuzz_Nosy_SafeCallerSession_SignedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.SignedMessages(arg0)
	})
}

func Fuzz_Nosy_SafeCallerSession_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeCallerSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.VERSION()
	})
}

func Fuzz_Nosy_SafeChangedFallbackHandlerIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeChangedFallbackHandlerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeChangedFallbackHandlerIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeChangedFallbackHandlerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeChangedFallbackHandlerIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeChangedFallbackHandlerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeChangedGuardIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeChangedGuardIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeChangedGuardIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeChangedGuardIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeChangedGuardIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeChangedGuardIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeChangedThresholdIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeChangedThresholdIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeChangedThresholdIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeChangedThresholdIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeChangedThresholdIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeChangedThresholdIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeDisabledModuleIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeDisabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeDisabledModuleIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeDisabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeDisabledModuleIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeDisabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeEnabledModuleIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeEnabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeEnabledModuleIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeEnabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeEnabledModuleIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeEnabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeExecutionFailureIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeExecutionFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeExecutionFailureIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeExecutionFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeExecutionFailureIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeExecutionFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeExecutionFromModuleFailureIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeExecutionFromModuleFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeExecutionFromModuleFailureIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeExecutionFromModuleFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeExecutionFromModuleFailureIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeExecutionFromModuleFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeExecutionFromModuleSuccessIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeExecutionFromModuleSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeExecutionFromModuleSuccessIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeExecutionFromModuleSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeExecutionFromModuleSuccessIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeExecutionFromModuleSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeExecutionSuccessIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeExecutionSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeExecutionSuccessIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeExecutionSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeExecutionSuccessIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeExecutionSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeFilterer_FilterAddedOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner []common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterAddedOwner(opts, owner)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var approvedHash [][32]byte
		fill_err = tp.Fill(&approvedHash)
		if fill_err != nil {
			return
		}
		var owner []common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterApproveHash(opts, approvedHash, owner)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterChangedFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var handler []common.Address
		fill_err = tp.Fill(&handler)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterChangedFallbackHandler(opts, handler)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterChangedGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var guard []common.Address
		fill_err = tp.Fill(&guard)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterChangedGuard(opts, guard)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterChangedThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterChangedThreshold(opts)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterDisabledModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module []common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterDisabledModule(opts, module)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterEnabledModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module []common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterEnabledModule(opts, module)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterExecutionFailure__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var txHash [][32]byte
		fill_err = tp.Fill(&txHash)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterExecutionFailure(opts, txHash)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterExecutionFromModuleFailure__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module []common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterExecutionFromModuleFailure(opts, module)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterExecutionFromModuleSuccess__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module []common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterExecutionFromModuleSuccess(opts, module)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterExecutionSuccess__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var txHash [][32]byte
		fill_err = tp.Fill(&txHash)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterExecutionSuccess(opts, txHash)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterRemovedOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner []common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterRemovedOwner(opts, owner)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterSafeReceived__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var sender []common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterSafeReceived(opts, sender)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterSafeSetup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var initiator []common.Address
		fill_err = tp.Fill(&initiator)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterSafeSetup(opts, initiator)
	})
}

func Fuzz_Nosy_SafeFilterer_FilterSignMsg__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var msgHash [][32]byte
		fill_err = tp.Fill(&msgHash)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.FilterSignMsg(opts, msgHash)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseAddedOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseAddedOwner(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseApproveHash(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseChangedFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseChangedFallbackHandler(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseChangedGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseChangedGuard(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseChangedThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseChangedThreshold(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseDisabledModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseDisabledModule(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseEnabledModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseEnabledModule(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseExecutionFailure__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseExecutionFailure(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseExecutionFromModuleFailure__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseExecutionFromModuleFailure(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseExecutionFromModuleSuccess__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseExecutionFromModuleSuccess(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseExecutionSuccess__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseExecutionSuccess(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseRemovedOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseRemovedOwner(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseSafeReceived__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseSafeReceived(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseSafeSetup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseSafeSetup(log)
	})
}

func Fuzz_Nosy_SafeFilterer_ParseSignMsg__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeFilterer
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ParseSignMsg(log)
	})
}

// skipping Fuzz_Nosy_SafeFilterer_WatchAddedOwner__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeAddedOwner

// skipping Fuzz_Nosy_SafeFilterer_WatchApproveHash__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeApproveHash

// skipping Fuzz_Nosy_SafeFilterer_WatchChangedFallbackHandler__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeChangedFallbackHandler

// skipping Fuzz_Nosy_SafeFilterer_WatchChangedGuard__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeChangedGuard

// skipping Fuzz_Nosy_SafeFilterer_WatchChangedThreshold__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeChangedThreshold

// skipping Fuzz_Nosy_SafeFilterer_WatchDisabledModule__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeDisabledModule

// skipping Fuzz_Nosy_SafeFilterer_WatchEnabledModule__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeEnabledModule

// skipping Fuzz_Nosy_SafeFilterer_WatchExecutionFailure__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeExecutionFailure

// skipping Fuzz_Nosy_SafeFilterer_WatchExecutionFromModuleFailure__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeExecutionFromModuleFailure

// skipping Fuzz_Nosy_SafeFilterer_WatchExecutionFromModuleSuccess__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeExecutionFromModuleSuccess

// skipping Fuzz_Nosy_SafeFilterer_WatchExecutionSuccess__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeExecutionSuccess

// skipping Fuzz_Nosy_SafeFilterer_WatchRemovedOwner__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeRemovedOwner

// skipping Fuzz_Nosy_SafeFilterer_WatchSafeReceived__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeSafeReceived

// skipping Fuzz_Nosy_SafeFilterer_WatchSafeSetup__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeSafeSetup

// skipping Fuzz_Nosy_SafeFilterer_WatchSignMsg__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeSignMsg

func Fuzz_Nosy_SafeL2V130AddedOwnerIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130AddedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130AddedOwnerIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130AddedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130AddedOwnerIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130AddedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130ApproveHashIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ApproveHashIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130ApproveHashIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ApproveHashIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130ApproveHashIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ApproveHashIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130Caller_ApprovedHashes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 [32]byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.ApprovedHashes(opts, arg0, arg1)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_CheckNSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		var requiredSignatures *big.Int
		fill_err = tp.Fill(&requiredSignatures)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil || requiredSignatures == nil {
			return
		}

		_SafeL2V130.CheckNSignatures(opts, dataHash, d4, signatures, requiredSignatures)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_CheckSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.CheckSignatures(opts, dataHash, d4, signatures)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_DomainSeparator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.DomainSeparator(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_EncodeTransactionData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_SafeL2V130.EncodeTransactionData(opts, to, value, d5, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.GetChainId(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_GetModulesPaginated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var start common.Address
		fill_err = tp.Fill(&start)
		if fill_err != nil {
			return
		}
		var pageSize *big.Int
		fill_err = tp.Fill(&pageSize)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil || pageSize == nil {
			return
		}

		_SafeL2V130.GetModulesPaginated(opts, start, pageSize)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_GetOwners__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.GetOwners(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_GetStorageAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var offset *big.Int
		fill_err = tp.Fill(&offset)
		if fill_err != nil {
			return
		}
		var length *big.Int
		fill_err = tp.Fill(&length)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil || offset == nil || length == nil {
			return
		}

		_SafeL2V130.GetStorageAt(opts, offset, length)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_GetThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.GetThreshold(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_GetTransactionHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_SafeL2V130.GetTransactionHash(opts, to, value, d5, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_IsModuleEnabled__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.IsModuleEnabled(opts, module)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_IsOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.IsOwner(opts, owner)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_Nonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.Nonce(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_SignedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.SignedMessages(opts, arg0)
	})
}

func Fuzz_Nosy_SafeL2V130Caller_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Caller
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.VERSION(opts)
	})
}

// skipping Fuzz_Nosy_SafeL2V130CallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_SafeL2V130CallerSession_ApprovedHashes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 [32]byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ApprovedHashes(arg0, arg1)
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_CheckNSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d3 []byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		var requiredSignatures *big.Int
		fill_err = tp.Fill(&requiredSignatures)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || requiredSignatures == nil {
			return
		}

		_SafeL2V130.CheckNSignatures(dataHash, d3, signatures, requiredSignatures)
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_CheckSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d3 []byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.CheckSignatures(dataHash, d3, signatures)
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_DomainSeparator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.DomainSeparator()
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_EncodeTransactionData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_SafeL2V130.EncodeTransactionData(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.GetChainId()
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_GetModulesPaginated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var start common.Address
		fill_err = tp.Fill(&start)
		if fill_err != nil {
			return
		}
		var pageSize *big.Int
		fill_err = tp.Fill(&pageSize)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || pageSize == nil {
			return
		}

		_SafeL2V130.GetModulesPaginated(start, pageSize)
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_GetOwners__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.GetOwners()
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_GetStorageAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var offset *big.Int
		fill_err = tp.Fill(&offset)
		if fill_err != nil {
			return
		}
		var length *big.Int
		fill_err = tp.Fill(&length)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || offset == nil || length == nil {
			return
		}

		_SafeL2V130.GetStorageAt(offset, length)
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_GetThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.GetThreshold()
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_GetTransactionHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_SafeL2V130.GetTransactionHash(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_IsModuleEnabled__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.IsModuleEnabled(module)
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_IsOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.IsOwner(owner)
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_Nonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.Nonce()
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_SignedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.SignedMessages(arg0)
	})
}

func Fuzz_Nosy_SafeL2V130CallerSession_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130CallerSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.VERSION()
	})
}

func Fuzz_Nosy_SafeL2V130ChangedFallbackHandlerIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ChangedFallbackHandlerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130ChangedFallbackHandlerIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ChangedFallbackHandlerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130ChangedFallbackHandlerIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ChangedFallbackHandlerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130ChangedGuardIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ChangedGuardIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130ChangedGuardIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ChangedGuardIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130ChangedGuardIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ChangedGuardIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130ChangedThresholdIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ChangedThresholdIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130ChangedThresholdIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ChangedThresholdIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130ChangedThresholdIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ChangedThresholdIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130DisabledModuleIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130DisabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130DisabledModuleIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130DisabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130DisabledModuleIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130DisabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130EnabledModuleIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130EnabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130EnabledModuleIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130EnabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130EnabledModuleIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130EnabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130ExecutionFailureIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ExecutionFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130ExecutionFailureIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ExecutionFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130ExecutionFailureIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ExecutionFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130ExecutionFromModuleFailureIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ExecutionFromModuleFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130ExecutionFromModuleFailureIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ExecutionFromModuleFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130ExecutionFromModuleFailureIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ExecutionFromModuleFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130ExecutionFromModuleSuccessIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ExecutionFromModuleSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130ExecutionFromModuleSuccessIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ExecutionFromModuleSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130ExecutionFromModuleSuccessIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ExecutionFromModuleSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130ExecutionSuccessIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ExecutionSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130ExecutionSuccessIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ExecutionSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130ExecutionSuccessIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130ExecutionSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterAddedOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterAddedOwner(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var approvedHash [][32]byte
		fill_err = tp.Fill(&approvedHash)
		if fill_err != nil {
			return
		}
		var owner []common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterApproveHash(opts, approvedHash, owner)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterChangedFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterChangedFallbackHandler(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterChangedGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterChangedGuard(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterChangedThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterChangedThreshold(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterDisabledModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterDisabledModule(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterEnabledModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterEnabledModule(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterExecutionFailure__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterExecutionFailure(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterExecutionFromModuleFailure__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module []common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterExecutionFromModuleFailure(opts, module)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterExecutionFromModuleSuccess__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module []common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterExecutionFromModuleSuccess(opts, module)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterExecutionSuccess__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterExecutionSuccess(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterRemovedOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterRemovedOwner(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterSafeModuleTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterSafeModuleTransaction(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterSafeMultiSigTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterSafeMultiSigTransaction(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterSafeReceived__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var sender []common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterSafeReceived(opts, sender)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterSafeSetup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var initiator []common.Address
		fill_err = tp.Fill(&initiator)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterSafeSetup(opts, initiator)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_FilterSignMsg__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var msgHash [][32]byte
		fill_err = tp.Fill(&msgHash)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.FilterSignMsg(opts, msgHash)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseAddedOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseAddedOwner(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseApproveHash(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseChangedFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseChangedFallbackHandler(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseChangedGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseChangedGuard(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseChangedThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseChangedThreshold(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseDisabledModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseDisabledModule(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseEnabledModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseEnabledModule(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseExecutionFailure__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseExecutionFailure(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseExecutionFromModuleFailure__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseExecutionFromModuleFailure(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseExecutionFromModuleSuccess__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseExecutionFromModuleSuccess(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseExecutionSuccess__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseExecutionSuccess(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseRemovedOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseRemovedOwner(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseSafeModuleTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseSafeModuleTransaction(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseSafeMultiSigTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseSafeMultiSigTransaction(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseSafeReceived__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseSafeReceived(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseSafeSetup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseSafeSetup(log)
	})
}

func Fuzz_Nosy_SafeL2V130Filterer_ParseSignMsg__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Filterer
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ParseSignMsg(log)
	})
}

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchAddedOwner__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130AddedOwner

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchApproveHash__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130ApproveHash

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchChangedFallbackHandler__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130ChangedFallbackHandler

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchChangedGuard__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130ChangedGuard

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchChangedThreshold__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130ChangedThreshold

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchDisabledModule__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130DisabledModule

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchEnabledModule__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130EnabledModule

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchExecutionFailure__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130ExecutionFailure

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchExecutionFromModuleFailure__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130ExecutionFromModuleFailure

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchExecutionFromModuleSuccess__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130ExecutionFromModuleSuccess

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchExecutionSuccess__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130ExecutionSuccess

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchRemovedOwner__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130RemovedOwner

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchSafeModuleTransaction__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130SafeModuleTransaction

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchSafeMultiSigTransaction__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130SafeMultiSigTransaction

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchSafeReceived__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130SafeReceived

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchSafeSetup__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130SafeSetup

// skipping Fuzz_Nosy_SafeL2V130Filterer_WatchSignMsg__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeL2V130SignMsg

// skipping Fuzz_Nosy_SafeL2V130Raw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_SafeL2V130Raw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SafeL2V130Raw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Raw
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.Transfer(opts)
	})
}

func Fuzz_Nosy_SafeL2V130RemovedOwnerIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130RemovedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130RemovedOwnerIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130RemovedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130RemovedOwnerIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130RemovedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130SafeModuleTransactionIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SafeModuleTransactionIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130SafeModuleTransactionIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SafeModuleTransactionIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130SafeModuleTransactionIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SafeModuleTransactionIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130SafeMultiSigTransactionIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SafeMultiSigTransactionIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130SafeMultiSigTransactionIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SafeMultiSigTransactionIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130SafeMultiSigTransactionIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SafeMultiSigTransactionIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130SafeReceivedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SafeReceivedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130SafeReceivedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SafeReceivedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130SafeReceivedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SafeReceivedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130SafeSetupIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SafeSetupIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130SafeSetupIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SafeSetupIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130SafeSetupIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SafeSetupIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130Session_AddOwnerWithThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || _threshold == nil {
			return
		}

		_SafeL2V130.AddOwnerWithThreshold(owner, _threshold)
	})
}

func Fuzz_Nosy_SafeL2V130Session_ApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var hashToApprove [32]byte
		fill_err = tp.Fill(&hashToApprove)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ApproveHash(hashToApprove)
	})
}

func Fuzz_Nosy_SafeL2V130Session_ApprovedHashes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 [32]byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ApprovedHashes(arg0, arg1)
	})
}

func Fuzz_Nosy_SafeL2V130Session_ChangeThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || _threshold == nil {
			return
		}

		_SafeL2V130.ChangeThreshold(_threshold)
	})
}

func Fuzz_Nosy_SafeL2V130Session_CheckNSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d3 []byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		var requiredSignatures *big.Int
		fill_err = tp.Fill(&requiredSignatures)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || requiredSignatures == nil {
			return
		}

		_SafeL2V130.CheckNSignatures(dataHash, d3, signatures, requiredSignatures)
	})
}

func Fuzz_Nosy_SafeL2V130Session_CheckSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d3 []byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.CheckSignatures(dataHash, d3, signatures)
	})
}

func Fuzz_Nosy_SafeL2V130Session_DisableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var prevModule common.Address
		fill_err = tp.Fill(&prevModule)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.DisableModule(prevModule, module)
	})
}

func Fuzz_Nosy_SafeL2V130Session_DomainSeparator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.DomainSeparator()
	})
}

func Fuzz_Nosy_SafeL2V130Session_EnableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.EnableModule(module)
	})
}

func Fuzz_Nosy_SafeL2V130Session_EncodeTransactionData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_SafeL2V130.EncodeTransactionData(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeL2V130Session_ExecTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil {
			return
		}

		_SafeL2V130.ExecTransaction(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures)
	})
}

func Fuzz_Nosy_SafeL2V130Session_ExecTransactionFromModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || value == nil {
			return
		}

		_SafeL2V130.ExecTransactionFromModule(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeL2V130Session_ExecTransactionFromModuleReturnData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || value == nil {
			return
		}

		_SafeL2V130.ExecTransactionFromModuleReturnData(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeL2V130Session_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.Fallback(calldata)
	})
}

func Fuzz_Nosy_SafeL2V130Session_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.GetChainId()
	})
}

func Fuzz_Nosy_SafeL2V130Session_GetModulesPaginated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var start common.Address
		fill_err = tp.Fill(&start)
		if fill_err != nil {
			return
		}
		var pageSize *big.Int
		fill_err = tp.Fill(&pageSize)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || pageSize == nil {
			return
		}

		_SafeL2V130.GetModulesPaginated(start, pageSize)
	})
}

func Fuzz_Nosy_SafeL2V130Session_GetOwners__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.GetOwners()
	})
}

func Fuzz_Nosy_SafeL2V130Session_GetStorageAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var offset *big.Int
		fill_err = tp.Fill(&offset)
		if fill_err != nil {
			return
		}
		var length *big.Int
		fill_err = tp.Fill(&length)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || offset == nil || length == nil {
			return
		}

		_SafeL2V130.GetStorageAt(offset, length)
	})
}

func Fuzz_Nosy_SafeL2V130Session_GetThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.GetThreshold()
	})
}

func Fuzz_Nosy_SafeL2V130Session_GetTransactionHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_SafeL2V130.GetTransactionHash(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeL2V130Session_IsModuleEnabled__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.IsModuleEnabled(module)
	})
}

func Fuzz_Nosy_SafeL2V130Session_IsOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.IsOwner(owner)
	})
}

func Fuzz_Nosy_SafeL2V130Session_Nonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.Nonce()
	})
}

func Fuzz_Nosy_SafeL2V130Session_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.Receive()
	})
}

func Fuzz_Nosy_SafeL2V130Session_RemoveOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || _threshold == nil {
			return
		}

		_SafeL2V130.RemoveOwner(prevOwner, owner, _threshold)
	})
}

func Fuzz_Nosy_SafeL2V130Session_RequiredTxGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || value == nil {
			return
		}

		_SafeL2V130.RequiredTxGas(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeL2V130Session_SetFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var handler common.Address
		fill_err = tp.Fill(&handler)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.SetFallbackHandler(handler)
	})
}

func Fuzz_Nosy_SafeL2V130Session_SetGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var guard common.Address
		fill_err = tp.Fill(&guard)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.SetGuard(guard)
	})
}

func Fuzz_Nosy_SafeL2V130Session_Setup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var _owners []common.Address
		fill_err = tp.Fill(&_owners)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var fallbackHandler common.Address
		fill_err = tp.Fill(&fallbackHandler)
		if fill_err != nil {
			return
		}
		var paymentToken common.Address
		fill_err = tp.Fill(&paymentToken)
		if fill_err != nil {
			return
		}
		var payment *big.Int
		fill_err = tp.Fill(&payment)
		if fill_err != nil {
			return
		}
		var paymentReceiver common.Address
		fill_err = tp.Fill(&paymentReceiver)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || _threshold == nil || payment == nil {
			return
		}

		_SafeL2V130.Setup(_owners, _threshold, to, d5, fallbackHandler, paymentToken, payment, paymentReceiver)
	})
}

func Fuzz_Nosy_SafeL2V130Session_SignedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.SignedMessages(arg0)
	})
}

func Fuzz_Nosy_SafeL2V130Session_SimulateAndRevert__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var targetContract common.Address
		fill_err = tp.Fill(&targetContract)
		if fill_err != nil {
			return
		}
		var calldataPayload []byte
		fill_err = tp.Fill(&calldataPayload)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.SimulateAndRevert(targetContract, calldataPayload)
	})
}

func Fuzz_Nosy_SafeL2V130Session_SwapOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var oldOwner common.Address
		fill_err = tp.Fill(&oldOwner)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.SwapOwner(prevOwner, oldOwner, newOwner)
	})
}

func Fuzz_Nosy_SafeL2V130Session_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Session
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.VERSION()
	})
}

func Fuzz_Nosy_SafeL2V130SignMsgIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SignMsgIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeL2V130SignMsgIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SignMsgIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeL2V130SignMsgIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeL2V130SignMsgIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_AddOwnerWithThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil || _threshold == nil {
			return
		}

		_SafeL2V130.AddOwnerWithThreshold(opts, owner, _threshold)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_ApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var hashToApprove [32]byte
		fill_err = tp.Fill(&hashToApprove)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.ApproveHash(opts, hashToApprove)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_ChangeThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil || _threshold == nil {
			return
		}

		_SafeL2V130.ChangeThreshold(opts, _threshold)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_DisableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var prevModule common.Address
		fill_err = tp.Fill(&prevModule)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.DisableModule(opts, prevModule, module)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_EnableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.EnableModule(opts, module)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_ExecTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil {
			return
		}

		_SafeL2V130.ExecTransaction(opts, to, value, d5, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_ExecTransactionFromModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil || value == nil {
			return
		}

		_SafeL2V130.ExecTransactionFromModule(opts, to, value, d5, operation)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_ExecTransactionFromModuleReturnData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil || value == nil {
			return
		}

		_SafeL2V130.ExecTransactionFromModuleReturnData(opts, to, value, d5, operation)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.Fallback(opts, calldata)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.Receive(opts)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_RemoveOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil || _threshold == nil {
			return
		}

		_SafeL2V130.RemoveOwner(opts, prevOwner, owner, _threshold)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_RequiredTxGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil || value == nil {
			return
		}

		_SafeL2V130.RequiredTxGas(opts, to, value, d5, operation)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_SetFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var handler common.Address
		fill_err = tp.Fill(&handler)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.SetFallbackHandler(opts, handler)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_SetGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var guard common.Address
		fill_err = tp.Fill(&guard)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.SetGuard(opts, guard)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_Setup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _owners []common.Address
		fill_err = tp.Fill(&_owners)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var d6 []byte
		fill_err = tp.Fill(&d6)
		if fill_err != nil {
			return
		}
		var fallbackHandler common.Address
		fill_err = tp.Fill(&fallbackHandler)
		if fill_err != nil {
			return
		}
		var paymentToken common.Address
		fill_err = tp.Fill(&paymentToken)
		if fill_err != nil {
			return
		}
		var payment *big.Int
		fill_err = tp.Fill(&payment)
		if fill_err != nil {
			return
		}
		var paymentReceiver common.Address
		fill_err = tp.Fill(&paymentReceiver)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil || _threshold == nil || payment == nil {
			return
		}

		_SafeL2V130.Setup(opts, _owners, _threshold, to, d6, fallbackHandler, paymentToken, payment, paymentReceiver)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_SimulateAndRevert__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var targetContract common.Address
		fill_err = tp.Fill(&targetContract)
		if fill_err != nil {
			return
		}
		var calldataPayload []byte
		fill_err = tp.Fill(&calldataPayload)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.SimulateAndRevert(opts, targetContract, calldataPayload)
	})
}

func Fuzz_Nosy_SafeL2V130Transactor_SwapOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130Transactor
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var oldOwner common.Address
		fill_err = tp.Fill(&oldOwner)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.SwapOwner(opts, prevOwner, oldOwner, newOwner)
	})
}

// skipping Fuzz_Nosy_SafeL2V130TransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SafeL2V130TransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorRaw
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || opts == nil {
			return
		}

		_SafeL2V130.Transfer(opts)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_AddOwnerWithThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || _threshold == nil {
			return
		}

		_SafeL2V130.AddOwnerWithThreshold(owner, _threshold)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_ApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var hashToApprove [32]byte
		fill_err = tp.Fill(&hashToApprove)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.ApproveHash(hashToApprove)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_ChangeThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || _threshold == nil {
			return
		}

		_SafeL2V130.ChangeThreshold(_threshold)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_DisableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var prevModule common.Address
		fill_err = tp.Fill(&prevModule)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.DisableModule(prevModule, module)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_EnableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.EnableModule(module)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_ExecTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil {
			return
		}

		_SafeL2V130.ExecTransaction(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_ExecTransactionFromModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || value == nil {
			return
		}

		_SafeL2V130.ExecTransactionFromModule(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_ExecTransactionFromModuleReturnData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || value == nil {
			return
		}

		_SafeL2V130.ExecTransactionFromModuleReturnData(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.Fallback(calldata)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.Receive()
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_RemoveOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || _threshold == nil {
			return
		}

		_SafeL2V130.RemoveOwner(prevOwner, owner, _threshold)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_RequiredTxGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || value == nil {
			return
		}

		_SafeL2V130.RequiredTxGas(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_SetFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var handler common.Address
		fill_err = tp.Fill(&handler)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.SetFallbackHandler(handler)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_SetGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var guard common.Address
		fill_err = tp.Fill(&guard)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.SetGuard(guard)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_Setup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var _owners []common.Address
		fill_err = tp.Fill(&_owners)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var fallbackHandler common.Address
		fill_err = tp.Fill(&fallbackHandler)
		if fill_err != nil {
			return
		}
		var paymentToken common.Address
		fill_err = tp.Fill(&paymentToken)
		if fill_err != nil {
			return
		}
		var payment *big.Int
		fill_err = tp.Fill(&payment)
		if fill_err != nil {
			return
		}
		var paymentReceiver common.Address
		fill_err = tp.Fill(&paymentReceiver)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil || _threshold == nil || payment == nil {
			return
		}

		_SafeL2V130.Setup(_owners, _threshold, to, d5, fallbackHandler, paymentToken, payment, paymentReceiver)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_SimulateAndRevert__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var targetContract common.Address
		fill_err = tp.Fill(&targetContract)
		if fill_err != nil {
			return
		}
		var calldataPayload []byte
		fill_err = tp.Fill(&calldataPayload)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.SimulateAndRevert(targetContract, calldataPayload)
	})
}

func Fuzz_Nosy_SafeL2V130TransactorSession_SwapOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeL2V130 *SafeL2V130TransactorSession
		fill_err = tp.Fill(&_SafeL2V130)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var oldOwner common.Address
		fill_err = tp.Fill(&oldOwner)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _SafeL2V130 == nil {
			return
		}

		_SafeL2V130.SwapOwner(prevOwner, oldOwner, newOwner)
	})
}

func Fuzz_Nosy_SafeProxyFactoryCaller_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryCaller
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || opts == nil {
			return
		}

		_SafeProxyFactory.GetChainId(opts)
	})
}

func Fuzz_Nosy_SafeProxyFactoryCaller_ProxyCreationCode__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryCaller
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || opts == nil {
			return
		}

		_SafeProxyFactory.ProxyCreationCode(opts)
	})
}

// skipping Fuzz_Nosy_SafeProxyFactoryCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_SafeProxyFactoryCallerSession_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryCallerSession
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil {
			return
		}

		_SafeProxyFactory.GetChainId()
	})
}

func Fuzz_Nosy_SafeProxyFactoryCallerSession_ProxyCreationCode__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryCallerSession
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil {
			return
		}

		_SafeProxyFactory.ProxyCreationCode()
	})
}

func Fuzz_Nosy_SafeProxyFactoryFilterer_FilterProxyCreation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryFilterer
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var proxy []common.Address
		fill_err = tp.Fill(&proxy)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || opts == nil {
			return
		}

		_SafeProxyFactory.FilterProxyCreation(opts, proxy)
	})
}

func Fuzz_Nosy_SafeProxyFactoryFilterer_ParseProxyCreation__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryFilterer
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil {
			return
		}

		_SafeProxyFactory.ParseProxyCreation(log)
	})
}

// skipping Fuzz_Nosy_SafeProxyFactoryFilterer_WatchProxyCreation__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeProxyFactoryProxyCreation

func Fuzz_Nosy_SafeProxyFactoryProxyCreationIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeProxyFactoryProxyCreationIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeProxyFactoryProxyCreationIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeProxyFactoryProxyCreationIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeProxyFactoryProxyCreationIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeProxyFactoryProxyCreationIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_SafeProxyFactoryRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_SafeProxyFactoryRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SafeProxyFactoryRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryRaw
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || opts == nil {
			return
		}

		_SafeProxyFactory.Transfer(opts)
	})
}

func Fuzz_Nosy_SafeProxyFactorySession_CreateChainSpecificProxyWithNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactorySession
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var _singleton common.Address
		fill_err = tp.Fill(&_singleton)
		if fill_err != nil {
			return
		}
		var initializer []byte
		fill_err = tp.Fill(&initializer)
		if fill_err != nil {
			return
		}
		var saltNonce *big.Int
		fill_err = tp.Fill(&saltNonce)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || saltNonce == nil {
			return
		}

		_SafeProxyFactory.CreateChainSpecificProxyWithNonce(_singleton, initializer, saltNonce)
	})
}

func Fuzz_Nosy_SafeProxyFactorySession_CreateProxyWithCallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactorySession
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var _singleton common.Address
		fill_err = tp.Fill(&_singleton)
		if fill_err != nil {
			return
		}
		var initializer []byte
		fill_err = tp.Fill(&initializer)
		if fill_err != nil {
			return
		}
		var saltNonce *big.Int
		fill_err = tp.Fill(&saltNonce)
		if fill_err != nil {
			return
		}
		var callback common.Address
		fill_err = tp.Fill(&callback)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || saltNonce == nil {
			return
		}

		_SafeProxyFactory.CreateProxyWithCallback(_singleton, initializer, saltNonce, callback)
	})
}

func Fuzz_Nosy_SafeProxyFactorySession_CreateProxyWithNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactorySession
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var _singleton common.Address
		fill_err = tp.Fill(&_singleton)
		if fill_err != nil {
			return
		}
		var initializer []byte
		fill_err = tp.Fill(&initializer)
		if fill_err != nil {
			return
		}
		var saltNonce *big.Int
		fill_err = tp.Fill(&saltNonce)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || saltNonce == nil {
			return
		}

		_SafeProxyFactory.CreateProxyWithNonce(_singleton, initializer, saltNonce)
	})
}

func Fuzz_Nosy_SafeProxyFactorySession_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactorySession
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil {
			return
		}

		_SafeProxyFactory.GetChainId()
	})
}

func Fuzz_Nosy_SafeProxyFactorySession_ProxyCreationCode__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactorySession
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil {
			return
		}

		_SafeProxyFactory.ProxyCreationCode()
	})
}

func Fuzz_Nosy_SafeProxyFactoryTransactor_CreateChainSpecificProxyWithNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryTransactor
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _singleton common.Address
		fill_err = tp.Fill(&_singleton)
		if fill_err != nil {
			return
		}
		var initializer []byte
		fill_err = tp.Fill(&initializer)
		if fill_err != nil {
			return
		}
		var saltNonce *big.Int
		fill_err = tp.Fill(&saltNonce)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || opts == nil || saltNonce == nil {
			return
		}

		_SafeProxyFactory.CreateChainSpecificProxyWithNonce(opts, _singleton, initializer, saltNonce)
	})
}

func Fuzz_Nosy_SafeProxyFactoryTransactor_CreateProxyWithCallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryTransactor
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _singleton common.Address
		fill_err = tp.Fill(&_singleton)
		if fill_err != nil {
			return
		}
		var initializer []byte
		fill_err = tp.Fill(&initializer)
		if fill_err != nil {
			return
		}
		var saltNonce *big.Int
		fill_err = tp.Fill(&saltNonce)
		if fill_err != nil {
			return
		}
		var callback common.Address
		fill_err = tp.Fill(&callback)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || opts == nil || saltNonce == nil {
			return
		}

		_SafeProxyFactory.CreateProxyWithCallback(opts, _singleton, initializer, saltNonce, callback)
	})
}

func Fuzz_Nosy_SafeProxyFactoryTransactor_CreateProxyWithNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryTransactor
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _singleton common.Address
		fill_err = tp.Fill(&_singleton)
		if fill_err != nil {
			return
		}
		var initializer []byte
		fill_err = tp.Fill(&initializer)
		if fill_err != nil {
			return
		}
		var saltNonce *big.Int
		fill_err = tp.Fill(&saltNonce)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || opts == nil || saltNonce == nil {
			return
		}

		_SafeProxyFactory.CreateProxyWithNonce(opts, _singleton, initializer, saltNonce)
	})
}

// skipping Fuzz_Nosy_SafeProxyFactoryTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SafeProxyFactoryTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryTransactorRaw
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || opts == nil {
			return
		}

		_SafeProxyFactory.Transfer(opts)
	})
}

func Fuzz_Nosy_SafeProxyFactoryTransactorSession_CreateChainSpecificProxyWithNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryTransactorSession
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var _singleton common.Address
		fill_err = tp.Fill(&_singleton)
		if fill_err != nil {
			return
		}
		var initializer []byte
		fill_err = tp.Fill(&initializer)
		if fill_err != nil {
			return
		}
		var saltNonce *big.Int
		fill_err = tp.Fill(&saltNonce)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || saltNonce == nil {
			return
		}

		_SafeProxyFactory.CreateChainSpecificProxyWithNonce(_singleton, initializer, saltNonce)
	})
}

func Fuzz_Nosy_SafeProxyFactoryTransactorSession_CreateProxyWithCallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryTransactorSession
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var _singleton common.Address
		fill_err = tp.Fill(&_singleton)
		if fill_err != nil {
			return
		}
		var initializer []byte
		fill_err = tp.Fill(&initializer)
		if fill_err != nil {
			return
		}
		var saltNonce *big.Int
		fill_err = tp.Fill(&saltNonce)
		if fill_err != nil {
			return
		}
		var callback common.Address
		fill_err = tp.Fill(&callback)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || saltNonce == nil {
			return
		}

		_SafeProxyFactory.CreateProxyWithCallback(_singleton, initializer, saltNonce, callback)
	})
}

func Fuzz_Nosy_SafeProxyFactoryTransactorSession_CreateProxyWithNonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeProxyFactory *SafeProxyFactoryTransactorSession
		fill_err = tp.Fill(&_SafeProxyFactory)
		if fill_err != nil {
			return
		}
		var _singleton common.Address
		fill_err = tp.Fill(&_singleton)
		if fill_err != nil {
			return
		}
		var initializer []byte
		fill_err = tp.Fill(&initializer)
		if fill_err != nil {
			return
		}
		var saltNonce *big.Int
		fill_err = tp.Fill(&saltNonce)
		if fill_err != nil {
			return
		}
		if _SafeProxyFactory == nil || saltNonce == nil {
			return
		}

		_SafeProxyFactory.CreateProxyWithNonce(_singleton, initializer, saltNonce)
	})
}

// skipping Fuzz_Nosy_SafeRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_SafeRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SafeRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeRaw
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.Transfer(opts)
	})
}

func Fuzz_Nosy_SafeRemovedOwnerIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeRemovedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeRemovedOwnerIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeRemovedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeRemovedOwnerIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeRemovedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeSafeReceivedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeSafeReceivedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeSafeReceivedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeSafeReceivedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeSafeReceivedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeSafeReceivedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeSafeSetupIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeSafeSetupIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeSafeSetupIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeSafeSetupIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeSafeSetupIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeSafeSetupIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeSession_AddOwnerWithThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _Safe == nil || _threshold == nil {
			return
		}

		_Safe.AddOwnerWithThreshold(owner, _threshold)
	})
}

func Fuzz_Nosy_SafeSession_ApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var hashToApprove [32]byte
		fill_err = tp.Fill(&hashToApprove)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ApproveHash(hashToApprove)
	})
}

func Fuzz_Nosy_SafeSession_ApprovedHashes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 [32]byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ApprovedHashes(arg0, arg1)
	})
}

func Fuzz_Nosy_SafeSession_ChangeThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _Safe == nil || _threshold == nil {
			return
		}

		_Safe.ChangeThreshold(_threshold)
	})
}

func Fuzz_Nosy_SafeSession_CheckNSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d3 []byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		var requiredSignatures *big.Int
		fill_err = tp.Fill(&requiredSignatures)
		if fill_err != nil {
			return
		}
		if _Safe == nil || requiredSignatures == nil {
			return
		}

		_Safe.CheckNSignatures(dataHash, d3, signatures, requiredSignatures)
	})
}

func Fuzz_Nosy_SafeSession_CheckSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d3 []byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.CheckSignatures(dataHash, d3, signatures)
	})
}

func Fuzz_Nosy_SafeSession_DisableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var prevModule common.Address
		fill_err = tp.Fill(&prevModule)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.DisableModule(prevModule, module)
	})
}

func Fuzz_Nosy_SafeSession_DomainSeparator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.DomainSeparator()
	})
}

func Fuzz_Nosy_SafeSession_EnableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.EnableModule(module)
	})
}

func Fuzz_Nosy_SafeSession_EncodeTransactionData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _Safe == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_Safe.EncodeTransactionData(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeSession_ExecTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _Safe == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil {
			return
		}

		_Safe.ExecTransaction(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures)
	})
}

func Fuzz_Nosy_SafeSession_ExecTransactionFromModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _Safe == nil || value == nil {
			return
		}

		_Safe.ExecTransactionFromModule(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeSession_ExecTransactionFromModuleReturnData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _Safe == nil || value == nil {
			return
		}

		_Safe.ExecTransactionFromModuleReturnData(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.Fallback(calldata)
	})
}

func Fuzz_Nosy_SafeSession_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.GetChainId()
	})
}

func Fuzz_Nosy_SafeSession_GetModulesPaginated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var start common.Address
		fill_err = tp.Fill(&start)
		if fill_err != nil {
			return
		}
		var pageSize *big.Int
		fill_err = tp.Fill(&pageSize)
		if fill_err != nil {
			return
		}
		if _Safe == nil || pageSize == nil {
			return
		}

		_Safe.GetModulesPaginated(start, pageSize)
	})
}

func Fuzz_Nosy_SafeSession_GetOwners__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.GetOwners()
	})
}

func Fuzz_Nosy_SafeSession_GetStorageAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var offset *big.Int
		fill_err = tp.Fill(&offset)
		if fill_err != nil {
			return
		}
		var length *big.Int
		fill_err = tp.Fill(&length)
		if fill_err != nil {
			return
		}
		if _Safe == nil || offset == nil || length == nil {
			return
		}

		_Safe.GetStorageAt(offset, length)
	})
}

func Fuzz_Nosy_SafeSession_GetThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.GetThreshold()
	})
}

func Fuzz_Nosy_SafeSession_GetTransactionHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _Safe == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_Safe.GetTransactionHash(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeSession_IsModuleEnabled__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.IsModuleEnabled(module)
	})
}

func Fuzz_Nosy_SafeSession_IsOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.IsOwner(owner)
	})
}

func Fuzz_Nosy_SafeSession_Nonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.Nonce()
	})
}

func Fuzz_Nosy_SafeSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.Receive()
	})
}

func Fuzz_Nosy_SafeSession_RemoveOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _Safe == nil || _threshold == nil {
			return
		}

		_Safe.RemoveOwner(prevOwner, owner, _threshold)
	})
}

func Fuzz_Nosy_SafeSession_SetFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var handler common.Address
		fill_err = tp.Fill(&handler)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.SetFallbackHandler(handler)
	})
}

func Fuzz_Nosy_SafeSession_SetGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var guard common.Address
		fill_err = tp.Fill(&guard)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.SetGuard(guard)
	})
}

func Fuzz_Nosy_SafeSession_Setup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var _owners []common.Address
		fill_err = tp.Fill(&_owners)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var fallbackHandler common.Address
		fill_err = tp.Fill(&fallbackHandler)
		if fill_err != nil {
			return
		}
		var paymentToken common.Address
		fill_err = tp.Fill(&paymentToken)
		if fill_err != nil {
			return
		}
		var payment *big.Int
		fill_err = tp.Fill(&payment)
		if fill_err != nil {
			return
		}
		var paymentReceiver common.Address
		fill_err = tp.Fill(&paymentReceiver)
		if fill_err != nil {
			return
		}
		if _Safe == nil || _threshold == nil || payment == nil {
			return
		}

		_Safe.Setup(_owners, _threshold, to, d5, fallbackHandler, paymentToken, payment, paymentReceiver)
	})
}

func Fuzz_Nosy_SafeSession_SignedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.SignedMessages(arg0)
	})
}

func Fuzz_Nosy_SafeSession_SimulateAndRevert__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var targetContract common.Address
		fill_err = tp.Fill(&targetContract)
		if fill_err != nil {
			return
		}
		var calldataPayload []byte
		fill_err = tp.Fill(&calldataPayload)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.SimulateAndRevert(targetContract, calldataPayload)
	})
}

func Fuzz_Nosy_SafeSession_SwapOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var oldOwner common.Address
		fill_err = tp.Fill(&oldOwner)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.SwapOwner(prevOwner, oldOwner, newOwner)
	})
}

func Fuzz_Nosy_SafeSession_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.VERSION()
	})
}

func Fuzz_Nosy_SafeSignMsgIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeSignMsgIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeSignMsgIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeSignMsgIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeSignMsgIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeSignMsgIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_SafeSingletonFactoryCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_SafeSingletonFactoryRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_SafeSingletonFactoryRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SafeSingletonFactoryRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeSingletonFactory *SafeSingletonFactoryRaw
		fill_err = tp.Fill(&_SafeSingletonFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeSingletonFactory == nil || opts == nil {
			return
		}

		_SafeSingletonFactory.Transfer(opts)
	})
}

func Fuzz_Nosy_SafeSingletonFactorySession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeSingletonFactory *SafeSingletonFactorySession
		fill_err = tp.Fill(&_SafeSingletonFactory)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _SafeSingletonFactory == nil {
			return
		}

		_SafeSingletonFactory.Fallback(calldata)
	})
}

func Fuzz_Nosy_SafeSingletonFactoryTransactor_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeSingletonFactory *SafeSingletonFactoryTransactor
		fill_err = tp.Fill(&_SafeSingletonFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _SafeSingletonFactory == nil || opts == nil {
			return
		}

		_SafeSingletonFactory.Fallback(opts, calldata)
	})
}

// skipping Fuzz_Nosy_SafeSingletonFactoryTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SafeSingletonFactoryTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeSingletonFactory *SafeSingletonFactoryTransactorRaw
		fill_err = tp.Fill(&_SafeSingletonFactory)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeSingletonFactory == nil || opts == nil {
			return
		}

		_SafeSingletonFactory.Transfer(opts)
	})
}

func Fuzz_Nosy_SafeSingletonFactoryTransactorSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeSingletonFactory *SafeSingletonFactoryTransactorSession
		fill_err = tp.Fill(&_SafeSingletonFactory)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _SafeSingletonFactory == nil {
			return
		}

		_SafeSingletonFactory.Fallback(calldata)
	})
}

func Fuzz_Nosy_SafeTransactor_AddOwnerWithThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil || _threshold == nil {
			return
		}

		_Safe.AddOwnerWithThreshold(opts, owner, _threshold)
	})
}

func Fuzz_Nosy_SafeTransactor_ApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var hashToApprove [32]byte
		fill_err = tp.Fill(&hashToApprove)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.ApproveHash(opts, hashToApprove)
	})
}

func Fuzz_Nosy_SafeTransactor_ChangeThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil || _threshold == nil {
			return
		}

		_Safe.ChangeThreshold(opts, _threshold)
	})
}

func Fuzz_Nosy_SafeTransactor_DisableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var prevModule common.Address
		fill_err = tp.Fill(&prevModule)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.DisableModule(opts, prevModule, module)
	})
}

func Fuzz_Nosy_SafeTransactor_EnableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.EnableModule(opts, module)
	})
}

func Fuzz_Nosy_SafeTransactor_ExecTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil {
			return
		}

		_Safe.ExecTransaction(opts, to, value, d5, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures)
	})
}

func Fuzz_Nosy_SafeTransactor_ExecTransactionFromModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil || value == nil {
			return
		}

		_Safe.ExecTransactionFromModule(opts, to, value, d5, operation)
	})
}

func Fuzz_Nosy_SafeTransactor_ExecTransactionFromModuleReturnData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil || value == nil {
			return
		}

		_Safe.ExecTransactionFromModuleReturnData(opts, to, value, d5, operation)
	})
}

func Fuzz_Nosy_SafeTransactor_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.Fallback(opts, calldata)
	})
}

func Fuzz_Nosy_SafeTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.Receive(opts)
	})
}

func Fuzz_Nosy_SafeTransactor_RemoveOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil || _threshold == nil {
			return
		}

		_Safe.RemoveOwner(opts, prevOwner, owner, _threshold)
	})
}

func Fuzz_Nosy_SafeTransactor_SetFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var handler common.Address
		fill_err = tp.Fill(&handler)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.SetFallbackHandler(opts, handler)
	})
}

func Fuzz_Nosy_SafeTransactor_SetGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var guard common.Address
		fill_err = tp.Fill(&guard)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.SetGuard(opts, guard)
	})
}

func Fuzz_Nosy_SafeTransactor_Setup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _owners []common.Address
		fill_err = tp.Fill(&_owners)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var d6 []byte
		fill_err = tp.Fill(&d6)
		if fill_err != nil {
			return
		}
		var fallbackHandler common.Address
		fill_err = tp.Fill(&fallbackHandler)
		if fill_err != nil {
			return
		}
		var paymentToken common.Address
		fill_err = tp.Fill(&paymentToken)
		if fill_err != nil {
			return
		}
		var payment *big.Int
		fill_err = tp.Fill(&payment)
		if fill_err != nil {
			return
		}
		var paymentReceiver common.Address
		fill_err = tp.Fill(&paymentReceiver)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil || _threshold == nil || payment == nil {
			return
		}

		_Safe.Setup(opts, _owners, _threshold, to, d6, fallbackHandler, paymentToken, payment, paymentReceiver)
	})
}

func Fuzz_Nosy_SafeTransactor_SimulateAndRevert__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var targetContract common.Address
		fill_err = tp.Fill(&targetContract)
		if fill_err != nil {
			return
		}
		var calldataPayload []byte
		fill_err = tp.Fill(&calldataPayload)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.SimulateAndRevert(opts, targetContract, calldataPayload)
	})
}

func Fuzz_Nosy_SafeTransactor_SwapOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactor
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var oldOwner common.Address
		fill_err = tp.Fill(&oldOwner)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.SwapOwner(opts, prevOwner, oldOwner, newOwner)
	})
}

// skipping Fuzz_Nosy_SafeTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SafeTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorRaw
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _Safe == nil || opts == nil {
			return
		}

		_Safe.Transfer(opts)
	})
}

func Fuzz_Nosy_SafeTransactorSession_AddOwnerWithThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _Safe == nil || _threshold == nil {
			return
		}

		_Safe.AddOwnerWithThreshold(owner, _threshold)
	})
}

func Fuzz_Nosy_SafeTransactorSession_ApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var hashToApprove [32]byte
		fill_err = tp.Fill(&hashToApprove)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.ApproveHash(hashToApprove)
	})
}

func Fuzz_Nosy_SafeTransactorSession_ChangeThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _Safe == nil || _threshold == nil {
			return
		}

		_Safe.ChangeThreshold(_threshold)
	})
}

func Fuzz_Nosy_SafeTransactorSession_DisableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var prevModule common.Address
		fill_err = tp.Fill(&prevModule)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.DisableModule(prevModule, module)
	})
}

func Fuzz_Nosy_SafeTransactorSession_EnableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.EnableModule(module)
	})
}

func Fuzz_Nosy_SafeTransactorSession_ExecTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _Safe == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil {
			return
		}

		_Safe.ExecTransaction(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures)
	})
}

func Fuzz_Nosy_SafeTransactorSession_ExecTransactionFromModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _Safe == nil || value == nil {
			return
		}

		_Safe.ExecTransactionFromModule(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeTransactorSession_ExecTransactionFromModuleReturnData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _Safe == nil || value == nil {
			return
		}

		_Safe.ExecTransactionFromModuleReturnData(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeTransactorSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.Fallback(calldata)
	})
}

func Fuzz_Nosy_SafeTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.Receive()
	})
}

func Fuzz_Nosy_SafeTransactorSession_RemoveOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _Safe == nil || _threshold == nil {
			return
		}

		_Safe.RemoveOwner(prevOwner, owner, _threshold)
	})
}

func Fuzz_Nosy_SafeTransactorSession_SetFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var handler common.Address
		fill_err = tp.Fill(&handler)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.SetFallbackHandler(handler)
	})
}

func Fuzz_Nosy_SafeTransactorSession_SetGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var guard common.Address
		fill_err = tp.Fill(&guard)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.SetGuard(guard)
	})
}

func Fuzz_Nosy_SafeTransactorSession_Setup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var _owners []common.Address
		fill_err = tp.Fill(&_owners)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var fallbackHandler common.Address
		fill_err = tp.Fill(&fallbackHandler)
		if fill_err != nil {
			return
		}
		var paymentToken common.Address
		fill_err = tp.Fill(&paymentToken)
		if fill_err != nil {
			return
		}
		var payment *big.Int
		fill_err = tp.Fill(&payment)
		if fill_err != nil {
			return
		}
		var paymentReceiver common.Address
		fill_err = tp.Fill(&paymentReceiver)
		if fill_err != nil {
			return
		}
		if _Safe == nil || _threshold == nil || payment == nil {
			return
		}

		_Safe.Setup(_owners, _threshold, to, d5, fallbackHandler, paymentToken, payment, paymentReceiver)
	})
}

func Fuzz_Nosy_SafeTransactorSession_SimulateAndRevert__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var targetContract common.Address
		fill_err = tp.Fill(&targetContract)
		if fill_err != nil {
			return
		}
		var calldataPayload []byte
		fill_err = tp.Fill(&calldataPayload)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.SimulateAndRevert(targetContract, calldataPayload)
	})
}

func Fuzz_Nosy_SafeTransactorSession_SwapOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _Safe *SafeTransactorSession
		fill_err = tp.Fill(&_Safe)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var oldOwner common.Address
		fill_err = tp.Fill(&oldOwner)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _Safe == nil {
			return
		}

		_Safe.SwapOwner(prevOwner, oldOwner, newOwner)
	})
}

func Fuzz_Nosy_SafeV130AddedOwnerIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130AddedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130AddedOwnerIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130AddedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130AddedOwnerIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130AddedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130ApproveHashIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ApproveHashIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130ApproveHashIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ApproveHashIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130ApproveHashIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ApproveHashIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130Caller_ApprovedHashes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 [32]byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.ApprovedHashes(opts, arg0, arg1)
	})
}

func Fuzz_Nosy_SafeV130Caller_CheckNSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		var requiredSignatures *big.Int
		fill_err = tp.Fill(&requiredSignatures)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil || requiredSignatures == nil {
			return
		}

		_SafeV130.CheckNSignatures(opts, dataHash, d4, signatures, requiredSignatures)
	})
}

func Fuzz_Nosy_SafeV130Caller_CheckSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.CheckSignatures(opts, dataHash, d4, signatures)
	})
}

func Fuzz_Nosy_SafeV130Caller_DomainSeparator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.DomainSeparator(opts)
	})
}

func Fuzz_Nosy_SafeV130Caller_EncodeTransactionData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_SafeV130.EncodeTransactionData(opts, to, value, d5, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeV130Caller_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.GetChainId(opts)
	})
}

func Fuzz_Nosy_SafeV130Caller_GetModulesPaginated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var start common.Address
		fill_err = tp.Fill(&start)
		if fill_err != nil {
			return
		}
		var pageSize *big.Int
		fill_err = tp.Fill(&pageSize)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil || pageSize == nil {
			return
		}

		_SafeV130.GetModulesPaginated(opts, start, pageSize)
	})
}

func Fuzz_Nosy_SafeV130Caller_GetOwners__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.GetOwners(opts)
	})
}

func Fuzz_Nosy_SafeV130Caller_GetStorageAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var offset *big.Int
		fill_err = tp.Fill(&offset)
		if fill_err != nil {
			return
		}
		var length *big.Int
		fill_err = tp.Fill(&length)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil || offset == nil || length == nil {
			return
		}

		_SafeV130.GetStorageAt(opts, offset, length)
	})
}

func Fuzz_Nosy_SafeV130Caller_GetThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.GetThreshold(opts)
	})
}

func Fuzz_Nosy_SafeV130Caller_GetTransactionHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_SafeV130.GetTransactionHash(opts, to, value, d5, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeV130Caller_IsModuleEnabled__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.IsModuleEnabled(opts, module)
	})
}

func Fuzz_Nosy_SafeV130Caller_IsOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.IsOwner(opts, owner)
	})
}

func Fuzz_Nosy_SafeV130Caller_Nonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.Nonce(opts)
	})
}

func Fuzz_Nosy_SafeV130Caller_SignedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.SignedMessages(opts, arg0)
	})
}

func Fuzz_Nosy_SafeV130Caller_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Caller
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.VERSION(opts)
	})
}

// skipping Fuzz_Nosy_SafeV130CallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_SafeV130CallerSession_ApprovedHashes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 [32]byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ApprovedHashes(arg0, arg1)
	})
}

func Fuzz_Nosy_SafeV130CallerSession_CheckNSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d3 []byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		var requiredSignatures *big.Int
		fill_err = tp.Fill(&requiredSignatures)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || requiredSignatures == nil {
			return
		}

		_SafeV130.CheckNSignatures(dataHash, d3, signatures, requiredSignatures)
	})
}

func Fuzz_Nosy_SafeV130CallerSession_CheckSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d3 []byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.CheckSignatures(dataHash, d3, signatures)
	})
}

func Fuzz_Nosy_SafeV130CallerSession_DomainSeparator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.DomainSeparator()
	})
}

func Fuzz_Nosy_SafeV130CallerSession_EncodeTransactionData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_SafeV130.EncodeTransactionData(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeV130CallerSession_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.GetChainId()
	})
}

func Fuzz_Nosy_SafeV130CallerSession_GetModulesPaginated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var start common.Address
		fill_err = tp.Fill(&start)
		if fill_err != nil {
			return
		}
		var pageSize *big.Int
		fill_err = tp.Fill(&pageSize)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || pageSize == nil {
			return
		}

		_SafeV130.GetModulesPaginated(start, pageSize)
	})
}

func Fuzz_Nosy_SafeV130CallerSession_GetOwners__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.GetOwners()
	})
}

func Fuzz_Nosy_SafeV130CallerSession_GetStorageAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var offset *big.Int
		fill_err = tp.Fill(&offset)
		if fill_err != nil {
			return
		}
		var length *big.Int
		fill_err = tp.Fill(&length)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || offset == nil || length == nil {
			return
		}

		_SafeV130.GetStorageAt(offset, length)
	})
}

func Fuzz_Nosy_SafeV130CallerSession_GetThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.GetThreshold()
	})
}

func Fuzz_Nosy_SafeV130CallerSession_GetTransactionHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_SafeV130.GetTransactionHash(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeV130CallerSession_IsModuleEnabled__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.IsModuleEnabled(module)
	})
}

func Fuzz_Nosy_SafeV130CallerSession_IsOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.IsOwner(owner)
	})
}

func Fuzz_Nosy_SafeV130CallerSession_Nonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.Nonce()
	})
}

func Fuzz_Nosy_SafeV130CallerSession_SignedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.SignedMessages(arg0)
	})
}

func Fuzz_Nosy_SafeV130CallerSession_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130CallerSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.VERSION()
	})
}

func Fuzz_Nosy_SafeV130ChangedFallbackHandlerIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ChangedFallbackHandlerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130ChangedFallbackHandlerIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ChangedFallbackHandlerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130ChangedFallbackHandlerIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ChangedFallbackHandlerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130ChangedGuardIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ChangedGuardIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130ChangedGuardIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ChangedGuardIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130ChangedGuardIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ChangedGuardIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130ChangedThresholdIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ChangedThresholdIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130ChangedThresholdIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ChangedThresholdIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130ChangedThresholdIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ChangedThresholdIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130DisabledModuleIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130DisabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130DisabledModuleIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130DisabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130DisabledModuleIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130DisabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130EnabledModuleIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130EnabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130EnabledModuleIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130EnabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130EnabledModuleIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130EnabledModuleIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130ExecutionFailureIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ExecutionFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130ExecutionFailureIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ExecutionFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130ExecutionFailureIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ExecutionFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130ExecutionFromModuleFailureIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ExecutionFromModuleFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130ExecutionFromModuleFailureIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ExecutionFromModuleFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130ExecutionFromModuleFailureIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ExecutionFromModuleFailureIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130ExecutionFromModuleSuccessIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ExecutionFromModuleSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130ExecutionFromModuleSuccessIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ExecutionFromModuleSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130ExecutionFromModuleSuccessIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ExecutionFromModuleSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130ExecutionSuccessIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ExecutionSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130ExecutionSuccessIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ExecutionSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130ExecutionSuccessIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130ExecutionSuccessIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterAddedOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterAddedOwner(opts)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var approvedHash [][32]byte
		fill_err = tp.Fill(&approvedHash)
		if fill_err != nil {
			return
		}
		var owner []common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterApproveHash(opts, approvedHash, owner)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterChangedFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterChangedFallbackHandler(opts)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterChangedGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterChangedGuard(opts)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterChangedThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterChangedThreshold(opts)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterDisabledModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterDisabledModule(opts)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterEnabledModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterEnabledModule(opts)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterExecutionFailure__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterExecutionFailure(opts)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterExecutionFromModuleFailure__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module []common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterExecutionFromModuleFailure(opts, module)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterExecutionFromModuleSuccess__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module []common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterExecutionFromModuleSuccess(opts, module)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterExecutionSuccess__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterExecutionSuccess(opts)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterRemovedOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterRemovedOwner(opts)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterSafeReceived__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var sender []common.Address
		fill_err = tp.Fill(&sender)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterSafeReceived(opts, sender)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterSafeSetup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var initiator []common.Address
		fill_err = tp.Fill(&initiator)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterSafeSetup(opts, initiator)
	})
}

func Fuzz_Nosy_SafeV130Filterer_FilterSignMsg__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var msgHash [][32]byte
		fill_err = tp.Fill(&msgHash)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.FilterSignMsg(opts, msgHash)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseAddedOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseAddedOwner(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseApproveHash(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseChangedFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseChangedFallbackHandler(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseChangedGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseChangedGuard(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseChangedThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseChangedThreshold(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseDisabledModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseDisabledModule(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseEnabledModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseEnabledModule(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseExecutionFailure__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseExecutionFailure(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseExecutionFromModuleFailure__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseExecutionFromModuleFailure(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseExecutionFromModuleSuccess__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseExecutionFromModuleSuccess(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseExecutionSuccess__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseExecutionSuccess(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseRemovedOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseRemovedOwner(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseSafeReceived__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseSafeReceived(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseSafeSetup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseSafeSetup(log)
	})
}

func Fuzz_Nosy_SafeV130Filterer_ParseSignMsg__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Filterer
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ParseSignMsg(log)
	})
}

// skipping Fuzz_Nosy_SafeV130Filterer_WatchAddedOwner__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130AddedOwner

// skipping Fuzz_Nosy_SafeV130Filterer_WatchApproveHash__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130ApproveHash

// skipping Fuzz_Nosy_SafeV130Filterer_WatchChangedFallbackHandler__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130ChangedFallbackHandler

// skipping Fuzz_Nosy_SafeV130Filterer_WatchChangedGuard__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130ChangedGuard

// skipping Fuzz_Nosy_SafeV130Filterer_WatchChangedThreshold__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130ChangedThreshold

// skipping Fuzz_Nosy_SafeV130Filterer_WatchDisabledModule__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130DisabledModule

// skipping Fuzz_Nosy_SafeV130Filterer_WatchEnabledModule__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130EnabledModule

// skipping Fuzz_Nosy_SafeV130Filterer_WatchExecutionFailure__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130ExecutionFailure

// skipping Fuzz_Nosy_SafeV130Filterer_WatchExecutionFromModuleFailure__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130ExecutionFromModuleFailure

// skipping Fuzz_Nosy_SafeV130Filterer_WatchExecutionFromModuleSuccess__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130ExecutionFromModuleSuccess

// skipping Fuzz_Nosy_SafeV130Filterer_WatchExecutionSuccess__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130ExecutionSuccess

// skipping Fuzz_Nosy_SafeV130Filterer_WatchRemovedOwner__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130RemovedOwner

// skipping Fuzz_Nosy_SafeV130Filterer_WatchSafeReceived__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130SafeReceived

// skipping Fuzz_Nosy_SafeV130Filterer_WatchSafeSetup__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130SafeSetup

// skipping Fuzz_Nosy_SafeV130Filterer_WatchSignMsg__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SafeV130SignMsg

// skipping Fuzz_Nosy_SafeV130Raw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_SafeV130Raw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SafeV130Raw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Raw
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.Transfer(opts)
	})
}

func Fuzz_Nosy_SafeV130RemovedOwnerIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130RemovedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130RemovedOwnerIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130RemovedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130RemovedOwnerIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130RemovedOwnerIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130SafeReceivedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130SafeReceivedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130SafeReceivedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130SafeReceivedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130SafeReceivedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130SafeReceivedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130SafeSetupIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130SafeSetupIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130SafeSetupIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130SafeSetupIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130SafeSetupIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130SafeSetupIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130Session_AddOwnerWithThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || _threshold == nil {
			return
		}

		_SafeV130.AddOwnerWithThreshold(owner, _threshold)
	})
}

func Fuzz_Nosy_SafeV130Session_ApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var hashToApprove [32]byte
		fill_err = tp.Fill(&hashToApprove)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ApproveHash(hashToApprove)
	})
}

func Fuzz_Nosy_SafeV130Session_ApprovedHashes__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 [32]byte
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ApprovedHashes(arg0, arg1)
	})
}

func Fuzz_Nosy_SafeV130Session_ChangeThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || _threshold == nil {
			return
		}

		_SafeV130.ChangeThreshold(_threshold)
	})
}

func Fuzz_Nosy_SafeV130Session_CheckNSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d3 []byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		var requiredSignatures *big.Int
		fill_err = tp.Fill(&requiredSignatures)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || requiredSignatures == nil {
			return
		}

		_SafeV130.CheckNSignatures(dataHash, d3, signatures, requiredSignatures)
	})
}

func Fuzz_Nosy_SafeV130Session_CheckSignatures__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var dataHash [32]byte
		fill_err = tp.Fill(&dataHash)
		if fill_err != nil {
			return
		}
		var d3 []byte
		fill_err = tp.Fill(&d3)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.CheckSignatures(dataHash, d3, signatures)
	})
}

func Fuzz_Nosy_SafeV130Session_DisableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var prevModule common.Address
		fill_err = tp.Fill(&prevModule)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.DisableModule(prevModule, module)
	})
}

func Fuzz_Nosy_SafeV130Session_DomainSeparator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.DomainSeparator()
	})
}

func Fuzz_Nosy_SafeV130Session_EnableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.EnableModule(module)
	})
}

func Fuzz_Nosy_SafeV130Session_EncodeTransactionData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_SafeV130.EncodeTransactionData(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeV130Session_ExecTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil {
			return
		}

		_SafeV130.ExecTransaction(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures)
	})
}

func Fuzz_Nosy_SafeV130Session_ExecTransactionFromModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || value == nil {
			return
		}

		_SafeV130.ExecTransactionFromModule(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeV130Session_ExecTransactionFromModuleReturnData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || value == nil {
			return
		}

		_SafeV130.ExecTransactionFromModuleReturnData(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeV130Session_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.Fallback(calldata)
	})
}

func Fuzz_Nosy_SafeV130Session_GetChainId__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.GetChainId()
	})
}

func Fuzz_Nosy_SafeV130Session_GetModulesPaginated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var start common.Address
		fill_err = tp.Fill(&start)
		if fill_err != nil {
			return
		}
		var pageSize *big.Int
		fill_err = tp.Fill(&pageSize)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || pageSize == nil {
			return
		}

		_SafeV130.GetModulesPaginated(start, pageSize)
	})
}

func Fuzz_Nosy_SafeV130Session_GetOwners__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.GetOwners()
	})
}

func Fuzz_Nosy_SafeV130Session_GetStorageAt__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var offset *big.Int
		fill_err = tp.Fill(&offset)
		if fill_err != nil {
			return
		}
		var length *big.Int
		fill_err = tp.Fill(&length)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || offset == nil || length == nil {
			return
		}

		_SafeV130.GetStorageAt(offset, length)
	})
}

func Fuzz_Nosy_SafeV130Session_GetThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.GetThreshold()
	})
}

func Fuzz_Nosy_SafeV130Session_GetTransactionHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var _nonce *big.Int
		fill_err = tp.Fill(&_nonce)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil || _nonce == nil {
			return
		}

		_SafeV130.GetTransactionHash(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
	})
}

func Fuzz_Nosy_SafeV130Session_IsModuleEnabled__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.IsModuleEnabled(module)
	})
}

func Fuzz_Nosy_SafeV130Session_IsOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.IsOwner(owner)
	})
}

func Fuzz_Nosy_SafeV130Session_Nonce__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.Nonce()
	})
}

func Fuzz_Nosy_SafeV130Session_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.Receive()
	})
}

func Fuzz_Nosy_SafeV130Session_RemoveOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || _threshold == nil {
			return
		}

		_SafeV130.RemoveOwner(prevOwner, owner, _threshold)
	})
}

func Fuzz_Nosy_SafeV130Session_RequiredTxGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || value == nil {
			return
		}

		_SafeV130.RequiredTxGas(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeV130Session_SetFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var handler common.Address
		fill_err = tp.Fill(&handler)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.SetFallbackHandler(handler)
	})
}

func Fuzz_Nosy_SafeV130Session_SetGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var guard common.Address
		fill_err = tp.Fill(&guard)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.SetGuard(guard)
	})
}

func Fuzz_Nosy_SafeV130Session_Setup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var _owners []common.Address
		fill_err = tp.Fill(&_owners)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var fallbackHandler common.Address
		fill_err = tp.Fill(&fallbackHandler)
		if fill_err != nil {
			return
		}
		var paymentToken common.Address
		fill_err = tp.Fill(&paymentToken)
		if fill_err != nil {
			return
		}
		var payment *big.Int
		fill_err = tp.Fill(&payment)
		if fill_err != nil {
			return
		}
		var paymentReceiver common.Address
		fill_err = tp.Fill(&paymentReceiver)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || _threshold == nil || payment == nil {
			return
		}

		_SafeV130.Setup(_owners, _threshold, to, d5, fallbackHandler, paymentToken, payment, paymentReceiver)
	})
}

func Fuzz_Nosy_SafeV130Session_SignedMessages__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var arg0 [32]byte
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.SignedMessages(arg0)
	})
}

func Fuzz_Nosy_SafeV130Session_SimulateAndRevert__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var targetContract common.Address
		fill_err = tp.Fill(&targetContract)
		if fill_err != nil {
			return
		}
		var calldataPayload []byte
		fill_err = tp.Fill(&calldataPayload)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.SimulateAndRevert(targetContract, calldataPayload)
	})
}

func Fuzz_Nosy_SafeV130Session_SwapOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var oldOwner common.Address
		fill_err = tp.Fill(&oldOwner)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.SwapOwner(prevOwner, oldOwner, newOwner)
	})
}

func Fuzz_Nosy_SafeV130Session_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Session
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.VERSION()
	})
}

func Fuzz_Nosy_SafeV130SignMsgIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130SignMsgIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SafeV130SignMsgIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130SignMsgIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SafeV130SignMsgIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SafeV130SignMsgIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SafeV130Transactor_AddOwnerWithThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil || _threshold == nil {
			return
		}

		_SafeV130.AddOwnerWithThreshold(opts, owner, _threshold)
	})
}

func Fuzz_Nosy_SafeV130Transactor_ApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var hashToApprove [32]byte
		fill_err = tp.Fill(&hashToApprove)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.ApproveHash(opts, hashToApprove)
	})
}

func Fuzz_Nosy_SafeV130Transactor_ChangeThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil || _threshold == nil {
			return
		}

		_SafeV130.ChangeThreshold(opts, _threshold)
	})
}

func Fuzz_Nosy_SafeV130Transactor_DisableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var prevModule common.Address
		fill_err = tp.Fill(&prevModule)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.DisableModule(opts, prevModule, module)
	})
}

func Fuzz_Nosy_SafeV130Transactor_EnableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.EnableModule(opts, module)
	})
}

func Fuzz_Nosy_SafeV130Transactor_ExecTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil {
			return
		}

		_SafeV130.ExecTransaction(opts, to, value, d5, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures)
	})
}

func Fuzz_Nosy_SafeV130Transactor_ExecTransactionFromModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil || value == nil {
			return
		}

		_SafeV130.ExecTransactionFromModule(opts, to, value, d5, operation)
	})
}

func Fuzz_Nosy_SafeV130Transactor_ExecTransactionFromModuleReturnData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil || value == nil {
			return
		}

		_SafeV130.ExecTransactionFromModuleReturnData(opts, to, value, d5, operation)
	})
}

func Fuzz_Nosy_SafeV130Transactor_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.Fallback(opts, calldata)
	})
}

func Fuzz_Nosy_SafeV130Transactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.Receive(opts)
	})
}

func Fuzz_Nosy_SafeV130Transactor_RemoveOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil || _threshold == nil {
			return
		}

		_SafeV130.RemoveOwner(opts, prevOwner, owner, _threshold)
	})
}

func Fuzz_Nosy_SafeV130Transactor_RequiredTxGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil || value == nil {
			return
		}

		_SafeV130.RequiredTxGas(opts, to, value, d5, operation)
	})
}

func Fuzz_Nosy_SafeV130Transactor_SetFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var handler common.Address
		fill_err = tp.Fill(&handler)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.SetFallbackHandler(opts, handler)
	})
}

func Fuzz_Nosy_SafeV130Transactor_SetGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var guard common.Address
		fill_err = tp.Fill(&guard)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.SetGuard(opts, guard)
	})
}

func Fuzz_Nosy_SafeV130Transactor_Setup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _owners []common.Address
		fill_err = tp.Fill(&_owners)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var d6 []byte
		fill_err = tp.Fill(&d6)
		if fill_err != nil {
			return
		}
		var fallbackHandler common.Address
		fill_err = tp.Fill(&fallbackHandler)
		if fill_err != nil {
			return
		}
		var paymentToken common.Address
		fill_err = tp.Fill(&paymentToken)
		if fill_err != nil {
			return
		}
		var payment *big.Int
		fill_err = tp.Fill(&payment)
		if fill_err != nil {
			return
		}
		var paymentReceiver common.Address
		fill_err = tp.Fill(&paymentReceiver)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil || _threshold == nil || payment == nil {
			return
		}

		_SafeV130.Setup(opts, _owners, _threshold, to, d6, fallbackHandler, paymentToken, payment, paymentReceiver)
	})
}

func Fuzz_Nosy_SafeV130Transactor_SimulateAndRevert__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var targetContract common.Address
		fill_err = tp.Fill(&targetContract)
		if fill_err != nil {
			return
		}
		var calldataPayload []byte
		fill_err = tp.Fill(&calldataPayload)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.SimulateAndRevert(opts, targetContract, calldataPayload)
	})
}

func Fuzz_Nosy_SafeV130Transactor_SwapOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130Transactor
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var oldOwner common.Address
		fill_err = tp.Fill(&oldOwner)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.SwapOwner(opts, prevOwner, oldOwner, newOwner)
	})
}

// skipping Fuzz_Nosy_SafeV130TransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SafeV130TransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorRaw
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || opts == nil {
			return
		}

		_SafeV130.Transfer(opts)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_AddOwnerWithThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || _threshold == nil {
			return
		}

		_SafeV130.AddOwnerWithThreshold(owner, _threshold)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_ApproveHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var hashToApprove [32]byte
		fill_err = tp.Fill(&hashToApprove)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.ApproveHash(hashToApprove)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_ChangeThreshold__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || _threshold == nil {
			return
		}

		_SafeV130.ChangeThreshold(_threshold)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_DisableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var prevModule common.Address
		fill_err = tp.Fill(&prevModule)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.DisableModule(prevModule, module)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_EnableModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var module common.Address
		fill_err = tp.Fill(&module)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.EnableModule(module)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_ExecTransaction__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		var safeTxGas *big.Int
		fill_err = tp.Fill(&safeTxGas)
		if fill_err != nil {
			return
		}
		var baseGas *big.Int
		fill_err = tp.Fill(&baseGas)
		if fill_err != nil {
			return
		}
		var gasPrice *big.Int
		fill_err = tp.Fill(&gasPrice)
		if fill_err != nil {
			return
		}
		var gasToken common.Address
		fill_err = tp.Fill(&gasToken)
		if fill_err != nil {
			return
		}
		var refundReceiver common.Address
		fill_err = tp.Fill(&refundReceiver)
		if fill_err != nil {
			return
		}
		var signatures []byte
		fill_err = tp.Fill(&signatures)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || value == nil || safeTxGas == nil || baseGas == nil || gasPrice == nil {
			return
		}

		_SafeV130.ExecTransaction(to, value, d4, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_ExecTransactionFromModule__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || value == nil {
			return
		}

		_SafeV130.ExecTransactionFromModule(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_ExecTransactionFromModuleReturnData__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || value == nil {
			return
		}

		_SafeV130.ExecTransactionFromModuleReturnData(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.Fallback(calldata)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.Receive()
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_RemoveOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var owner common.Address
		fill_err = tp.Fill(&owner)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || _threshold == nil {
			return
		}

		_SafeV130.RemoveOwner(prevOwner, owner, _threshold)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_RequiredTxGas__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var value *big.Int
		fill_err = tp.Fill(&value)
		if fill_err != nil {
			return
		}
		var d4 []byte
		fill_err = tp.Fill(&d4)
		if fill_err != nil {
			return
		}
		var operation uint8
		fill_err = tp.Fill(&operation)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || value == nil {
			return
		}

		_SafeV130.RequiredTxGas(to, value, d4, operation)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_SetFallbackHandler__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var handler common.Address
		fill_err = tp.Fill(&handler)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.SetFallbackHandler(handler)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_SetGuard__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var guard common.Address
		fill_err = tp.Fill(&guard)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.SetGuard(guard)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_Setup__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var _owners []common.Address
		fill_err = tp.Fill(&_owners)
		if fill_err != nil {
			return
		}
		var _threshold *big.Int
		fill_err = tp.Fill(&_threshold)
		if fill_err != nil {
			return
		}
		var to common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		var d5 []byte
		fill_err = tp.Fill(&d5)
		if fill_err != nil {
			return
		}
		var fallbackHandler common.Address
		fill_err = tp.Fill(&fallbackHandler)
		if fill_err != nil {
			return
		}
		var paymentToken common.Address
		fill_err = tp.Fill(&paymentToken)
		if fill_err != nil {
			return
		}
		var payment *big.Int
		fill_err = tp.Fill(&payment)
		if fill_err != nil {
			return
		}
		var paymentReceiver common.Address
		fill_err = tp.Fill(&paymentReceiver)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil || _threshold == nil || payment == nil {
			return
		}

		_SafeV130.Setup(_owners, _threshold, to, d5, fallbackHandler, paymentToken, payment, paymentReceiver)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_SimulateAndRevert__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var targetContract common.Address
		fill_err = tp.Fill(&targetContract)
		if fill_err != nil {
			return
		}
		var calldataPayload []byte
		fill_err = tp.Fill(&calldataPayload)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.SimulateAndRevert(targetContract, calldataPayload)
	})
}

func Fuzz_Nosy_SafeV130TransactorSession_SwapOwner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SafeV130 *SafeV130TransactorSession
		fill_err = tp.Fill(&_SafeV130)
		if fill_err != nil {
			return
		}
		var prevOwner common.Address
		fill_err = tp.Fill(&prevOwner)
		if fill_err != nil {
			return
		}
		var oldOwner common.Address
		fill_err = tp.Fill(&oldOwner)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _SafeV130 == nil {
			return
		}

		_SafeV130.SwapOwner(prevOwner, oldOwner, newOwner)
	})
}

func Fuzz_Nosy_SchemaRegistryCaller_GetSchema__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SchemaRegistry *SchemaRegistryCaller
		fill_err = tp.Fill(&_SchemaRegistry)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var uid [32]byte
		fill_err = tp.Fill(&uid)
		if fill_err != nil {
			return
		}
		if _SchemaRegistry == nil || opts == nil {
			return
		}

		_SchemaRegistry.GetSchema(opts, uid)
	})
}

func Fuzz_Nosy_SchemaRegistryCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SchemaRegistry *SchemaRegistryCaller
		fill_err = tp.Fill(&_SchemaRegistry)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SchemaRegistry == nil || opts == nil {
			return
		}

		_SchemaRegistry.Version(opts)
	})
}

// skipping Fuzz_Nosy_SchemaRegistryCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_SchemaRegistryCallerSession_GetSchema__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SchemaRegistry *SchemaRegistryCallerSession
		fill_err = tp.Fill(&_SchemaRegistry)
		if fill_err != nil {
			return
		}
		var uid [32]byte
		fill_err = tp.Fill(&uid)
		if fill_err != nil {
			return
		}
		if _SchemaRegistry == nil {
			return
		}

		_SchemaRegistry.GetSchema(uid)
	})
}

func Fuzz_Nosy_SchemaRegistryCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SchemaRegistry *SchemaRegistryCallerSession
		fill_err = tp.Fill(&_SchemaRegistry)
		if fill_err != nil {
			return
		}
		if _SchemaRegistry == nil {
			return
		}

		_SchemaRegistry.Version()
	})
}

func Fuzz_Nosy_SchemaRegistryFilterer_FilterRegistered__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SchemaRegistry *SchemaRegistryFilterer
		fill_err = tp.Fill(&_SchemaRegistry)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var uid [][32]byte
		fill_err = tp.Fill(&uid)
		if fill_err != nil {
			return
		}
		var registerer []common.Address
		fill_err = tp.Fill(&registerer)
		if fill_err != nil {
			return
		}
		if _SchemaRegistry == nil || opts == nil {
			return
		}

		_SchemaRegistry.FilterRegistered(opts, uid, registerer)
	})
}

func Fuzz_Nosy_SchemaRegistryFilterer_ParseRegistered__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SchemaRegistry *SchemaRegistryFilterer
		fill_err = tp.Fill(&_SchemaRegistry)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SchemaRegistry == nil {
			return
		}

		_SchemaRegistry.ParseRegistered(log)
	})
}

// skipping Fuzz_Nosy_SchemaRegistryFilterer_WatchRegistered__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SchemaRegistryRegistered

// skipping Fuzz_Nosy_SchemaRegistryRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_SchemaRegistryRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SchemaRegistryRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SchemaRegistry *SchemaRegistryRaw
		fill_err = tp.Fill(&_SchemaRegistry)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SchemaRegistry == nil || opts == nil {
			return
		}

		_SchemaRegistry.Transfer(opts)
	})
}

func Fuzz_Nosy_SchemaRegistryRegisteredIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SchemaRegistryRegisteredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SchemaRegistryRegisteredIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SchemaRegistryRegisteredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SchemaRegistryRegisteredIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SchemaRegistryRegisteredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SchemaRegistrySession_GetSchema__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SchemaRegistry *SchemaRegistrySession
		fill_err = tp.Fill(&_SchemaRegistry)
		if fill_err != nil {
			return
		}
		var uid [32]byte
		fill_err = tp.Fill(&uid)
		if fill_err != nil {
			return
		}
		if _SchemaRegistry == nil {
			return
		}

		_SchemaRegistry.GetSchema(uid)
	})
}

func Fuzz_Nosy_SchemaRegistrySession_Register__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SchemaRegistry *SchemaRegistrySession
		fill_err = tp.Fill(&_SchemaRegistry)
		if fill_err != nil {
			return
		}
		var schema string
		fill_err = tp.Fill(&schema)
		if fill_err != nil {
			return
		}
		var resolver common.Address
		fill_err = tp.Fill(&resolver)
		if fill_err != nil {
			return
		}
		var revocable bool
		fill_err = tp.Fill(&revocable)
		if fill_err != nil {
			return
		}
		if _SchemaRegistry == nil {
			return
		}

		_SchemaRegistry.Register(schema, resolver, revocable)
	})
}

func Fuzz_Nosy_SchemaRegistrySession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SchemaRegistry *SchemaRegistrySession
		fill_err = tp.Fill(&_SchemaRegistry)
		if fill_err != nil {
			return
		}
		if _SchemaRegistry == nil {
			return
		}

		_SchemaRegistry.Version()
	})
}

func Fuzz_Nosy_SchemaRegistryTransactor_Register__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SchemaRegistry *SchemaRegistryTransactor
		fill_err = tp.Fill(&_SchemaRegistry)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var schema string
		fill_err = tp.Fill(&schema)
		if fill_err != nil {
			return
		}
		var resolver common.Address
		fill_err = tp.Fill(&resolver)
		if fill_err != nil {
			return
		}
		var revocable bool
		fill_err = tp.Fill(&revocable)
		if fill_err != nil {
			return
		}
		if _SchemaRegistry == nil || opts == nil {
			return
		}

		_SchemaRegistry.Register(opts, schema, resolver, revocable)
	})
}

// skipping Fuzz_Nosy_SchemaRegistryTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SchemaRegistryTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SchemaRegistry *SchemaRegistryTransactorRaw
		fill_err = tp.Fill(&_SchemaRegistry)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SchemaRegistry == nil || opts == nil {
			return
		}

		_SchemaRegistry.Transfer(opts)
	})
}

func Fuzz_Nosy_SchemaRegistryTransactorSession_Register__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SchemaRegistry *SchemaRegistryTransactorSession
		fill_err = tp.Fill(&_SchemaRegistry)
		if fill_err != nil {
			return
		}
		var schema string
		fill_err = tp.Fill(&schema)
		if fill_err != nil {
			return
		}
		var resolver common.Address
		fill_err = tp.Fill(&resolver)
		if fill_err != nil {
			return
		}
		var revocable bool
		fill_err = tp.Fill(&revocable)
		if fill_err != nil {
			return
		}
		if _SchemaRegistry == nil {
			return
		}

		_SchemaRegistry.Register(schema, resolver, revocable)
	})
}

// skipping Fuzz_Nosy_SenderCreatorCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_SenderCreatorRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_SenderCreatorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SenderCreatorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SenderCreator *SenderCreatorRaw
		fill_err = tp.Fill(&_SenderCreator)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SenderCreator == nil || opts == nil {
			return
		}

		_SenderCreator.Transfer(opts)
	})
}

func Fuzz_Nosy_SenderCreatorSession_CreateSender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SenderCreator *SenderCreatorSession
		fill_err = tp.Fill(&_SenderCreator)
		if fill_err != nil {
			return
		}
		var initCode []byte
		fill_err = tp.Fill(&initCode)
		if fill_err != nil {
			return
		}
		if _SenderCreator == nil {
			return
		}

		_SenderCreator.CreateSender(initCode)
	})
}

func Fuzz_Nosy_SenderCreatorTransactor_CreateSender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SenderCreator *SenderCreatorTransactor
		fill_err = tp.Fill(&_SenderCreator)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var initCode []byte
		fill_err = tp.Fill(&initCode)
		if fill_err != nil {
			return
		}
		if _SenderCreator == nil || opts == nil {
			return
		}

		_SenderCreator.CreateSender(opts, initCode)
	})
}

// skipping Fuzz_Nosy_SenderCreatorTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SenderCreatorTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SenderCreator *SenderCreatorTransactorRaw
		fill_err = tp.Fill(&_SenderCreator)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SenderCreator == nil || opts == nil {
			return
		}

		_SenderCreator.Transfer(opts)
	})
}

func Fuzz_Nosy_SenderCreatorTransactorSession_CreateSender__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SenderCreator *SenderCreatorTransactorSession
		fill_err = tp.Fill(&_SenderCreator)
		if fill_err != nil {
			return
		}
		var initCode []byte
		fill_err = tp.Fill(&initCode)
		if fill_err != nil {
			return
		}
		if _SenderCreator == nil {
			return
		}

		_SenderCreator.CreateSender(initCode)
	})
}

func Fuzz_Nosy_SequencerFeeVaultCaller_L1FeeWallet__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultCaller
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil || opts == nil {
			return
		}

		_SequencerFeeVault.L1FeeWallet(opts)
	})
}

func Fuzz_Nosy_SequencerFeeVaultCaller_MINWITHDRAWALAMOUNT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultCaller
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil || opts == nil {
			return
		}

		_SequencerFeeVault.MINWITHDRAWALAMOUNT(opts)
	})
}

func Fuzz_Nosy_SequencerFeeVaultCaller_RECIPIENT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultCaller
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil || opts == nil {
			return
		}

		_SequencerFeeVault.RECIPIENT(opts)
	})
}

func Fuzz_Nosy_SequencerFeeVaultCaller_TotalProcessed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultCaller
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil || opts == nil {
			return
		}

		_SequencerFeeVault.TotalProcessed(opts)
	})
}

func Fuzz_Nosy_SequencerFeeVaultCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultCaller
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil || opts == nil {
			return
		}

		_SequencerFeeVault.Version(opts)
	})
}

func Fuzz_Nosy_SequencerFeeVaultCaller_WITHDRAWALNETWORK__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultCaller
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil || opts == nil {
			return
		}

		_SequencerFeeVault.WITHDRAWALNETWORK(opts)
	})
}

// skipping Fuzz_Nosy_SequencerFeeVaultCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_SequencerFeeVaultCallerSession_L1FeeWallet__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultCallerSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.L1FeeWallet()
	})
}

func Fuzz_Nosy_SequencerFeeVaultCallerSession_MINWITHDRAWALAMOUNT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultCallerSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.MINWITHDRAWALAMOUNT()
	})
}

func Fuzz_Nosy_SequencerFeeVaultCallerSession_RECIPIENT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultCallerSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.RECIPIENT()
	})
}

func Fuzz_Nosy_SequencerFeeVaultCallerSession_TotalProcessed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultCallerSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.TotalProcessed()
	})
}

func Fuzz_Nosy_SequencerFeeVaultCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultCallerSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.Version()
	})
}

func Fuzz_Nosy_SequencerFeeVaultCallerSession_WITHDRAWALNETWORK__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultCallerSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.WITHDRAWALNETWORK()
	})
}

func Fuzz_Nosy_SequencerFeeVaultFilterer_FilterWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultFilterer
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil || opts == nil {
			return
		}

		_SequencerFeeVault.FilterWithdrawal(opts)
	})
}

func Fuzz_Nosy_SequencerFeeVaultFilterer_FilterWithdrawal0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultFilterer
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil || opts == nil {
			return
		}

		_SequencerFeeVault.FilterWithdrawal0(opts)
	})
}

func Fuzz_Nosy_SequencerFeeVaultFilterer_ParseWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultFilterer
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.ParseWithdrawal(log)
	})
}

func Fuzz_Nosy_SequencerFeeVaultFilterer_ParseWithdrawal0__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultFilterer
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.ParseWithdrawal0(log)
	})
}

// skipping Fuzz_Nosy_SequencerFeeVaultFilterer_WatchWithdrawal__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SequencerFeeVaultWithdrawal

// skipping Fuzz_Nosy_SequencerFeeVaultFilterer_WatchWithdrawal0__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SequencerFeeVaultWithdrawal0

// skipping Fuzz_Nosy_SequencerFeeVaultRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_SequencerFeeVaultRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SequencerFeeVaultRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultRaw
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil || opts == nil {
			return
		}

		_SequencerFeeVault.Transfer(opts)
	})
}

func Fuzz_Nosy_SequencerFeeVaultSession_L1FeeWallet__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.L1FeeWallet()
	})
}

func Fuzz_Nosy_SequencerFeeVaultSession_MINWITHDRAWALAMOUNT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.MINWITHDRAWALAMOUNT()
	})
}

func Fuzz_Nosy_SequencerFeeVaultSession_RECIPIENT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.RECIPIENT()
	})
}

func Fuzz_Nosy_SequencerFeeVaultSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.Receive()
	})
}

func Fuzz_Nosy_SequencerFeeVaultSession_TotalProcessed__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.TotalProcessed()
	})
}

func Fuzz_Nosy_SequencerFeeVaultSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.Version()
	})
}

func Fuzz_Nosy_SequencerFeeVaultSession_WITHDRAWALNETWORK__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.WITHDRAWALNETWORK()
	})
}

func Fuzz_Nosy_SequencerFeeVaultSession_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.Withdraw()
	})
}

func Fuzz_Nosy_SequencerFeeVaultTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultTransactor
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil || opts == nil {
			return
		}

		_SequencerFeeVault.Receive(opts)
	})
}

func Fuzz_Nosy_SequencerFeeVaultTransactor_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultTransactor
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil || opts == nil {
			return
		}

		_SequencerFeeVault.Withdraw(opts)
	})
}

// skipping Fuzz_Nosy_SequencerFeeVaultTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SequencerFeeVaultTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultTransactorRaw
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil || opts == nil {
			return
		}

		_SequencerFeeVault.Transfer(opts)
	})
}

func Fuzz_Nosy_SequencerFeeVaultTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultTransactorSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.Receive()
	})
}

func Fuzz_Nosy_SequencerFeeVaultTransactorSession_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SequencerFeeVault *SequencerFeeVaultTransactorSession
		fill_err = tp.Fill(&_SequencerFeeVault)
		if fill_err != nil {
			return
		}
		if _SequencerFeeVault == nil {
			return
		}

		_SequencerFeeVault.Withdraw()
	})
}

func Fuzz_Nosy_SequencerFeeVaultWithdrawal0Iterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SequencerFeeVaultWithdrawal0Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SequencerFeeVaultWithdrawal0Iterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SequencerFeeVaultWithdrawal0Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SequencerFeeVaultWithdrawal0Iterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SequencerFeeVaultWithdrawal0Iterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SequencerFeeVaultWithdrawalIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SequencerFeeVaultWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SequencerFeeVaultWithdrawalIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SequencerFeeVaultWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SequencerFeeVaultWithdrawalIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SequencerFeeVaultWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_StandardBridgeCaller_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeCaller
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.Deposits(opts, arg0, arg1)
	})
}

func Fuzz_Nosy_StandardBridgeCaller_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeCaller
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.MESSENGER(opts)
	})
}

func Fuzz_Nosy_StandardBridgeCaller_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeCaller
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.Messenger(opts)
	})
}

func Fuzz_Nosy_StandardBridgeCaller_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeCaller
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.OTHERBRIDGE(opts)
	})
}

func Fuzz_Nosy_StandardBridgeCaller_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeCaller
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.OtherBridge(opts)
	})
}

func Fuzz_Nosy_StandardBridgeCaller_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeCaller
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.Paused(opts)
	})
}

// skipping Fuzz_Nosy_StandardBridgeCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_StandardBridgeCallerSession_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeCallerSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.Deposits(arg0, arg1)
	})
}

func Fuzz_Nosy_StandardBridgeCallerSession_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeCallerSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.MESSENGER()
	})
}

func Fuzz_Nosy_StandardBridgeCallerSession_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeCallerSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.Messenger()
	})
}

func Fuzz_Nosy_StandardBridgeCallerSession_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeCallerSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.OTHERBRIDGE()
	})
}

func Fuzz_Nosy_StandardBridgeCallerSession_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeCallerSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.OtherBridge()
	})
}

func Fuzz_Nosy_StandardBridgeCallerSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeCallerSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.Paused()
	})
}

func Fuzz_Nosy_StandardBridgeERC20BridgeFinalizedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeERC20BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_StandardBridgeERC20BridgeFinalizedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeERC20BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_StandardBridgeERC20BridgeFinalizedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeERC20BridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_StandardBridgeERC20BridgeInitiatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeERC20BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_StandardBridgeERC20BridgeInitiatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeERC20BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_StandardBridgeERC20BridgeInitiatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeERC20BridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_StandardBridgeETHBridgeFinalizedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeETHBridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_StandardBridgeETHBridgeFinalizedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeETHBridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_StandardBridgeETHBridgeFinalizedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeETHBridgeFinalizedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_StandardBridgeETHBridgeInitiatedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeETHBridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_StandardBridgeETHBridgeInitiatedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeETHBridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_StandardBridgeETHBridgeInitiatedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeETHBridgeInitiatedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_StandardBridgeFilterer_FilterERC20BridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeFilterer
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var localToken []common.Address
		fill_err = tp.Fill(&localToken)
		if fill_err != nil {
			return
		}
		var remoteToken []common.Address
		fill_err = tp.Fill(&remoteToken)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.FilterERC20BridgeFinalized(opts, localToken, remoteToken, from)
	})
}

func Fuzz_Nosy_StandardBridgeFilterer_FilterERC20BridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeFilterer
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var localToken []common.Address
		fill_err = tp.Fill(&localToken)
		if fill_err != nil {
			return
		}
		var remoteToken []common.Address
		fill_err = tp.Fill(&remoteToken)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.FilterERC20BridgeInitiated(opts, localToken, remoteToken, from)
	})
}

func Fuzz_Nosy_StandardBridgeFilterer_FilterETHBridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeFilterer
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to []common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.FilterETHBridgeFinalized(opts, from, to)
	})
}

func Fuzz_Nosy_StandardBridgeFilterer_FilterETHBridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeFilterer
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var from []common.Address
		fill_err = tp.Fill(&from)
		if fill_err != nil {
			return
		}
		var to []common.Address
		fill_err = tp.Fill(&to)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.FilterETHBridgeInitiated(opts, from, to)
	})
}

func Fuzz_Nosy_StandardBridgeFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeFilterer
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_StandardBridgeFilterer_ParseERC20BridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeFilterer
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.ParseERC20BridgeFinalized(log)
	})
}

func Fuzz_Nosy_StandardBridgeFilterer_ParseERC20BridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeFilterer
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.ParseERC20BridgeInitiated(log)
	})
}

func Fuzz_Nosy_StandardBridgeFilterer_ParseETHBridgeFinalized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeFilterer
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.ParseETHBridgeFinalized(log)
	})
}

func Fuzz_Nosy_StandardBridgeFilterer_ParseETHBridgeInitiated__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeFilterer
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.ParseETHBridgeInitiated(log)
	})
}

func Fuzz_Nosy_StandardBridgeFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeFilterer
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.ParseInitialized(log)
	})
}

// skipping Fuzz_Nosy_StandardBridgeFilterer_WatchERC20BridgeFinalized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.StandardBridgeERC20BridgeFinalized

// skipping Fuzz_Nosy_StandardBridgeFilterer_WatchERC20BridgeInitiated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.StandardBridgeERC20BridgeInitiated

// skipping Fuzz_Nosy_StandardBridgeFilterer_WatchETHBridgeFinalized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.StandardBridgeETHBridgeFinalized

// skipping Fuzz_Nosy_StandardBridgeFilterer_WatchETHBridgeInitiated__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.StandardBridgeETHBridgeInitiated

// skipping Fuzz_Nosy_StandardBridgeFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.StandardBridgeInitialized

func Fuzz_Nosy_StandardBridgeInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_StandardBridgeInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_StandardBridgeInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *StandardBridgeInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_StandardBridgeRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_StandardBridgeRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_StandardBridgeRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeRaw
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.Transfer(opts)
	})
}

func Fuzz_Nosy_StandardBridgeSession_BridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || _amount == nil {
			return
		}

		_StandardBridge.BridgeERC20(_localToken, _remoteToken, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeSession_BridgeERC20To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || _amount == nil {
			return
		}

		_StandardBridge.BridgeERC20To(_localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeSession_BridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.BridgeETH(_minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeSession_BridgeETHTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.BridgeETHTo(_to, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeSession_Deposits__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.Deposits(arg0, arg1)
	})
}

func Fuzz_Nosy_StandardBridgeSession_FinalizeBridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || _amount == nil {
			return
		}

		_StandardBridge.FinalizeBridgeERC20(_localToken, _remoteToken, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeSession_FinalizeBridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || _amount == nil {
			return
		}

		_StandardBridge.FinalizeBridgeETH(_from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeSession_MESSENGER__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.MESSENGER()
	})
}

func Fuzz_Nosy_StandardBridgeSession_Messenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.Messenger()
	})
}

func Fuzz_Nosy_StandardBridgeSession_OTHERBRIDGE__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.OTHERBRIDGE()
	})
}

func Fuzz_Nosy_StandardBridgeSession_OtherBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.OtherBridge()
	})
}

func Fuzz_Nosy_StandardBridgeSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.Paused()
	})
}

func Fuzz_Nosy_StandardBridgeSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.Receive()
	})
}

func Fuzz_Nosy_StandardBridgeTransactor_BridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactor
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_StandardBridge.BridgeERC20(opts, _localToken, _remoteToken, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeTransactor_BridgeERC20To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactor
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_StandardBridge.BridgeERC20To(opts, _localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeTransactor_BridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactor
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.BridgeETH(opts, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeTransactor_BridgeETHTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactor
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.BridgeETHTo(opts, _to, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeTransactor_FinalizeBridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactor
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_StandardBridge.FinalizeBridgeERC20(opts, _localToken, _remoteToken, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeTransactor_FinalizeBridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactor
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil || _amount == nil {
			return
		}

		_StandardBridge.FinalizeBridgeETH(opts, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactor
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.Receive(opts)
	})
}

// skipping Fuzz_Nosy_StandardBridgeTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_StandardBridgeTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactorRaw
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || opts == nil {
			return
		}

		_StandardBridge.Transfer(opts)
	})
}

func Fuzz_Nosy_StandardBridgeTransactorSession_BridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactorSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || _amount == nil {
			return
		}

		_StandardBridge.BridgeERC20(_localToken, _remoteToken, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeTransactorSession_BridgeERC20To__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactorSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || _amount == nil {
			return
		}

		_StandardBridge.BridgeERC20To(_localToken, _remoteToken, _to, _amount, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeTransactorSession_BridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactorSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.BridgeETH(_minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeTransactorSession_BridgeETHTo__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactorSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _minGasLimit uint32
		fill_err = tp.Fill(&_minGasLimit)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.BridgeETHTo(_to, _minGasLimit, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeTransactorSession_FinalizeBridgeERC20__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactorSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var _localToken common.Address
		fill_err = tp.Fill(&_localToken)
		if fill_err != nil {
			return
		}
		var _remoteToken common.Address
		fill_err = tp.Fill(&_remoteToken)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || _amount == nil {
			return
		}

		_StandardBridge.FinalizeBridgeERC20(_localToken, _remoteToken, _from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeTransactorSession_FinalizeBridgeETH__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactorSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		var _from common.Address
		fill_err = tp.Fill(&_from)
		if fill_err != nil {
			return
		}
		var _to common.Address
		fill_err = tp.Fill(&_to)
		if fill_err != nil {
			return
		}
		var _amount *big.Int
		fill_err = tp.Fill(&_amount)
		if fill_err != nil {
			return
		}
		var _extraData []byte
		fill_err = tp.Fill(&_extraData)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil || _amount == nil {
			return
		}

		_StandardBridge.FinalizeBridgeETH(_from, _to, _amount, _extraData)
	})
}

func Fuzz_Nosy_StandardBridgeTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StandardBridge *StandardBridgeTransactorSession
		fill_err = tp.Fill(&_StandardBridge)
		if fill_err != nil {
			return
		}
		if _StandardBridge == nil {
			return
		}

		_StandardBridge.Receive()
	})
}

func Fuzz_Nosy_StorageSetterCaller_GetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterCaller
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || opts == nil {
			return
		}

		_StorageSetter.GetAddress(opts, _slot)
	})
}

func Fuzz_Nosy_StorageSetterCaller_GetBool__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterCaller
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || opts == nil {
			return
		}

		_StorageSetter.GetBool(opts, _slot)
	})
}

func Fuzz_Nosy_StorageSetterCaller_GetBytes32__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterCaller
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || opts == nil {
			return
		}

		_StorageSetter.GetBytes32(opts, _slot)
	})
}

func Fuzz_Nosy_StorageSetterCaller_GetUint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterCaller
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || opts == nil {
			return
		}

		_StorageSetter.GetUint(opts, _slot)
	})
}

func Fuzz_Nosy_StorageSetterCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterCaller
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || opts == nil {
			return
		}

		_StorageSetter.Version(opts)
	})
}

// skipping Fuzz_Nosy_StorageSetterCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_StorageSetterCallerSession_GetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterCallerSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.GetAddress(_slot)
	})
}

func Fuzz_Nosy_StorageSetterCallerSession_GetBool__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterCallerSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.GetBool(_slot)
	})
}

func Fuzz_Nosy_StorageSetterCallerSession_GetBytes32__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterCallerSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.GetBytes32(_slot)
	})
}

func Fuzz_Nosy_StorageSetterCallerSession_GetUint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterCallerSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.GetUint(_slot)
	})
}

func Fuzz_Nosy_StorageSetterCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterCallerSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.Version()
	})
}

// skipping Fuzz_Nosy_StorageSetterRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_StorageSetterRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_StorageSetterRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterRaw
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || opts == nil {
			return
		}

		_StorageSetter.Transfer(opts)
	})
}

func Fuzz_Nosy_StorageSetterSession_GetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.GetAddress(_slot)
	})
}

func Fuzz_Nosy_StorageSetterSession_GetBool__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.GetBool(_slot)
	})
}

func Fuzz_Nosy_StorageSetterSession_GetBytes32__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.GetBytes32(_slot)
	})
}

func Fuzz_Nosy_StorageSetterSession_GetUint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.GetUint(_slot)
	})
}

func Fuzz_Nosy_StorageSetterSession_SetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.SetAddress(_slot, _address)
	})
}

func Fuzz_Nosy_StorageSetterSession_SetBool__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		var _value bool
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.SetBool(_slot, _value)
	})
}

func Fuzz_Nosy_StorageSetterSession_SetBytes32__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var slots []StorageSetterSlot
		fill_err = tp.Fill(&slots)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.SetBytes32(slots)
	})
}

func Fuzz_Nosy_StorageSetterSession_SetBytes320__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		var _value [32]byte
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.SetBytes320(_slot, _value)
	})
}

func Fuzz_Nosy_StorageSetterSession_SetUint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || _value == nil {
			return
		}

		_StorageSetter.SetUint(_slot, _value)
	})
}

func Fuzz_Nosy_StorageSetterSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.Version()
	})
}

func Fuzz_Nosy_StorageSetterTransactor_SetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterTransactor
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || opts == nil {
			return
		}

		_StorageSetter.SetAddress(opts, _slot, _address)
	})
}

func Fuzz_Nosy_StorageSetterTransactor_SetBool__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterTransactor
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		var _value bool
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || opts == nil {
			return
		}

		_StorageSetter.SetBool(opts, _slot, _value)
	})
}

func Fuzz_Nosy_StorageSetterTransactor_SetBytes32__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterTransactor
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var slots []StorageSetterSlot
		fill_err = tp.Fill(&slots)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || opts == nil {
			return
		}

		_StorageSetter.SetBytes32(opts, slots)
	})
}

func Fuzz_Nosy_StorageSetterTransactor_SetBytes320__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterTransactor
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		var _value [32]byte
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || opts == nil {
			return
		}

		_StorageSetter.SetBytes320(opts, _slot, _value)
	})
}

func Fuzz_Nosy_StorageSetterTransactor_SetUint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterTransactor
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || opts == nil || _value == nil {
			return
		}

		_StorageSetter.SetUint(opts, _slot, _value)
	})
}

// skipping Fuzz_Nosy_StorageSetterTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_StorageSetterTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterTransactorRaw
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || opts == nil {
			return
		}

		_StorageSetter.Transfer(opts)
	})
}

func Fuzz_Nosy_StorageSetterTransactorSession_SetAddress__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterTransactorSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		var _address common.Address
		fill_err = tp.Fill(&_address)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.SetAddress(_slot, _address)
	})
}

func Fuzz_Nosy_StorageSetterTransactorSession_SetBool__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterTransactorSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		var _value bool
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.SetBool(_slot, _value)
	})
}

func Fuzz_Nosy_StorageSetterTransactorSession_SetBytes32__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterTransactorSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var slots []StorageSetterSlot
		fill_err = tp.Fill(&slots)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.SetBytes32(slots)
	})
}

func Fuzz_Nosy_StorageSetterTransactorSession_SetBytes320__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterTransactorSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		var _value [32]byte
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil {
			return
		}

		_StorageSetter.SetBytes320(_slot, _value)
	})
}

func Fuzz_Nosy_StorageSetterTransactorSession_SetUint__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _StorageSetter *StorageSetterTransactorSession
		fill_err = tp.Fill(&_StorageSetter)
		if fill_err != nil {
			return
		}
		var _slot [32]byte
		fill_err = tp.Fill(&_slot)
		if fill_err != nil {
			return
		}
		var _value *big.Int
		fill_err = tp.Fill(&_value)
		if fill_err != nil {
			return
		}
		if _StorageSetter == nil || _value == nil {
			return
		}

		_StorageSetter.SetUint(_slot, _value)
	})
}

func Fuzz_Nosy_SuperchainConfigCaller_GUARDIANSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigCaller
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.GUARDIANSLOT(opts)
	})
}

func Fuzz_Nosy_SuperchainConfigCaller_Guardian__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigCaller
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.Guardian(opts)
	})
}

func Fuzz_Nosy_SuperchainConfigCaller_PAUSEDSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigCaller
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.PAUSEDSLOT(opts)
	})
}

func Fuzz_Nosy_SuperchainConfigCaller_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigCaller
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.Paused(opts)
	})
}

func Fuzz_Nosy_SuperchainConfigCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigCaller
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.Version(opts)
	})
}

// skipping Fuzz_Nosy_SuperchainConfigCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_SuperchainConfigCallerSession_GUARDIANSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigCallerSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.GUARDIANSLOT()
	})
}

func Fuzz_Nosy_SuperchainConfigCallerSession_Guardian__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigCallerSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.Guardian()
	})
}

func Fuzz_Nosy_SuperchainConfigCallerSession_PAUSEDSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigCallerSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.PAUSEDSLOT()
	})
}

func Fuzz_Nosy_SuperchainConfigCallerSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigCallerSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.Paused()
	})
}

func Fuzz_Nosy_SuperchainConfigCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigCallerSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.Version()
	})
}

func Fuzz_Nosy_SuperchainConfigConfigUpdateIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SuperchainConfigConfigUpdateIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SuperchainConfigConfigUpdateIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SuperchainConfigConfigUpdateIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SuperchainConfigConfigUpdateIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SuperchainConfigConfigUpdateIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SuperchainConfigFilterer_FilterConfigUpdate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigFilterer
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var updateType []uint8
		fill_err = tp.Fill(&updateType)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.FilterConfigUpdate(opts, updateType)
	})
}

func Fuzz_Nosy_SuperchainConfigFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigFilterer
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_SuperchainConfigFilterer_FilterPaused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigFilterer
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.FilterPaused(opts)
	})
}

func Fuzz_Nosy_SuperchainConfigFilterer_FilterUnpaused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigFilterer
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.FilterUnpaused(opts)
	})
}

func Fuzz_Nosy_SuperchainConfigFilterer_ParseConfigUpdate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigFilterer
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.ParseConfigUpdate(log)
	})
}

func Fuzz_Nosy_SuperchainConfigFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigFilterer
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.ParseInitialized(log)
	})
}

func Fuzz_Nosy_SuperchainConfigFilterer_ParsePaused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigFilterer
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.ParsePaused(log)
	})
}

func Fuzz_Nosy_SuperchainConfigFilterer_ParseUnpaused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigFilterer
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.ParseUnpaused(log)
	})
}

// skipping Fuzz_Nosy_SuperchainConfigFilterer_WatchConfigUpdate__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SuperchainConfigConfigUpdate

// skipping Fuzz_Nosy_SuperchainConfigFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SuperchainConfigInitialized

// skipping Fuzz_Nosy_SuperchainConfigFilterer_WatchPaused__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SuperchainConfigPaused

// skipping Fuzz_Nosy_SuperchainConfigFilterer_WatchUnpaused__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SuperchainConfigUnpaused

func Fuzz_Nosy_SuperchainConfigInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SuperchainConfigInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SuperchainConfigInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SuperchainConfigInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SuperchainConfigInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SuperchainConfigInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SuperchainConfigPausedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SuperchainConfigPausedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SuperchainConfigPausedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SuperchainConfigPausedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SuperchainConfigPausedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SuperchainConfigPausedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_SuperchainConfigRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_SuperchainConfigRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SuperchainConfigRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigRaw
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.Transfer(opts)
	})
}

func Fuzz_Nosy_SuperchainConfigSession_GUARDIANSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.GUARDIANSLOT()
	})
}

func Fuzz_Nosy_SuperchainConfigSession_Guardian__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.Guardian()
	})
}

func Fuzz_Nosy_SuperchainConfigSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var _guardian common.Address
		fill_err = tp.Fill(&_guardian)
		if fill_err != nil {
			return
		}
		var _paused bool
		fill_err = tp.Fill(&_paused)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.Initialize(_guardian, _paused)
	})
}

func Fuzz_Nosy_SuperchainConfigSession_PAUSEDSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.PAUSEDSLOT()
	})
}

func Fuzz_Nosy_SuperchainConfigSession_Pause__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var _identifier string
		fill_err = tp.Fill(&_identifier)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.Pause(_identifier)
	})
}

func Fuzz_Nosy_SuperchainConfigSession_Paused__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.Paused()
	})
}

func Fuzz_Nosy_SuperchainConfigSession_Unpause__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.Unpause()
	})
}

func Fuzz_Nosy_SuperchainConfigSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.Version()
	})
}

func Fuzz_Nosy_SuperchainConfigTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigTransactor
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _guardian common.Address
		fill_err = tp.Fill(&_guardian)
		if fill_err != nil {
			return
		}
		var _paused bool
		fill_err = tp.Fill(&_paused)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.Initialize(opts, _guardian, _paused)
	})
}

func Fuzz_Nosy_SuperchainConfigTransactor_Pause__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigTransactor
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _identifier string
		fill_err = tp.Fill(&_identifier)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.Pause(opts, _identifier)
	})
}

func Fuzz_Nosy_SuperchainConfigTransactor_Unpause__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigTransactor
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.Unpause(opts)
	})
}

// skipping Fuzz_Nosy_SuperchainConfigTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SuperchainConfigTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigTransactorRaw
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil || opts == nil {
			return
		}

		_SuperchainConfig.Transfer(opts)
	})
}

func Fuzz_Nosy_SuperchainConfigTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigTransactorSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var _guardian common.Address
		fill_err = tp.Fill(&_guardian)
		if fill_err != nil {
			return
		}
		var _paused bool
		fill_err = tp.Fill(&_paused)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.Initialize(_guardian, _paused)
	})
}

func Fuzz_Nosy_SuperchainConfigTransactorSession_Pause__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigTransactorSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		var _identifier string
		fill_err = tp.Fill(&_identifier)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.Pause(_identifier)
	})
}

func Fuzz_Nosy_SuperchainConfigTransactorSession_Unpause__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SuperchainConfig *SuperchainConfigTransactorSession
		fill_err = tp.Fill(&_SuperchainConfig)
		if fill_err != nil {
			return
		}
		if _SuperchainConfig == nil {
			return
		}

		_SuperchainConfig.Unpause()
	})
}

func Fuzz_Nosy_SuperchainConfigUnpausedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SuperchainConfigUnpausedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SuperchainConfigUnpausedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SuperchainConfigUnpausedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SuperchainConfigUnpausedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SuperchainConfigUnpausedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SystemConfigCaller_BATCHINBOXSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.BATCHINBOXSLOT(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_BasefeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.BasefeeScalar(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_BatchInbox__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.BatchInbox(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_BatcherHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.BatcherHash(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_BlobbasefeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.BlobbasefeeScalar(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_DISPUTEGAMEFACTORYSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.DISPUTEGAMEFACTORYSLOT(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_DisputeGameFactory__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.DisputeGameFactory(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_Eip1559Denominator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.Eip1559Denominator(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_Eip1559Elasticity__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.Eip1559Elasticity(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_GasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.GasLimit(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_GasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.GasPayingToken(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_GasPayingTokenName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.GasPayingTokenName(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_GasPayingTokenSymbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.GasPayingTokenSymbol(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_IsCustomGasToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.IsCustomGasToken(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_L1CROSSDOMAINMESSENGERSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.L1CROSSDOMAINMESSENGERSLOT(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_L1CrossDomainMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.L1CrossDomainMessenger(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_L1ERC721BRIDGESLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.L1ERC721BRIDGESLOT(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_L1ERC721Bridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.L1ERC721Bridge(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_L1STANDARDBRIDGESLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.L1STANDARDBRIDGESLOT(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_L1StandardBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.L1StandardBridge(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_MaximumGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.MaximumGasLimit(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_MinimumGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.MinimumGasLimit(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_OPTIMISMMINTABLEERC20FACTORYSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.OPTIMISMMINTABLEERC20FACTORYSLOT(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_OPTIMISMPORTALSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.OPTIMISMPORTALSLOT(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_OptimismMintableERC20Factory__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.OptimismMintableERC20Factory(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_OptimismPortal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.OptimismPortal(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_Overhead__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.Overhead(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.Owner(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_ResourceConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.ResourceConfig(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_STARTBLOCKSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.STARTBLOCKSLOT(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_Scalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.Scalar(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_StartBlock__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.StartBlock(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_UNSAFEBLOCKSIGNERSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.UNSAFEBLOCKSIGNERSLOT(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_UnsafeBlockSigner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.UnsafeBlockSigner(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.VERSION(opts)
	})
}

func Fuzz_Nosy_SystemConfigCaller_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCaller
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.Version(opts)
	})
}

// skipping Fuzz_Nosy_SystemConfigCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_SystemConfigCallerSession_BATCHINBOXSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.BATCHINBOXSLOT()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_BasefeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.BasefeeScalar()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_BatchInbox__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.BatchInbox()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_BatcherHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.BatcherHash()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_BlobbasefeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.BlobbasefeeScalar()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_DISPUTEGAMEFACTORYSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.DISPUTEGAMEFACTORYSLOT()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_DisputeGameFactory__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.DisputeGameFactory()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_Eip1559Denominator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Eip1559Denominator()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_Eip1559Elasticity__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Eip1559Elasticity()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_GasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.GasLimit()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_GasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.GasPayingToken()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_GasPayingTokenName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.GasPayingTokenName()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_GasPayingTokenSymbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.GasPayingTokenSymbol()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_IsCustomGasToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.IsCustomGasToken()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_L1CROSSDOMAINMESSENGERSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.L1CROSSDOMAINMESSENGERSLOT()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_L1CrossDomainMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.L1CrossDomainMessenger()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_L1ERC721BRIDGESLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.L1ERC721BRIDGESLOT()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_L1ERC721Bridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.L1ERC721Bridge()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_L1STANDARDBRIDGESLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.L1STANDARDBRIDGESLOT()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_L1StandardBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.L1StandardBridge()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_MaximumGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.MaximumGasLimit()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_MinimumGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.MinimumGasLimit()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_OPTIMISMMINTABLEERC20FACTORYSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.OPTIMISMMINTABLEERC20FACTORYSLOT()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_OPTIMISMPORTALSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.OPTIMISMPORTALSLOT()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_OptimismMintableERC20Factory__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.OptimismMintableERC20Factory()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_OptimismPortal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.OptimismPortal()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_Overhead__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Overhead()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Owner()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_ResourceConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.ResourceConfig()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_STARTBLOCKSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.STARTBLOCKSLOT()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_Scalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Scalar()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_StartBlock__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.StartBlock()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_UNSAFEBLOCKSIGNERSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.UNSAFEBLOCKSIGNERSLOT()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_UnsafeBlockSigner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.UnsafeBlockSigner()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.VERSION()
	})
}

func Fuzz_Nosy_SystemConfigCallerSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigCallerSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Version()
	})
}

func Fuzz_Nosy_SystemConfigConfigUpdateIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SystemConfigConfigUpdateIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SystemConfigConfigUpdateIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SystemConfigConfigUpdateIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SystemConfigConfigUpdateIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SystemConfigConfigUpdateIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SystemConfigFilterer_FilterConfigUpdate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigFilterer
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var version []*big.Int
		fill_err = tp.Fill(&version)
		if fill_err != nil {
			return
		}
		var updateType []uint8
		fill_err = tp.Fill(&updateType)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.FilterConfigUpdate(opts, version, updateType)
	})
}

func Fuzz_Nosy_SystemConfigFilterer_FilterInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigFilterer
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.FilterInitialized(opts)
	})
}

func Fuzz_Nosy_SystemConfigFilterer_FilterOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigFilterer
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var previousOwner []common.Address
		fill_err = tp.Fill(&previousOwner)
		if fill_err != nil {
			return
		}
		var newOwner []common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.FilterOwnershipTransferred(opts, previousOwner, newOwner)
	})
}

func Fuzz_Nosy_SystemConfigFilterer_ParseConfigUpdate__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigFilterer
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.ParseConfigUpdate(log)
	})
}

func Fuzz_Nosy_SystemConfigFilterer_ParseInitialized__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigFilterer
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.ParseInitialized(log)
	})
}

func Fuzz_Nosy_SystemConfigFilterer_ParseOwnershipTransferred__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigFilterer
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.ParseOwnershipTransferred(log)
	})
}

// skipping Fuzz_Nosy_SystemConfigFilterer_WatchConfigUpdate__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SystemConfigConfigUpdate

// skipping Fuzz_Nosy_SystemConfigFilterer_WatchInitialized__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SystemConfigInitialized

// skipping Fuzz_Nosy_SystemConfigFilterer_WatchOwnershipTransferred__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.SystemConfigOwnershipTransferred

func Fuzz_Nosy_SystemConfigInitializedIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SystemConfigInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SystemConfigInitializedIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SystemConfigInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SystemConfigInitializedIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SystemConfigInitializedIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_SystemConfigOwnershipTransferredIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SystemConfigOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_SystemConfigOwnershipTransferredIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SystemConfigOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_SystemConfigOwnershipTransferredIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *SystemConfigOwnershipTransferredIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_SystemConfigRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_SystemConfigRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SystemConfigRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigRaw
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.Transfer(opts)
	})
}

func Fuzz_Nosy_SystemConfigSession_BATCHINBOXSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.BATCHINBOXSLOT()
	})
}

func Fuzz_Nosy_SystemConfigSession_BasefeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.BasefeeScalar()
	})
}

func Fuzz_Nosy_SystemConfigSession_BatchInbox__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.BatchInbox()
	})
}

func Fuzz_Nosy_SystemConfigSession_BatcherHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.BatcherHash()
	})
}

func Fuzz_Nosy_SystemConfigSession_BlobbasefeeScalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.BlobbasefeeScalar()
	})
}

func Fuzz_Nosy_SystemConfigSession_DISPUTEGAMEFACTORYSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.DISPUTEGAMEFACTORYSLOT()
	})
}

func Fuzz_Nosy_SystemConfigSession_DisputeGameFactory__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.DisputeGameFactory()
	})
}

func Fuzz_Nosy_SystemConfigSession_Eip1559Denominator__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Eip1559Denominator()
	})
}

func Fuzz_Nosy_SystemConfigSession_Eip1559Elasticity__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Eip1559Elasticity()
	})
}

func Fuzz_Nosy_SystemConfigSession_GasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.GasLimit()
	})
}

func Fuzz_Nosy_SystemConfigSession_GasPayingToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.GasPayingToken()
	})
}

func Fuzz_Nosy_SystemConfigSession_GasPayingTokenName__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.GasPayingTokenName()
	})
}

func Fuzz_Nosy_SystemConfigSession_GasPayingTokenSymbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.GasPayingTokenSymbol()
	})
}

func Fuzz_Nosy_SystemConfigSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		var _basefeeScalar uint32
		fill_err = tp.Fill(&_basefeeScalar)
		if fill_err != nil {
			return
		}
		var _blobbasefeeScalar uint32
		fill_err = tp.Fill(&_blobbasefeeScalar)
		if fill_err != nil {
			return
		}
		var _batcherHash [32]byte
		fill_err = tp.Fill(&_batcherHash)
		if fill_err != nil {
			return
		}
		var _gasLimit uint64
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		var _unsafeBlockSigner common.Address
		fill_err = tp.Fill(&_unsafeBlockSigner)
		if fill_err != nil {
			return
		}
		var _config IResourceMeteringResourceConfig
		fill_err = tp.Fill(&_config)
		if fill_err != nil {
			return
		}
		var _batchInbox common.Address
		fill_err = tp.Fill(&_batchInbox)
		if fill_err != nil {
			return
		}
		var _addresses SystemConfigAddresses
		fill_err = tp.Fill(&_addresses)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Initialize(_owner, _basefeeScalar, _blobbasefeeScalar, _batcherHash, _gasLimit, _unsafeBlockSigner, _config, _batchInbox, _addresses)
	})
}

func Fuzz_Nosy_SystemConfigSession_IsCustomGasToken__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.IsCustomGasToken()
	})
}

func Fuzz_Nosy_SystemConfigSession_L1CROSSDOMAINMESSENGERSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.L1CROSSDOMAINMESSENGERSLOT()
	})
}

func Fuzz_Nosy_SystemConfigSession_L1CrossDomainMessenger__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.L1CrossDomainMessenger()
	})
}

func Fuzz_Nosy_SystemConfigSession_L1ERC721BRIDGESLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.L1ERC721BRIDGESLOT()
	})
}

func Fuzz_Nosy_SystemConfigSession_L1ERC721Bridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.L1ERC721Bridge()
	})
}

func Fuzz_Nosy_SystemConfigSession_L1STANDARDBRIDGESLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.L1STANDARDBRIDGESLOT()
	})
}

func Fuzz_Nosy_SystemConfigSession_L1StandardBridge__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.L1StandardBridge()
	})
}

func Fuzz_Nosy_SystemConfigSession_MaximumGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.MaximumGasLimit()
	})
}

func Fuzz_Nosy_SystemConfigSession_MinimumGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.MinimumGasLimit()
	})
}

func Fuzz_Nosy_SystemConfigSession_OPTIMISMMINTABLEERC20FACTORYSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.OPTIMISMMINTABLEERC20FACTORYSLOT()
	})
}

func Fuzz_Nosy_SystemConfigSession_OPTIMISMPORTALSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.OPTIMISMPORTALSLOT()
	})
}

func Fuzz_Nosy_SystemConfigSession_OptimismMintableERC20Factory__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.OptimismMintableERC20Factory()
	})
}

func Fuzz_Nosy_SystemConfigSession_OptimismPortal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.OptimismPortal()
	})
}

func Fuzz_Nosy_SystemConfigSession_Overhead__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Overhead()
	})
}

func Fuzz_Nosy_SystemConfigSession_Owner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Owner()
	})
}

func Fuzz_Nosy_SystemConfigSession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.RenounceOwnership()
	})
}

func Fuzz_Nosy_SystemConfigSession_ResourceConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.ResourceConfig()
	})
}

func Fuzz_Nosy_SystemConfigSession_STARTBLOCKSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.STARTBLOCKSLOT()
	})
}

func Fuzz_Nosy_SystemConfigSession_Scalar__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Scalar()
	})
}

func Fuzz_Nosy_SystemConfigSession_SetBatcherHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _batcherHash [32]byte
		fill_err = tp.Fill(&_batcherHash)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.SetBatcherHash(_batcherHash)
	})
}

func Fuzz_Nosy_SystemConfigSession_SetEIP1559Params__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _denominator uint32
		fill_err = tp.Fill(&_denominator)
		if fill_err != nil {
			return
		}
		var _elasticity uint32
		fill_err = tp.Fill(&_elasticity)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.SetEIP1559Params(_denominator, _elasticity)
	})
}

func Fuzz_Nosy_SystemConfigSession_SetGasConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _overhead *big.Int
		fill_err = tp.Fill(&_overhead)
		if fill_err != nil {
			return
		}
		var _scalar *big.Int
		fill_err = tp.Fill(&_scalar)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || _overhead == nil || _scalar == nil {
			return
		}

		_SystemConfig.SetGasConfig(_overhead, _scalar)
	})
}

func Fuzz_Nosy_SystemConfigSession_SetGasConfigEcotone__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _basefeeScalar uint32
		fill_err = tp.Fill(&_basefeeScalar)
		if fill_err != nil {
			return
		}
		var _blobbasefeeScalar uint32
		fill_err = tp.Fill(&_blobbasefeeScalar)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.SetGasConfigEcotone(_basefeeScalar, _blobbasefeeScalar)
	})
}

func Fuzz_Nosy_SystemConfigSession_SetGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _gasLimit uint64
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.SetGasLimit(_gasLimit)
	})
}

func Fuzz_Nosy_SystemConfigSession_SetUnsafeBlockSigner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _unsafeBlockSigner common.Address
		fill_err = tp.Fill(&_unsafeBlockSigner)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.SetUnsafeBlockSigner(_unsafeBlockSigner)
	})
}

func Fuzz_Nosy_SystemConfigSession_StartBlock__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.StartBlock()
	})
}

func Fuzz_Nosy_SystemConfigSession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_SystemConfigSession_UNSAFEBLOCKSIGNERSLOT__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.UNSAFEBLOCKSIGNERSLOT()
	})
}

func Fuzz_Nosy_SystemConfigSession_UnsafeBlockSigner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.UnsafeBlockSigner()
	})
}

func Fuzz_Nosy_SystemConfigSession_VERSION__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.VERSION()
	})
}

func Fuzz_Nosy_SystemConfigSession_Version__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Version()
	})
}

func Fuzz_Nosy_SystemConfigTransactor_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactor
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		var _basefeeScalar uint32
		fill_err = tp.Fill(&_basefeeScalar)
		if fill_err != nil {
			return
		}
		var _blobbasefeeScalar uint32
		fill_err = tp.Fill(&_blobbasefeeScalar)
		if fill_err != nil {
			return
		}
		var _batcherHash [32]byte
		fill_err = tp.Fill(&_batcherHash)
		if fill_err != nil {
			return
		}
		var _gasLimit uint64
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		var _unsafeBlockSigner common.Address
		fill_err = tp.Fill(&_unsafeBlockSigner)
		if fill_err != nil {
			return
		}
		var _config IResourceMeteringResourceConfig
		fill_err = tp.Fill(&_config)
		if fill_err != nil {
			return
		}
		var _batchInbox common.Address
		fill_err = tp.Fill(&_batchInbox)
		if fill_err != nil {
			return
		}
		var _addresses SystemConfigAddresses
		fill_err = tp.Fill(&_addresses)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.Initialize(opts, _owner, _basefeeScalar, _blobbasefeeScalar, _batcherHash, _gasLimit, _unsafeBlockSigner, _config, _batchInbox, _addresses)
	})
}

func Fuzz_Nosy_SystemConfigTransactor_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactor
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.RenounceOwnership(opts)
	})
}

func Fuzz_Nosy_SystemConfigTransactor_SetBatcherHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactor
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _batcherHash [32]byte
		fill_err = tp.Fill(&_batcherHash)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.SetBatcherHash(opts, _batcherHash)
	})
}

func Fuzz_Nosy_SystemConfigTransactor_SetEIP1559Params__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactor
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _denominator uint32
		fill_err = tp.Fill(&_denominator)
		if fill_err != nil {
			return
		}
		var _elasticity uint32
		fill_err = tp.Fill(&_elasticity)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.SetEIP1559Params(opts, _denominator, _elasticity)
	})
}

func Fuzz_Nosy_SystemConfigTransactor_SetGasConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactor
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _overhead *big.Int
		fill_err = tp.Fill(&_overhead)
		if fill_err != nil {
			return
		}
		var _scalar *big.Int
		fill_err = tp.Fill(&_scalar)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil || _overhead == nil || _scalar == nil {
			return
		}

		_SystemConfig.SetGasConfig(opts, _overhead, _scalar)
	})
}

func Fuzz_Nosy_SystemConfigTransactor_SetGasConfigEcotone__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactor
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _basefeeScalar uint32
		fill_err = tp.Fill(&_basefeeScalar)
		if fill_err != nil {
			return
		}
		var _blobbasefeeScalar uint32
		fill_err = tp.Fill(&_blobbasefeeScalar)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.SetGasConfigEcotone(opts, _basefeeScalar, _blobbasefeeScalar)
	})
}

func Fuzz_Nosy_SystemConfigTransactor_SetGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactor
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _gasLimit uint64
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.SetGasLimit(opts, _gasLimit)
	})
}

func Fuzz_Nosy_SystemConfigTransactor_SetUnsafeBlockSigner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactor
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var _unsafeBlockSigner common.Address
		fill_err = tp.Fill(&_unsafeBlockSigner)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.SetUnsafeBlockSigner(opts, _unsafeBlockSigner)
	})
}

func Fuzz_Nosy_SystemConfigTransactor_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactor
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.TransferOwnership(opts, newOwner)
	})
}

// skipping Fuzz_Nosy_SystemConfigTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_SystemConfigTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactorRaw
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || opts == nil {
			return
		}

		_SystemConfig.Transfer(opts)
	})
}

func Fuzz_Nosy_SystemConfigTransactorSession_Initialize__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactorSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _owner common.Address
		fill_err = tp.Fill(&_owner)
		if fill_err != nil {
			return
		}
		var _basefeeScalar uint32
		fill_err = tp.Fill(&_basefeeScalar)
		if fill_err != nil {
			return
		}
		var _blobbasefeeScalar uint32
		fill_err = tp.Fill(&_blobbasefeeScalar)
		if fill_err != nil {
			return
		}
		var _batcherHash [32]byte
		fill_err = tp.Fill(&_batcherHash)
		if fill_err != nil {
			return
		}
		var _gasLimit uint64
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		var _unsafeBlockSigner common.Address
		fill_err = tp.Fill(&_unsafeBlockSigner)
		if fill_err != nil {
			return
		}
		var _config IResourceMeteringResourceConfig
		fill_err = tp.Fill(&_config)
		if fill_err != nil {
			return
		}
		var _batchInbox common.Address
		fill_err = tp.Fill(&_batchInbox)
		if fill_err != nil {
			return
		}
		var _addresses SystemConfigAddresses
		fill_err = tp.Fill(&_addresses)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.Initialize(_owner, _basefeeScalar, _blobbasefeeScalar, _batcherHash, _gasLimit, _unsafeBlockSigner, _config, _batchInbox, _addresses)
	})
}

func Fuzz_Nosy_SystemConfigTransactorSession_RenounceOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactorSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.RenounceOwnership()
	})
}

func Fuzz_Nosy_SystemConfigTransactorSession_SetBatcherHash__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactorSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _batcherHash [32]byte
		fill_err = tp.Fill(&_batcherHash)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.SetBatcherHash(_batcherHash)
	})
}

func Fuzz_Nosy_SystemConfigTransactorSession_SetEIP1559Params__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactorSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _denominator uint32
		fill_err = tp.Fill(&_denominator)
		if fill_err != nil {
			return
		}
		var _elasticity uint32
		fill_err = tp.Fill(&_elasticity)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.SetEIP1559Params(_denominator, _elasticity)
	})
}

func Fuzz_Nosy_SystemConfigTransactorSession_SetGasConfig__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactorSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _overhead *big.Int
		fill_err = tp.Fill(&_overhead)
		if fill_err != nil {
			return
		}
		var _scalar *big.Int
		fill_err = tp.Fill(&_scalar)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil || _overhead == nil || _scalar == nil {
			return
		}

		_SystemConfig.SetGasConfig(_overhead, _scalar)
	})
}

func Fuzz_Nosy_SystemConfigTransactorSession_SetGasConfigEcotone__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactorSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _basefeeScalar uint32
		fill_err = tp.Fill(&_basefeeScalar)
		if fill_err != nil {
			return
		}
		var _blobbasefeeScalar uint32
		fill_err = tp.Fill(&_blobbasefeeScalar)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.SetGasConfigEcotone(_basefeeScalar, _blobbasefeeScalar)
	})
}

func Fuzz_Nosy_SystemConfigTransactorSession_SetGasLimit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactorSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _gasLimit uint64
		fill_err = tp.Fill(&_gasLimit)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.SetGasLimit(_gasLimit)
	})
}

func Fuzz_Nosy_SystemConfigTransactorSession_SetUnsafeBlockSigner__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactorSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var _unsafeBlockSigner common.Address
		fill_err = tp.Fill(&_unsafeBlockSigner)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.SetUnsafeBlockSigner(_unsafeBlockSigner)
	})
}

func Fuzz_Nosy_SystemConfigTransactorSession_TransferOwnership__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _SystemConfig *SystemConfigTransactorSession
		fill_err = tp.Fill(&_SystemConfig)
		if fill_err != nil {
			return
		}
		var newOwner common.Address
		fill_err = tp.Fill(&newOwner)
		if fill_err != nil {
			return
		}
		if _SystemConfig == nil {
			return
		}

		_SystemConfig.TransferOwnership(newOwner)
	})
}

func Fuzz_Nosy_WETH9ApprovalIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETH9ApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_WETH9ApprovalIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETH9ApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_WETH9ApprovalIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETH9ApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_WETH9Caller_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Caller
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.Allowance(opts, arg0, arg1)
	})
}

func Fuzz_Nosy_WETH9Caller_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Caller
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.BalanceOf(opts, arg0)
	})
}

func Fuzz_Nosy_WETH9Caller_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Caller
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.Decimals(opts)
	})
}

func Fuzz_Nosy_WETH9Caller_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Caller
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.Name(opts)
	})
}

func Fuzz_Nosy_WETH9Caller_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Caller
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.Symbol(opts)
	})
}

func Fuzz_Nosy_WETH9Caller_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Caller
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.TotalSupply(opts)
	})
}

// skipping Fuzz_Nosy_WETH9CallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_WETH9CallerSession_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9CallerSession
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.Allowance(arg0, arg1)
	})
}

func Fuzz_Nosy_WETH9CallerSession_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9CallerSession
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.BalanceOf(arg0)
	})
}

func Fuzz_Nosy_WETH9CallerSession_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9CallerSession
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.Decimals()
	})
}

func Fuzz_Nosy_WETH9CallerSession_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9CallerSession
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.Name()
	})
}

func Fuzz_Nosy_WETH9CallerSession_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9CallerSession
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.Symbol()
	})
}

func Fuzz_Nosy_WETH9CallerSession_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9CallerSession
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.TotalSupply()
	})
}

func Fuzz_Nosy_WETH9DepositIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETH9DepositIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_WETH9DepositIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETH9DepositIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_WETH9DepositIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETH9DepositIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_WETH9Filterer_FilterApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Filterer
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var src []common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var guy []common.Address
		fill_err = tp.Fill(&guy)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.FilterApproval(opts, src, guy)
	})
}

func Fuzz_Nosy_WETH9Filterer_FilterDeposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Filterer
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var dst []common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.FilterDeposit(opts, dst)
	})
}

func Fuzz_Nosy_WETH9Filterer_FilterTransfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Filterer
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var src []common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var dst []common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.FilterTransfer(opts, src, dst)
	})
}

func Fuzz_Nosy_WETH9Filterer_FilterWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Filterer
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var src []common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.FilterWithdrawal(opts, src)
	})
}

func Fuzz_Nosy_WETH9Filterer_ParseApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Filterer
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.ParseApproval(log)
	})
}

func Fuzz_Nosy_WETH9Filterer_ParseDeposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Filterer
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.ParseDeposit(log)
	})
}

func Fuzz_Nosy_WETH9Filterer_ParseTransfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Filterer
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.ParseTransfer(log)
	})
}

func Fuzz_Nosy_WETH9Filterer_ParseWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Filterer
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.ParseWithdrawal(log)
	})
}

// skipping Fuzz_Nosy_WETH9Filterer_WatchApproval__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.WETH9Approval

// skipping Fuzz_Nosy_WETH9Filterer_WatchDeposit__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.WETH9Deposit

// skipping Fuzz_Nosy_WETH9Filterer_WatchTransfer__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.WETH9Transfer

// skipping Fuzz_Nosy_WETH9Filterer_WatchWithdrawal__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.WETH9Withdrawal

// skipping Fuzz_Nosy_WETH9Raw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_WETH9Raw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_WETH9Raw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Raw
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.Transfer(opts)
	})
}

func Fuzz_Nosy_WETH9Session_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Session
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.Allowance(arg0, arg1)
	})
}

func Fuzz_Nosy_WETH9Session_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Session
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var guy common.Address
		fill_err = tp.Fill(&guy)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || wad == nil {
			return
		}

		_WETH9.Approve(guy, wad)
	})
}

func Fuzz_Nosy_WETH9Session_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Session
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.BalanceOf(arg0)
	})
}

func Fuzz_Nosy_WETH9Session_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Session
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.Decimals()
	})
}

func Fuzz_Nosy_WETH9Session_Deposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Session
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.Deposit()
	})
}

func Fuzz_Nosy_WETH9Session_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Session
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.Fallback(calldata)
	})
}

func Fuzz_Nosy_WETH9Session_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Session
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.Name()
	})
}

func Fuzz_Nosy_WETH9Session_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Session
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.Symbol()
	})
}

func Fuzz_Nosy_WETH9Session_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Session
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.TotalSupply()
	})
}

func Fuzz_Nosy_WETH9Session_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Session
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || wad == nil {
			return
		}

		_WETH9.Transfer(dst, wad)
	})
}

func Fuzz_Nosy_WETH9Session_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Session
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var src common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || wad == nil {
			return
		}

		_WETH9.TransferFrom(src, dst, wad)
	})
}

func Fuzz_Nosy_WETH9Session_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Session
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || wad == nil {
			return
		}

		_WETH9.Withdraw(wad)
	})
}

func Fuzz_Nosy_WETH9Transactor_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Transactor
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var guy common.Address
		fill_err = tp.Fill(&guy)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil || wad == nil {
			return
		}

		_WETH9.Approve(opts, guy, wad)
	})
}

func Fuzz_Nosy_WETH9Transactor_Deposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Transactor
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.Deposit(opts)
	})
}

func Fuzz_Nosy_WETH9Transactor_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Transactor
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.Fallback(opts, calldata)
	})
}

func Fuzz_Nosy_WETH9Transactor_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Transactor
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil || wad == nil {
			return
		}

		_WETH9.Transfer(opts, dst, wad)
	})
}

func Fuzz_Nosy_WETH9Transactor_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Transactor
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var src common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil || wad == nil {
			return
		}

		_WETH9.TransferFrom(opts, src, dst, wad)
	})
}

func Fuzz_Nosy_WETH9Transactor_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9Transactor
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil || wad == nil {
			return
		}

		_WETH9.Withdraw(opts, wad)
	})
}

// skipping Fuzz_Nosy_WETH9TransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_WETH9TransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9TransactorRaw
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || opts == nil {
			return
		}

		_WETH9.Transfer(opts)
	})
}

func Fuzz_Nosy_WETH9TransactorSession_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9TransactorSession
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var guy common.Address
		fill_err = tp.Fill(&guy)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || wad == nil {
			return
		}

		_WETH9.Approve(guy, wad)
	})
}

func Fuzz_Nosy_WETH9TransactorSession_Deposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9TransactorSession
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.Deposit()
	})
}

func Fuzz_Nosy_WETH9TransactorSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9TransactorSession
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil {
			return
		}

		_WETH9.Fallback(calldata)
	})
}

func Fuzz_Nosy_WETH9TransactorSession_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9TransactorSession
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || wad == nil {
			return
		}

		_WETH9.Transfer(dst, wad)
	})
}

func Fuzz_Nosy_WETH9TransactorSession_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9TransactorSession
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var src common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || wad == nil {
			return
		}

		_WETH9.TransferFrom(src, dst, wad)
	})
}

func Fuzz_Nosy_WETH9TransactorSession_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH9 *WETH9TransactorSession
		fill_err = tp.Fill(&_WETH9)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH9 == nil || wad == nil {
			return
		}

		_WETH9.Withdraw(wad)
	})
}

func Fuzz_Nosy_WETH9TransferIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETH9TransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_WETH9TransferIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETH9TransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_WETH9TransferIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETH9TransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_WETH9WithdrawalIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETH9WithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_WETH9WithdrawalIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETH9WithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_WETH9WithdrawalIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETH9WithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_WETHApprovalIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETHApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_WETHApprovalIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETHApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_WETHApprovalIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETHApprovalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_WETHCaller_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHCaller
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.Allowance(opts, arg0, arg1)
	})
}

func Fuzz_Nosy_WETHCaller_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHCaller
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.BalanceOf(opts, arg0)
	})
}

func Fuzz_Nosy_WETHCaller_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHCaller
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.Decimals(opts)
	})
}

func Fuzz_Nosy_WETHCaller_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHCaller
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.Name(opts)
	})
}

func Fuzz_Nosy_WETHCaller_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHCaller
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.Symbol(opts)
	})
}

func Fuzz_Nosy_WETHCaller_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHCaller
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.CallOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.TotalSupply(opts)
	})
}

// skipping Fuzz_Nosy_WETHCallerRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

func Fuzz_Nosy_WETHCallerSession_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHCallerSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Allowance(arg0, arg1)
	})
}

func Fuzz_Nosy_WETHCallerSession_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHCallerSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.BalanceOf(arg0)
	})
}

func Fuzz_Nosy_WETHCallerSession_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHCallerSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Decimals()
	})
}

func Fuzz_Nosy_WETHCallerSession_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHCallerSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Name()
	})
}

func Fuzz_Nosy_WETHCallerSession_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHCallerSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Symbol()
	})
}

func Fuzz_Nosy_WETHCallerSession_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHCallerSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.TotalSupply()
	})
}

func Fuzz_Nosy_WETHDepositIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETHDepositIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_WETHDepositIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETHDepositIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_WETHDepositIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETHDepositIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_WETHFilterer_FilterApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHFilterer
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var src []common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var guy []common.Address
		fill_err = tp.Fill(&guy)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.FilterApproval(opts, src, guy)
	})
}

func Fuzz_Nosy_WETHFilterer_FilterDeposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHFilterer
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var dst []common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.FilterDeposit(opts, dst)
	})
}

func Fuzz_Nosy_WETHFilterer_FilterTransfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHFilterer
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var src []common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var dst []common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.FilterTransfer(opts, src, dst)
	})
}

func Fuzz_Nosy_WETHFilterer_FilterWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHFilterer
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.FilterOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var src []common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.FilterWithdrawal(opts, src)
	})
}

func Fuzz_Nosy_WETHFilterer_ParseApproval__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHFilterer
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.ParseApproval(log)
	})
}

func Fuzz_Nosy_WETHFilterer_ParseDeposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHFilterer
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.ParseDeposit(log)
	})
}

func Fuzz_Nosy_WETHFilterer_ParseTransfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHFilterer
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.ParseTransfer(log)
	})
}

func Fuzz_Nosy_WETHFilterer_ParseWithdrawal__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHFilterer
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var log types.Log
		fill_err = tp.Fill(&log)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.ParseWithdrawal(log)
	})
}

// skipping Fuzz_Nosy_WETHFilterer_WatchApproval__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.WETHApproval

// skipping Fuzz_Nosy_WETHFilterer_WatchDeposit__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.WETHDeposit

// skipping Fuzz_Nosy_WETHFilterer_WatchTransfer__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.WETHTransfer

// skipping Fuzz_Nosy_WETHFilterer_WatchWithdrawal__ because parameters include func, chan, or unsupported interface: chan<- *github.com/ethereum-optimism/optimism/op-e2e/bindings.WETHWithdrawal

// skipping Fuzz_Nosy_WETHRaw_Call__ because parameters include func, chan, or unsupported interface: *[]interface{}

// skipping Fuzz_Nosy_WETHRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_WETHRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHRaw
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.Transfer(opts)
	})
}

func Fuzz_Nosy_WETHSession_Allowance__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		var arg1 common.Address
		fill_err = tp.Fill(&arg1)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Allowance(arg0, arg1)
	})
}

func Fuzz_Nosy_WETHSession_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var guy common.Address
		fill_err = tp.Fill(&guy)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH == nil || wad == nil {
			return
		}

		_WETH.Approve(guy, wad)
	})
}

func Fuzz_Nosy_WETHSession_BalanceOf__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var arg0 common.Address
		fill_err = tp.Fill(&arg0)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.BalanceOf(arg0)
	})
}

func Fuzz_Nosy_WETHSession_Decimals__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Decimals()
	})
}

func Fuzz_Nosy_WETHSession_Deposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Deposit()
	})
}

func Fuzz_Nosy_WETHSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Fallback(calldata)
	})
}

func Fuzz_Nosy_WETHSession_Name__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Name()
	})
}

func Fuzz_Nosy_WETHSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Receive()
	})
}

func Fuzz_Nosy_WETHSession_Symbol__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Symbol()
	})
}

func Fuzz_Nosy_WETHSession_TotalSupply__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.TotalSupply()
	})
}

func Fuzz_Nosy_WETHSession_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH == nil || wad == nil {
			return
		}

		_WETH.Transfer(dst, wad)
	})
}

func Fuzz_Nosy_WETHSession_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var src common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH == nil || wad == nil {
			return
		}

		_WETH.TransferFrom(src, dst, wad)
	})
}

func Fuzz_Nosy_WETHSession_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH == nil || wad == nil {
			return
		}

		_WETH.Withdraw(wad)
	})
}

func Fuzz_Nosy_WETHTransactor_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactor
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var guy common.Address
		fill_err = tp.Fill(&guy)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil || wad == nil {
			return
		}

		_WETH.Approve(opts, guy, wad)
	})
}

func Fuzz_Nosy_WETHTransactor_Deposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactor
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.Deposit(opts)
	})
}

func Fuzz_Nosy_WETHTransactor_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactor
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.Fallback(opts, calldata)
	})
}

func Fuzz_Nosy_WETHTransactor_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactor
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.Receive(opts)
	})
}

func Fuzz_Nosy_WETHTransactor_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactor
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil || wad == nil {
			return
		}

		_WETH.Transfer(opts, dst, wad)
	})
}

func Fuzz_Nosy_WETHTransactor_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactor
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var src common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil || wad == nil {
			return
		}

		_WETH.TransferFrom(opts, src, dst, wad)
	})
}

func Fuzz_Nosy_WETHTransactor_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactor
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil || wad == nil {
			return
		}

		_WETH.Withdraw(opts, wad)
	})
}

// skipping Fuzz_Nosy_WETHTransactorRaw_Transact__ because parameters include func, chan, or unsupported interface: []interface{}

func Fuzz_Nosy_WETHTransactorRaw_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactorRaw
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var opts *bind.TransactOpts
		fill_err = tp.Fill(&opts)
		if fill_err != nil {
			return
		}
		if _WETH == nil || opts == nil {
			return
		}

		_WETH.Transfer(opts)
	})
}

func Fuzz_Nosy_WETHTransactorSession_Approve__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactorSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var guy common.Address
		fill_err = tp.Fill(&guy)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH == nil || wad == nil {
			return
		}

		_WETH.Approve(guy, wad)
	})
}

func Fuzz_Nosy_WETHTransactorSession_Deposit__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactorSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Deposit()
	})
}

func Fuzz_Nosy_WETHTransactorSession_Fallback__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactorSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var calldata []byte
		fill_err = tp.Fill(&calldata)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Fallback(calldata)
	})
}

func Fuzz_Nosy_WETHTransactorSession_Receive__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactorSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		if _WETH == nil {
			return
		}

		_WETH.Receive()
	})
}

func Fuzz_Nosy_WETHTransactorSession_Transfer__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactorSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH == nil || wad == nil {
			return
		}

		_WETH.Transfer(dst, wad)
	})
}

func Fuzz_Nosy_WETHTransactorSession_TransferFrom__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactorSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var src common.Address
		fill_err = tp.Fill(&src)
		if fill_err != nil {
			return
		}
		var dst common.Address
		fill_err = tp.Fill(&dst)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH == nil || wad == nil {
			return
		}

		_WETH.TransferFrom(src, dst, wad)
	})
}

func Fuzz_Nosy_WETHTransactorSession_Withdraw__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var _WETH *WETHTransactorSession
		fill_err = tp.Fill(&_WETH)
		if fill_err != nil {
			return
		}
		var wad *big.Int
		fill_err = tp.Fill(&wad)
		if fill_err != nil {
			return
		}
		if _WETH == nil || wad == nil {
			return
		}

		_WETH.Withdraw(wad)
	})
}

func Fuzz_Nosy_WETHTransferIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETHTransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_WETHTransferIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETHTransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_WETHTransferIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETHTransferIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

func Fuzz_Nosy_WETHWithdrawalIterator_Close__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETHWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Close()
	})
}

func Fuzz_Nosy_WETHWithdrawalIterator_Error__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETHWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Error()
	})
}

func Fuzz_Nosy_WETHWithdrawalIterator_Next__(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {

		tp, fill_err := GetTypeProvider(data)
		if fill_err != nil {
			return
		}
		var it *WETHWithdrawalIterator
		fill_err = tp.Fill(&it)
		if fill_err != nil {
			return
		}
		if it == nil {
			return
		}

		it.Next()
	})
}

// skipping Fuzz_Nosy_DeployAddressManager__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployAlphabetVM__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployAlphabetVM2__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployBaseFeeVault__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployCreate2Deployer__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployDelayedWETH__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployDeployerWhitelist__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployDeterministicDeploymentProxy__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployDisputeGameFactory__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployEAS__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployEntryPoint__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployGasPriceOracle__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployGovernanceToken__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployL1Block__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployL1BlockNumber__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployL1CrossDomainMessenger__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployL1ERC721Bridge__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployL1FeeVault__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployL1StandardBridge__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployL2CrossDomainMessenger__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployL2ERC721Bridge__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployL2OutputOracle__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployL2StandardBridge__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployL2ToL1MessagePasser__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployLegacyMessagePasser__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployMIPS__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployMultiCall3__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployMultiSendCallOnlyV130__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployMultiSendV130__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployOptimismMintableERC20__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployOptimismMintableERC20Factory__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployOptimismMintableERC721Factory__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployOptimismPortal__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployPermit2__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployProtocolVersions__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployProxy__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployProxyAdmin__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeploySafe__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeploySafeL2V130__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeploySafeProxyFactory__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeploySafeSingletonFactory__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeploySafeV130__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeploySchemaRegistry__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeploySenderCreator__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeploySequencerFeeVault__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployStorageSetter__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeploySuperchainConfig__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployWETH__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend

// skipping Fuzz_Nosy_DeployWETH9__ because parameters include func, chan, or unsupported interface: github.com/ethereum/go-ethereum/accounts/abi/bind.ContractBackend
